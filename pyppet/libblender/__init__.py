## generated by RPythonic 0.4.4d
## http://code.google.com/p/rpythonic/
import os, sys, ctypes, inspect
__os = os
__sys = sys
__inspect = inspect

PYTHON_RESERVED_KEYWORDS = 'for while in as global with try except lambda return raise if else elif eval exec and not or break continue finally print yield del def class assert from is pass'.split()


IS32BIT = (ctypes.sizeof(ctypes.c_void_p)==4)

_ISPYTHON2 = sys.version_info[0] == 2
if _ISPYTHON2: _NULLBYTE = '\0'
else: _NULLBYTE = bytes( chr(0), 'ascii' )

def _CHARP2STRING( charp, encoding='utf-8' ):
	b = bytes()
	i = 0
	while True:
		char = charp[ i ]
		if char == _NULLBYTE: break
		else:
			b += char
			i += 1
	return b.decode( encoding )

## try to load precompiled c-libraries from this directory, if the library is not there try to load from the system.
_clibs_dir = os.path.dirname(os.path.abspath(__file__))

def _load_ctypes_lib( name ):
	if __os.name == 'posix':
		if __sys.platform.startswith('linux'):
			if not name.endswith('.so'): name += '.so'
			if not name.startswith('lib'): name = 'lib' + name

			if IS32BIT: 	path = __os.path.join(_clibs_dir,'linux32')
			else: 		path = __os.path.join(_clibs_dir,'linux64')
			url = __os.path.join( path, name )
			if __os.path.isfile( url ): return ctypes.CDLL(url)
			elif __os.path.isfile( '/usr/local/lib/%s'%name ): return ctypes.CDLL('/usr/local/lib/%s'%name)
			elif __os.path.isfile( '/usr/local/lib64/%s'%name ) and not IS32BIT: return ctypes.CDLL('/usr/local/lib64/%s'%name)
			elif __os.path.isfile( '/usr/lib/%s'%name ): return ctypes.CDLL('/usr/lib/%s'%name)
			elif __os.path.isfile( './%s'%name ): return ctypes.CDLL('./%s'%name)
			else:	# fallback
				try: return ctypes.CDLL(name)
				except: return ctypes.CDLL('')

		elif sys.platform == 'darwin':
			name += '.dylib'
			if IS32BIT: 	path = os.path.join(_clibs_dir,'osx32')
			else: 		path = os.path.join(_clibs_dir,'osx64')
			url = os.path.join( path, name )
			if os.path.isfile( url ): return ctypes.CDLL(url)
			else: return ctypes.CDLL(name) #fallback

	elif os.name == 'nt':
		name += '.dll'
		if IS32BIT: 	path = os.path.join(_clibs_dir,'win32')
		else: 		path = os.path.join(_clibs_dir,'win64')
		url = os.path.join( path, name )
		if os.path.isfile( url ): return ctypes.CDLL(url)
		else: return ctypes.CDLL(name) #fallback

RPYTHONIC_WRAPPER_FUNCTIONS = {}
RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES = []
RPYTHONIC_AUTOPREFIX_IGNORE = []

## ctypes does not clearly expose these types ##
PyCFuncPtrType = type(ctypes.CFUNCTYPE(ctypes.c_void_p))
PyCArrayType = type( ctypes.c_int * 2 )
PyCPointerType = type( ctypes.POINTER(ctypes.c_int) )
PyCStructType = type( ctypes.Structure )
CArgObject = type( ctypes.byref(ctypes.c_int()) )

class _rpythonic_meta_(object):
	'''
	Reserved Attributes:
		POINTER
		CSTRUCT
		CAST
	'''
	_rpythonic_ = True		# workaround for now, must have a way to know if object is a meta from another module, isinstance(o,_rpythonic_meta_) will fail in those cases. another workaround could be check sys.modules for other rpythonic modules and fetch _rpythonic_meta_ from there.
	def __init__(self, *args, **kw ):							# cheap trick, abuse **kw, and look for "pointer", "cast"
		if kw and 'pointer' not in kw: raise SyntaxError	# sorry, you can not init with keywords
		elif kw and 'pointer' in kw:
			if 'cast' in kw and kw['cast']:
				self.POINTER = ctypes.cast( kw['pointer'], ctypes.POINTER(self.CSTRUCT) )
			else: self.POINTER = kw['pointer']
		else: self.POINTER = ctypes.pointer( self.CSTRUCT(*args) )
		self.POINTER.pyobject = self	# .pyobject is local to this pointer "object"

	def __getattr__(self,name):
		if hasattr( self.POINTER.contents, name ):
			return getattr( self.POINTER.contents, name )

		else:	# when rpythonic failed to generate good bindings - these lookups should be cached
			for parent in self._rpythonic_parent_classes_:
				if hasattr( parent, name ):
					method = getattr( parent, name )	# should check if it really is an unbound method
					func = parent._rpythonic_unbound_lookup_[ method ]
					n = func.name
					if len(func.argnames) > 1:
						argnames = func.argnames[ 1 : ]
						a = ',' + '=None,'.join( argnames ) + '=None'
						b = ','.join( argnames )
					else: a = b = ''
					lamb = eval( 'lambda self %s: %s( self.POINTER, %s )' %(a,n,b) )
					setattr( self.__class__, name, lamb )
					#return lamb	# this would return the unbound lambda, must call getattr again
					return getattr( self, name )

			## last resort, load from global name space ##
			G = globals()
			if name in G: return lambda *args: G[name](self.POINTER, *args)
			else:
				for prefix in self._autoprefix_:
					n = prefix + name
					if n in G: return lambda *args: G[n](self.POINTER, *args)
				print( 'possible auto-prefixes available', self._autoprefix_ )
				raise AttributeError

	def __call__(self, type=False):
		print('calling object is DEPRECATED - use ob.POINTER or ob.CSTRUCT')
		if type: return self.CSTRUCT
		else: return self.POINTER


def _rpythonic_generate_subclass_( name, struct, functions ):
	head = 'class %s( _rpythonic_meta_ ):' %name
	body = [ 
		'_rpythonic_parent_classes_ = []' ,
		'_rpythonic_unbound_lookup_ = {}' 
	]

	names = [ func.name for func in functions ]

	possibles = {}
	rank = []		# rank by longest name
	if len(names) > 3000: print('too many functions to use this hack')
	else:
		for n1 in names:
			prefix = ''
			for i,char in enumerate(n1):
				prefix += char
				if prefix not in possibles:
					possibles[ prefix ] = 0
					for n2 in names:
						if n2.startswith( prefix ):
							possibles[ prefix ] += 1

					if not rank or len(prefix) > len(rank[-1]) and possibles[prefix] > len(names)/4:
						rank.append( prefix )

	top = []
	while rank:
		best = rank.pop()
		if possibles[best] > len(functions)/2 and best not in names:
			if best.endswith('_set_') or best.endswith('_get_'): best = best[ : -4 ]
			elif best.endswith('Set') or best.endswith('Get'): best = best[ : -3 ]

			rem = []
			for other in rank:
				if best.startswith(other): rem.append( other )
			for r in rem: rank.remove( r )

			if best not in top: top.append( best )

		if len(top) > 3: break

	for n in names:		# find shortest prefixes #
		prefix = ''
		for i,char in enumerate(n):		# cammelCase
			if i==0: prefix += char; continue
			if char.isupper() and len(prefix) >= 2: break
			prefix += char
		if prefix and prefix != n and len(prefix) >= 2:
			hits = 0
			for other in names:
				if other.startswith( prefix ): hits += 1
			if hits >= 2 and prefix not in top:
				top.append( prefix )
				if len(top) >= 6: break

	## setup full names
	for func in functions:
		n = func.name
		if len(func.argnames) > 1:
			argnames = func.argnames[ 1 : ]
			a = ',' + '=None,'.join( argnames ) + '=None'
			b = ','.join( argnames )
		else: a = b = ''

		fhead = 'def %s( self %s ):' %(n,a)
		fbody = ['return %s(self.POINTER, %s)' %(func.name,b)]
		g = fhead + '\n\t\t' + '\n\t\t'.join( fbody )
		body.append( g )
		#body.append( '%s._rpythonic_function_ = %s' %(func.name, func.name) )

	## setup short names ##
	for n in names:
		for prefix in top:
			if n.startswith(prefix) and n[len(prefix):] not in names:
				alt = n[ len(prefix) : ]
				if alt and alt != n and alt not in PYTHON_RESERVED_KEYWORDS and not alt.isdigit() and not alt[0].isdigit():
					body.append( '%s = %s' %(alt,n) )
					names.append( alt )

	gen = head + '\n\t' + '\n\t'.join( body )
	try: exec( gen )
	except:
		print( gen )
		raise SyntaxError

	klass = locals()[name]
	klass.CSTRUCT = struct	# ctypes struct class

	klass._autoprefix_ = top
	for func in functions:
		unbound = getattr( klass, func.name )
		klass._rpythonic_unbound_lookup_[ unbound ] = func
		# klass.longname is klass.shortname = False
		# klass.longname == klass.shortname = True
	return klass

def _rpythonic_convert_structs_to_objects():
	G = globals()
	for klass in _OOAPI_:
		altname = name = klass.__name__
		prefix = ''
		for i,char in enumerate(name):
			if i==0: prefix += char; continue
			if char.isupper(): break
			prefix += char
		if prefix and prefix != name:
			hits = 0
			for other in _OOAPI_:
				if other is not klass:
					if other.__name__.startswith( prefix ): hits += 1
			if hits >= 2:
				altname = name[ len(prefix) : ]

		funcs = _OOAPI_[ klass ]
		newklass = _rpythonic_generate_subclass_( altname, klass, funcs )
		klass._rpythonic_wrapper_class_ = newklass
		G[ name ] = newklass	# replace struct with wrapper
		if altname not in G: G[ altname ] = newklass	# safely define with nicer name
		elif altname != name: # odd cases, maybe a function that returns the object, almost never happens.
			print('WARN - not replacing something with struct wrapper:', G[altname] )


def _rpythonic_setup_return_wrappers():
	R = _rpythonic_function_
	for klass in _OOAPI_:
		if klass in _OOAPI_RETURNS_OBJECT_:
			for f in _OOAPI_RETURNS_OBJECT_[klass]:
				f.object_oriented = True
				if not f.return_wrapper:	# just in case the ctypes footer had already defined it, do not overwrite
					f.return_wrapper = klass._rpythonic_wrapper_class_

def _rpythonic_function_( name, result=ctypes.c_void_p, args=[]):
	mname = '_metafunc_%s' %name
	exec( 'class %s( _rpythonic_metafunc_ ): pass' %mname )
	k = locals()[mname]
	return k( name, result, args )

_OOAPI_ = {}
_OOAPI_RETURNS_OBJECT_ = {}

class _rpythonic_metafunc_(object):
	def __init__(self, name, result=ctypes.c_void_p, args=[]):
		self.name = name
		self.result = result
		self.argtypes = []		# can dynamically change CFUNCTYPE trick
		self.argnames = []
		self.argtypestypes = []
		for i,arg in enumerate(args):
			n,t = arg
			if n in PYTHON_RESERVED_KEYWORDS: n = 'C_'+n
			if n in self.argnames: n = '%s%s' %(n,i)
			self.argnames.append( n )
			self.argtypes.append( t )
			self.argtypestypes.append( type(t) )		# precomputed for speed

		self.argnames = tuple( self.argnames )				# should never change
		self.numargs = len( self.argtypes )
		self.callbacks = [None] * self.numargs
		self.return_wrapper = None
		self.object_oriented = False
		self.function = None
		try:
			func = self.function = getattr(CTYPES_DLL, self.name )
			RPYTHONIC_WRAPPER_FUNCTIONS[ name ] = self
		except:
			RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES.append( name )
		if self.function: self.reset()

	def change_argument_type( self, name, t ):
		idx = self.argnames.index( name )
		self.argtypes[ idx ] = t
		self.argtypestypes[ idx ] = type(t)
		self.function.argtypes = self.argtypes

	def reset(self):
		if self.argnames:
			a = ',' + '=None,'.join( self.argnames ) + '=None'
			b = ','.join( self.argnames )
		else: a = b = ''

		callmeth = eval( 'lambda self %s: self._call_( %s )' %(a,b) )
		setattr( self.__class__, '__call__', callmeth )

		self.function.restype = self.result
		self.function.argtypes = self.argtypes

		if type( self.result ) is PyCPointerType and type(self.result._type_) is PyCStructType:
			klass = self.result._type_
			if klass not in _OOAPI_RETURNS_OBJECT_: _OOAPI_RETURNS_OBJECT_[klass] = []
			_OOAPI_RETURNS_OBJECT_[klass].append( self )

		self.defaults = []
		for i in range( self.numargs ):
			T = self.argtypes[ i ]
			if type(T) is PyCFuncPtrType:
				p = T()	# func pointers can not be None
				self.defaults.append( p )
				self.callbacks[ i ] = p					# save reference
			elif T in (ctypes.c_int, ctypes.c_uint, ctypes.c_long, ctypes.c_ulong):
				self.defaults.append( 0 )
			elif T in (ctypes.c_float, ctypes.c_double):
				self.defaults.append( .0 )
			else: self.defaults.append( None )	# None is allowed for all other types

			## generate OO API ##
			if i == 0 and type(T) is PyCPointerType and type(T._type_) is PyCStructType:
				klass = T._type_
				if klass not in _OOAPI_: _OOAPI_[ klass ] = []
				_OOAPI_[ klass ].append( self )

	def _call_( self, *args ):			# allow flexible calling types
		cargs = list( self.defaults )
		for i,arg in enumerate(args):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER
			elif hasattr( arg, '_rpythonic_' ): arg = arg.POINTER		# workaround - instance from another module

			t = type(arg)
			k = self.argtypes[ i ]
			kt = self.argtypestypes[ i ]
			if arg is None and cargs[i] is not None:	# use user defaults, very rare cases
				continue

			elif t is bool and k is ctypes.c_int:
				if arg: cargs[i] = 1	#ctypes.c_int(1)
				else: cargs[i] = 0	#ctypes.c_int(0)

			elif t in (list,tuple):				# convert lists and tuples into array
				if kt is PyCArrayType:
					cargs[ i ] = k(*arg)
				elif kt is PyCStructType:
					if k._array_wrapper_: cargs[ i ] = k(arg)	# allow easy array init
					else: cargs[ i ] = k(*arg)							# allow multiple args
				elif kt is PyCPointerType:
					cargs[ i ] = _convert_nested_list_to_pointer( k, arg )
				else: assert 0

			elif isinstance( arg, ctypes._Pointer ) and t is not k and kt is PyCPointerType:
				cargs[ i ] = ctypes.cast( arg, k )		# generic's that need to be cast

			elif kt is PyCStructType and isinstance( arg, ctypes._Pointer ):
				cargs[ i ] = arg.contents	# fixed may25

			elif kt is PyCPointerType and not isinstance( arg, (ctypes._Pointer,CArgObject) ):
				if t in (int,float,bool): ptr = k( k._type_(arg) )
				elif t is str:
					arg = arg.encode('utf-8')
					#ptr = k( k._type_() )								# not k() otherwise null pointer error
					#for j, char in enumerate(arg): ptr[ j ] = char		# not correct - missing null byte?
					ptr = ctypes.create_string_buffer(arg)				# correct and pypy compatible
				elif t in (PyCStructType, PyCArrayType):
					ptr = ctypes.cast( ctypes.pointer( arg ), k )
				else:
					ptr = arg	# TODO print warning?
				cargs[ i ] = ptr

			elif kt is PyCFuncPtrType:
				if t.__name__ == 'CFunctionType': cargs[ i ] = arg		# assume outside holds pointer
				else:													# this is not safe #
					cargs[ i ] = self.callbacks[ i ] = k( arg )				# assume arg is a callable
			else:
				cargs[ i ] = arg		# directly pass

		## if you define your own return_wrapper, it must take keyword "pointer"
		if self.return_wrapper: return self.return_wrapper( pointer=self.function( *cargs ) )
		else: return self.function( *cargs )



def _convert_nested_list_to_pointer( k, arg ):
	depth = 0; s = k
	while True:
		if type(s) is PyCPointerType:
			s = getattr( s, '_type_' )
			depth += 1
		else: break
	assert depth and depth <= 2
	if depth == 1:
		T = k._type_
		ptr = k( k._type_() )
		for i in range( len(arg) ):
			ptr[ i ] = T( *arg[i] )
	elif depth == 2:
		T = k._type_._type_
		_ptr = k._type_( k._type_._type_() )
		for i in range(len( arg )):
			for j in range( len(arg[i]) ):
				_ptr[ j ] = T( *arg[ i ][ j ] )
		ptr = k( _ptr )
	return ptr


def __freeze_rpythonic_struct( cls, fields ):
	if cls not in _OOAPI_: _OOAPI_[ cls ] = []	# wrap all structs
	try: setattr( cls, '_fields_', fields )
	except:
		print( 'WARN - bad order struct freeze', cls )
		#cls._fields_ = []

class _rpythonic_struct_( ctypes.Structure ):
	_array_wrapper_ = False
	_fields_ = []
	_methods_ = {}
	#def __call__(self): return self
	def __init__(self, *args, **kw ):
		cargs = []
		argtypes = []
		for a in self._fields_: argtypes.append( a[1] )
		if len(args) > len(argtypes): args = [args]	# allow both calling conventions
		for i,arg in enumerate( args ):
			if isinstance( arg, _rpythonic_meta_ ): arg = arg.POINTER

			t = type(arg)
			k = argtypes[ i ]
			if t in (list,tuple):
				if k.__class__.__name__	== 'PyCArrayType':
					cargs.append( k(*arg) )
				elif k.__class__.__name__ == 'PyCStructType':
					if k._array_wrapper_: cargs.append( k(arg) )	# allow easy array init
					else: cargs.append( k(*arg) )							# allow multiple args
			elif isinstance( arg, ctypes._Pointer ) and t is not k:
				cargs[ i ] = ctypes.cast( arg, k )	# generic's that need to be cast
			elif k.__class__.__name__ == 'PyCArrayType' and t in (float,int,bool):
				cargs.append( k(arg) )		# support init array from single value
			else:
				cargs.append( arg )		# directly pass

		ctypes.Structure.__init__(self, *cargs, **kw)


def _rpythonic_make_nice_global_enums_():
	G = globals()
	for name in RPYTHONIC_GLOBAL_ENUMS:
		if '_' in name and name.index('_') <= 4:
			altname = name[ name.index('_') + 1 : ]
			if altname not in G:
				G[altname] = RPYTHONIC_GLOBAL_ENUMS[ name ]

def _rpythonic_clean_up_missing_functions_():
	G = globals()
	for f in RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES:
		G.pop( f )
	print( "C functions loaded: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS) )
	print( "C functions failed: %s" %len(RPYTHONIC_WRAPPER_FUNCTIONS_FAILURES) )



###### NEW API #########
CTYPES_DLL = None

class _VOID_POINTER_CONTAINER_(object):
	def __init__(self, ptr, name=None):
		self._pointer_ = ptr
		self.name = name
NULL = _VOID_POINTER_CONTAINER_(None,'<null pointer>')


class meta:	# NEW API - allow run time switch from ctypes to rffi
	'''
	Methods:
		RPython will not allow object wrapper around a method (__call__ not allowed)
		keep C function names in list "__cfunctions__"
		rpythonic.enable_rffi( classA, classB )	
		can take advantage of methods in object-method-wrapper,
		generate rffi wrapper and set method on classA, etc.
		replaces object-method-wrapper with rffi-method

	Properties:
		CPython: obj.x=1
		RPython: obj.set_x(1)	
	'''
	METAS = []
	def __init__(self, constructors=[], methods={}, properties={}):
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		self.constructors = constructors
		self.methods = methods
		self.properties = properties
		self.METAS.append( self )



	def __call__(self, cls ):
		print('@meta', cls )

		if not self.constructors:
			lamb = lambda s, _explicit_pointer_=None: setattr(s,'_pointer_',getattr(_explicit_pointer_,'_pointer_')) if hasattr(_explicit_pointer_,'_pointer_') else setattr(s,'_pointer_',_explicit_pointer_)
			lamb._debug = '(no constructor)'
			setattr( cls, '__init__', lamb )
		else:
			con = self._find_best_function( self.constructors )
			cfunc = self._build_cfunc( con )
			setattr( cls, '_%s'%con['name'], cfunc )
			g = self._gen_init( con )
			setattr( cls, '__init__', g )
		
		## set methods ##
		for name in self.methods:
			meth = self.methods[ name ]
			cfuncs = []
			for m in meth['functions']:
				cfunc = self._build_cfunc( m, method=True, static=meth['static'] )
				self._setup_return( cfunc, meth )
				setattr( cls, '_%s'%m['name'], cfunc )
				cfuncs.append( cfunc )

			f = self._find_best_function( meth['functions'] )
			g = self._gen_method( meth, f )
			g._cfuncs = cfuncs
			if meth['static']: g = classmethod( g )
			setattr( cls, name, g )

		for name in self.properties:
			print( 'property:', name )
			p = []
			for f in self.properties[name]:
				cfunc = self._build_cfunc( f )
				setattr( cls, '_%s'%f['name'], cfunc )
				g = self._gen_method( f, f )
				p.append( g )

			setattr( cls, name, property(*p) )

		return cls


	@staticmethod
	def _build_cfunc( info, method=False, static=False ):
		cfunc = getattr(CTYPES_DLL, info['name'])
		if method and not static: argtypes = [ ctypes.c_void_p ]
		else: argtypes = []
		for p in info['parameters']: argtypes.append( eval(p['ctypes_type']) )
		cfunc.argtypes = argtypes
		return cfunc

	@staticmethod
	def _setup_return( cfunc, info ):
		if not info['returns_fundamental']:
			cfunc.restype = ctypes.c_void_p
		elif info['returns_fundamental']:
			cfunc.restype = eval( info['returns_ctypes'] )
		else:
			cfunc.restype = ctypes.c_void_p

	@staticmethod
	def _gen_prepare_args( m ):
		a = []; b = []
		for i,p in enumerate(m['parameters']):
			if 'name' in p: n = p['name']
			else: n = '_unnamed_%s' %i
			if '<' in n: n = '_TODOfixme_%s' %i
			if n in PYTHON_RESERVED_KEYWORDS: n += str(i)
			if p['fundamental']:
				b.append( n )
				s = p['raw_type'].split()
				if 'default' in p:
					d = p['default']
					if p['raw_type'] in ('float', 'double'):
						if d.endswith('f'): d = d[:-1]
						d = d.replace(' ', '.')
						if 'e' in d: d = 0.0
						try: d = float(d)
						except: d = 0.0
					elif ('int' in s or 'size_t' in s) and not d.isdigit(): d = 0
					elif 'char' in s and '"' not in d: d = '""'
					elif d.lower() == 'false': d = False
					elif d.lower() == 'true': d = True
				elif 'char' in s: d = '""'
				elif 'float' in s or 'double' in s: d = 0.0
				elif 'size_t' in s or 'int' in s or 'long' in s or 'short' in s: d = 0
				elif p['raw_type'] == 'bool': d = False
				elif p['raw_type'] in ('void', '(template)'): d = 'NULL'
				else: print( p )
				a.append( n+'=%s' %d )

			else:
				b.append( '%s._pointer_'%n )
				a.append( n+'=NULL' )
		return a, b

	@staticmethod
	def _gen_init( m ):
		a, b = meta._gen_prepare_args( m )
		if a: e = 'lambda _py_self_, %s, _explicit_pointer_=None: ' %(','.join(a))
		else: e = 'lambda _py_self_, _explicit_pointer_=None: '
		e += 'setattr(_py_self_, "_pointer_", _py_self_._%s(%s))' %( m['name'], ','.join(b) )
		e += ' if not _explicit_pointer_ else '
		e += 'setattr(_py_self_, "_pointer_", _explicit_pointer_)'
		print( e )
		lamb = eval( e ); lamb._debug = e; lamb._introspect = m
		return lamb

	@staticmethod
	def _find_best_function( funcs ):
		best = funcs[0]
		score = -1
		if len(funcs) > 1:
			for f in funcs:
				hits = 0
				for p in f['parameters']:
					if p['fundamental']: hits += 1
				if hits and hits == len( f['parameters'] ):
					if hits > score:
						score = hits
						best = f
		return best

	@staticmethod
	def _gen_method( m, f ):
		a, b = meta._gen_prepare_args( f )
		if a: e = 'lambda _py_self_, %s: ' %(','.join(a))
		else: e = 'lambda _py_self_: '

		if 'static' in m and m['static']:	# static in c++ is like a classmethod
			c = '_py_self_._%s( %s )' %( f['name'], ','.join(b) )
		else:
			c = '_py_self_._%s( _py_self_._pointer_, %s )' %( f['name'], ','.join(b) )

		if not m['returns_fundamental']:
			if 'returns_unknown' in m or '<' in m['returns']: c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,m['returns'])
			else:
				something = m['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)

		e += c; lamb = eval( e )
		lamb._debug = e; lamb._introspect = f
		return lamb


	META_FUNCTIONS = []
	@classmethod
	def function( self, info ):
		print('@meta.function', info['name'] )
		global CTYPES_DLL
		if not CTYPES_DLL:
			CTYPES_DLL = _load_ctypes_lib( _clib_name_ )

		cfunc = self._build_cfunc( info, method=False, static=True )
		setattr( meta, '_%s'%info['name'], cfunc )
		self._setup_return( cfunc, info )
		a, b = meta._gen_prepare_args( info )
		e = 'lambda %s: ' %(','.join(a))
		c = 'meta._%s( %s )' %( info['name'], ','.join(b) )

		if not info['returns_fundamental']:
			if 'returns_unknown' in info or '<' in info['returns']:
				c = '_VOID_POINTER_CONTAINER_( %s, name="%s" )' %(c,info['returns'])
			else:
				something = info['returns'].replace('::', '.')
				c = '%s( _explicit_pointer_=%s )' %(something, c)
		e += c
		lamb = eval( e )
		lamb._debug = e
		lamb._introspect = info
		return lamb



def _rpythonic_strip_prefixes_( prefixes ):
	G = globals()
	names = list(G.keys())	# ensure list in py3
	for name in names:
		for prefix in prefixes:
			if name.startswith( prefix ):
				newname = name[ len(prefix) : ]
				if newname and newname not in G:
					G[ newname ] = G[ name ]






_clib_name_ = 'libblender'
print('loading lib', _clib_name_)
print( os.path.abspath( os.path.curdir ) )
CTYPES_DLL = _load_ctypes_lib( _clib_name_ )
assert CTYPES_DLL
print( CTYPES_DLL._name )

## macro globals ##
## enums ##
FE_INVALID = 1 
_FE_DENORM = 2 
FE_DIVBYZERO = 4 
FE_OVERFLOW = 8 
FE_UNDERFLOW = 16 
FE_INEXACT = 32 

FE_TONEAREST = 0 
FE_DOWNWARD = 1024 
FE_UPWARD = 2048 
FE_TOWARDZERO = 3072 

SI_ASYNCNL = -60 
SI_TKILL = -6 
SI_SIGIO = -5 
SI_ASYNCIO = -4 
SI_MESGQ = -3 
SI_TIMER = -2 
SI_QUEUE = -1 
SI_USER = 0 
SI_KERNEL = 128 

FPE_INTDIV = 1 
FPE_INTOVF = 2 
FPE_FLTDIV = 3 
FPE_FLTOVF = 4 
FPE_FLTUND = 5 
FPE_FLTRES = 6 
FPE_FLTINV = 7 
FPE_FLTSUB = 8 

ILL_ILLOPC = 1 
ILL_ILLOPN = 2 
ILL_ILLADR = 3 
ILL_ILLTRP = 4 
ILL_PRVOPC = 5 
ILL_PRVREG = 6 
ILL_COPROC = 7 
ILL_BADSTK = 8 

SEGV_MAPERR = 1 
SEGV_ACCERR = 2 

BUS_ADRALN = 1 
BUS_ADRERR = 2 
BUS_OBJERR = 3 

TRAP_BRKPT = 1 
TRAP_TRACE = 2 

CLD_EXITED = 1 
CLD_KILLED = 2 
CLD_DUMPED = 3 
CLD_TRAPPED = 4 
CLD_STOPPED = 5 
CLD_CONTINUED = 6 

POLL_IN = 1 
POLL_OUT = 2 
POLL_MSG = 3 
POLL_ERR = 4 
POLL_PRI = 5 
POLL_HUP = 6 

SIGEV_SIGNAL = 0 
SIGEV_NONE = 1 
SIGEV_THREAD = 2 
SIGEV_THREAD_ID = 4 

SS_ONSTACK = 1 
SS_DISABLE = 2 

REG_GS = 0 
REG_FS = 1 
REG_ES = 2 
REG_DS = 3 
REG_EDI = 4 
REG_ESI = 5 
REG_EBP = 6 
REG_ESP = 7 
REG_EBX = 8 
REG_EDX = 9 
REG_ECX = 10 
REG_EAX = 11 
REG_TRAPNO = 12 
REG_ERR = 13 
REG_EIP = 14 
REG_CS = 15 
REG_EFL = 16 
REG_UESP = 17 
REG_SS = 18 

_codecvt_result = { 
	"__codecvt_ok" : 0, 
	"__codecvt_partial" : 1, 
	"__codecvt_error" : 2, 
	"__codecvt_noconv" : 3, 
}

_socket_type = { 
	"SOCK_STREAM" : 1, 
	"SOCK_DGRAM" : 2, 
	"SOCK_RAW" : 3, 
	"SOCK_RDM" : 4, 
	"SOCK_SEQPACKET" : 5, 
	"SOCK_DCCP" : 6, 
	"SOCK_PACKET" : 10, 
	"SOCK_CLOEXEC" : 2000000, 
	"SOCK_NONBLOCK" : 4000, 
}

MSG_OOB = 1 
MSG_PEEK = 2 
MSG_DONTROUTE = 4 
MSG_TRYHARD = 4 
MSG_CTRUNC = 8 
MSG_PROXY = 16 
MSG_TRUNC = 32 
MSG_DONTWAIT = 64 
MSG_EOR = 128 
MSG_WAITALL = 256 
MSG_FIN = 512 
MSG_SYN = 1024 
MSG_CONFIRM = 2048 
MSG_RST = 4096 
MSG_ERRQUEUE = 8192 
MSG_NOSIGNAL = 16384 
MSG_MORE = 32768 
MSG_WAITFORONE = 65536 
MSG_CMSG_CLOEXEC = 1073741824 

SCM_RIGHTS = 1 
SCM_CREDENTIALS = 2 

SHUT_RD = 0 
SHUT_WR = 1 
SHUT_RDWR = 2 

IPPROTO_IP = 0 
IPPROTO_HOPOPTS = 0 
IPPROTO_ICMP = 1 
IPPROTO_IGMP = 2 
IPPROTO_IPIP = 4 
IPPROTO_TCP = 6 
IPPROTO_EGP = 8 
IPPROTO_PUP = 12 
IPPROTO_UDP = 17 
IPPROTO_IDP = 22 
IPPROTO_TP = 29 
IPPROTO_DCCP = 33 
IPPROTO_IPV6 = 41 
IPPROTO_ROUTING = 43 
IPPROTO_FRAGMENT = 44 
IPPROTO_RSVP = 46 
IPPROTO_GRE = 47 
IPPROTO_ESP = 50 
IPPROTO_AH = 51 
IPPROTO_ICMPV6 = 58 
IPPROTO_NONE = 59 
IPPROTO_DSTOPTS = 60 
IPPROTO_MTP = 92 
IPPROTO_ENCAP = 98 
IPPROTO_PIM = 103 
IPPROTO_COMP = 108 
IPPROTO_SCTP = 132 
IPPROTO_UDPLITE = 136 
IPPROTO_RAW = 255 
IPPROTO_MAX = 256 

IPPORT_ECHO = 7 
IPPORT_DISCARD = 9 
IPPORT_SYSTAT = 11 
IPPORT_DAYTIME = 13 
IPPORT_NETSTAT = 15 
IPPORT_FTP = 21 
IPPORT_TELNET = 23 
IPPORT_SMTP = 25 
IPPORT_TIMESERVER = 37 
IPPORT_NAMESERVER = 42 
IPPORT_WHOIS = 43 
IPPORT_MTP = 57 
IPPORT_TFTP = 69 
IPPORT_RJE = 77 
IPPORT_FINGER = 79 
IPPORT_TTYLINK = 87 
IPPORT_SUPDUP = 95 
IPPORT_EXECSERVER = 512 
IPPORT_LOGINSERVER = 513 
IPPORT_CMDSERVER = 514 
IPPORT_EFSSERVER = 520 
IPPORT_BIFFUDP = 512 
IPPORT_WHOSERVER = 513 
IPPORT_ROUTESERVER = 520 
IPPORT_RESERVED = 1024 
IPPORT_USERRESERVED = 5000 

PTHREAD_CREATE_JOINABLE = 0 
PTHREAD_CREATE_DETACHED = 1 

PTHREAD_MUTEX_TIMED_NP = 0 
PTHREAD_MUTEX_RECURSIVE_NP = 1 
PTHREAD_MUTEX_ERRORCHECK_NP = 2 
PTHREAD_MUTEX_ADAPTIVE_NP = 3 
PTHREAD_MUTEX_NORMAL = 0 
PTHREAD_MUTEX_RECURSIVE = 1 
PTHREAD_MUTEX_ERRORCHECK = 2 
PTHREAD_MUTEX_DEFAULT = 0 
PTHREAD_MUTEX_FAST_NP = 0 

PTHREAD_MUTEX_STALLED = 0 
PTHREAD_MUTEX_STALLED_NP = 0 
PTHREAD_MUTEX_ROBUST = 1 
PTHREAD_MUTEX_ROBUST_NP = 1 

PTHREAD_PRIO_NONE = 0 
PTHREAD_PRIO_INHERIT = 1 
PTHREAD_PRIO_PROTECT = 2 

PTHREAD_RWLOCK_PREFER_READER_NP = 0 
PTHREAD_RWLOCK_PREFER_WRITER_NP = 1 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2 
PTHREAD_RWLOCK_DEFAULT_NP = 0 

PTHREAD_INHERIT_SCHED = 0 
PTHREAD_EXPLICIT_SCHED = 1 

PTHREAD_SCOPE_SYSTEM = 0 
PTHREAD_SCOPE_PROCESS = 1 

PTHREAD_PROCESS_PRIVATE = 0 
PTHREAD_PROCESS_SHARED = 1 

PTHREAD_CANCEL_ENABLE = 0 
PTHREAD_CANCEL_DISABLE = 1 

PTHREAD_CANCEL_DEFERRED = 0 
PTHREAD_CANCEL_ASYNCHRONOUS = 1 

FP_NAN = 0 
FP_INFINITE = 1 
FP_ZERO = 2 
FP_SUBNORMAL = 3 
FP_NORMAL = 4 

IEEE_ = -1 
SVID_ = 0 
XOPEN_ = 1 
POSIX_ = 2 
ISOC_ = 3 

eEulerRotationOrders = { 
	"EULER_ORDER_DEFAULT" : 1, 
	"EULER_ORDER_XYZ" : 1, 
	"EULER_ORDER_XZY" : 2, 
	"EULER_ORDER_YXZ" : 3, 
	"EULER_ORDER_YZX" : 4, 
	"EULER_ORDER_ZXY" : 5, 
	"EULER_ORDER_ZYX" : 6, 
}

eIconSizes = { 
	"ICON_SIZE_ICON" : 0, 
	"ICON_SIZE_PREVIEW" : 1, 
}

PAINT_SHOW_BRUSH = 1 
PAINT_FAST_NAVIGATE = 2 
PAINT_SHOW_BRUSH_ON_SURFACE = 4 

SculptFlags = { 
	"SCULPT_SYMM_X" : 1, 
	"SCULPT_SYMM_Y" : 2, 
	"SCULPT_SYMM_Z" : 4, 
	"SCULPT_LOCK_X" : 8, 
	"SCULPT_LOCK_Y" : 16, 
	"SCULPT_LOCK_Z" : 32, 
	"SCULPT_SYMMETRY_FEATHER" : 64, 
	"SCULPT_USE_OPENMP" : 128, 
	"SCULPT_ONLY_DEFORM" : 256, 
}

PropertyType = { 
	"PROP_BOOLEAN" : 0, 
	"PROP_INT" : 1, 
	"PROP_FLOAT" : 2, 
	"PROP_STRING" : 3, 
	"PROP_ENUM" : 4, 
	"PROP_POINTER" : 5, 
	"PROP_COLLECTION" : 6, 
}

PropertyUnit = { 
	"PROP_UNIT_NONE" : 0, 
	"PROP_UNIT_LENGTH" : 4194304, 
	"PROP_UNIT_AREA" : 8388608, 
	"PROP_UNIT_VOLUME" : 12582912, 
	"PROP_UNIT_MASS" : 16777216, 
	"PROP_UNIT_ROTATION" : 20971520, 
	"PROP_UNIT_TIME" : 25165824, 
	"PROP_UNIT_VELOCITY" : 29360128, 
	"PROP_UNIT_ACCELERATION" : 33554432, 
}

PropertySubType = { 
	"PROP_NONE" : 0, 
	"PROP_FILEPATH" : 1, 
	"PROP_DIRPATH" : 2, 
	"PROP_FILENAME" : 3, 
	"PROP_BYTESTRING" : 4, 
	"PROP_TRANSLATE" : 5, 
	"PROP_UNSIGNED" : 13, 
	"PROP_PERCENTAGE" : 14, 
	"PROP_FACTOR" : 15, 
	"PROP_ANGLE" : 20971542, 
	"PROP_TIME" : 25165847, 
	"PROP_DISTANCE" : 4194328, 
	"PROP_COLOR" : 20, 
	"PROP_TRANSLATION" : 4194337, 
	"PROP_DIRECTION" : 22, 
	"PROP_VELOCITY" : 29360163, 
	"PROP_ACCELERATION" : 33554468, 
	"PROP_MATRIX" : 25, 
	"PROP_EULER" : 20971558, 
	"PROP_QUATERNION" : 27, 
	"PROP_AXISANGLE" : 28, 
	"PROP_XYZ" : 29, 
	"PROP_XYZ_LENGTH" : 4194345, 
	"PROP_COLOR_GAMMA" : 30, 
	"PROP_COORDS" : 31, 
	"PROP_LAYER" : 40, 
	"PROP_LAYER_MEMBER" : 41, 
}

PropertyFlag = { 
	"PROP_EDITABLE" : 1, 
	"PROP_LIB_EXCEPTION" : 4194304, 
	"PROP_ANIMATABLE" : 2, 
	"PROP_ICONS_CONSECUTIVE" : 262144, 
	"PROP_HIDDEN" : 33554432, 
	"PROP_SKIP_SAVE" : 1099511627776, 
	"PROP_REQUIRED" : 4, 
	"PROP_OUTPUT" : 8, 
	"PROP_RNAPTR" : 131072, 
	"PROP_REGISTER" : 16, 
	"PROP_REGISTER_OPTIONAL" : 48, 
	"PROP_ID_REFCOUNT" : 64, 
	"PROP_ID_SELF_CHECK" : 4294967296, 
	"PROP_NEVER_NULL" : 16777216, 
	"PROP_NEVER_UNLINK" : 137438953472, 
	"PROP_ENUM_FLAG" : 8589934592, 
	"PROP_CONTEXT_UPDATE" : 17179869184, 
	"PROP_CONTEXT_PROPERTY_UPDATE" : 566935683072, 
	"PROP_THICK_WRAP" : 34359738368, 
	"PROP_NEVER_CLAMP" : 274877906944, 
	"PROP_BUILTIN" : 128, 
	"PROP_EXPORT" : 256, 
	"PROP_RUNTIME" : 512, 
	"PROP_IDPROPERTY" : 65536, 
	"PROP_RAW_ACCESS" : 524288, 
	"PROP_RAW_ARRAY" : 1048576, 
	"PROP_FREE_POINTERS" : 2097152, 
	"PROP_DYNAMIC" : 8388608, 
	"PROP_ENUM_NO_CONTEXT" : 68719476736, 
}

RawPropertyType = { 
	"PROP_RAW_UNSET" : -1, 
	"PROP_RAW_INT" : 0, 
	"PROP_RAW_SHORT" : 1, 
	"PROP_RAW_CHAR" : 2, 
	"PROP_RAW_DOUBLE" : 3, 
	"PROP_RAW_FLOAT" : 4, 
}

FunctionFlag = { 
	"FUNC_NO_SELF" : 1, 
	"FUNC_USE_MAIN" : 2, 
	"FUNC_USE_CONTEXT" : 4, 
	"FUNC_USE_REPORTS" : 8, 
	"FUNC_USE_SELF_ID" : 2048, 
	"FUNC_REGISTER" : 16, 
	"FUNC_REGISTER_OPTIONAL" : 54, 
	"FUNC_BUILTIN" : 128, 
	"FUNC_EXPORT" : 256, 
	"FUNC_RUNTIME" : 512, 
	"FUNC_FREE_POINTERS" : 1024, 
}

StructFlag = { 
	"STRUCT_ID" : 1, 
	"STRUCT_ID_REFCOUNT" : 2, 
	"STRUCT_UNDO" : 4, 
	"STRUCT_RUNTIME" : 8, 
	"STRUCT_GENERATED" : 16, 
	"STRUCT_FREE_POINTERS" : 32, 
	"STRUCT_NO_IDPROPERTIES" : 64, 
}

CTX_MODE_EDIT_MESH = 0 
CTX_MODE_EDIT_CURVE = 1 
CTX_MODE_EDIT_SURFACE = 2 
CTX_MODE_EDIT_TEXT = 3 
CTX_MODE_EDIT_ARMATURE = 4 
CTX_MODE_EDIT_METABALL = 5 
CTX_MODE_EDIT_LATTICE = 6 
CTX_MODE_POSE = 7 
CTX_MODE_SCULPT = 8 
CTX_MODE_PAINT_WEIGHT = 9 
CTX_MODE_PAINT_VERTEX = 10 
CTX_MODE_PAINT_TEXTURE = 11 
CTX_MODE_PARTICLE = 12 
CTX_MODE_OBJECT = 13 

CTX_DATA_TYPE_POINTER = 0 
CTX_DATA_TYPE_COLLECTION = 1 

ReportType = { 
	"RPT_DEBUG" : 1, 
	"RPT_INFO" : 2, 
	"RPT_OPERATOR" : 4, 
	"RPT_WARNING" : 8, 
	"RPT_ERROR" : 16, 
	"RPT_ERROR_INVALID_INPUT" : 32, 
	"RPT_ERROR_INVALID_CONTEXT" : 64, 
	"RPT_ERROR_OUT_OF_MEMORY" : 128, 
}

ReportListFlags = { 
	"RPT_PRINT" : 1, 
	"RPT_STORE" : 2, 
	"RPT_FREE" : 4, 
	"RPT_OP_HOLD" : 8, 
}

DerivedMeshType = { 
	"DM_TYPE_CDDM" : 0, 
	"DM_TYPE_EDITMESH" : 1, 
	"DM_TYPE_CCGDM" : 2, 
}

COLLISION_IN_FUTURE = 2 

CLOTH_SIMSETTINGS_FLAG_COLLOBJ = 4 
CLOTH_SIMSETTINGS_FLAG_GOAL = 8 
CLOTH_SIMSETTINGS_FLAG_TEARING = 16 
CLOTH_SIMSETTINGS_FLAG_SCALING = 256 
CLOTH_SIMSETTINGS_FLAG_CCACHE_EDIT = 262144 
CLOTH_SIMSETTINGS_FLAG_NO_SPRING_COMPRESS = 524288 

CLOTH_SPRING_TYPE_STRUCTURAL = 2 
CLOTH_SPRING_TYPE_SHEAR = 4 
CLOTH_SPRING_TYPE_BENDING = 8 
CLOTH_SPRING_TYPE_GOAL = 16 

CLOTH_COLLSETTINGS_FLAG_ENABLED = 2 
CLOTH_COLLSETTINGS_FLAG_SELF = 4 

CLOTH_SPRING_FLAG_DEACTIVATE = 2 
CLOTH_SPRING_FLAG_NEEDED = 4 

CM_IMPLICIT = 0 

IMB_BlendMode = { 
	"IMB_BLEND_MIX" : 0, 
	"IMB_BLEND_ADD" : 1, 
	"IMB_BLEND_SUB" : 2, 
	"IMB_BLEND_MUL" : 3, 
	"IMB_BLEND_LIGHTEN" : 4, 
	"IMB_BLEND_DARKEN" : 5, 
	"IMB_BLEND_ERASE_ALPHA" : 6, 
	"IMB_BLEND_ADD_ALPHA" : 7, 
	"IMB_BLEND_COPY" : 1000, 
	"IMB_BLEND_COPY_RGB" : 1001, 
	"IMB_BLEND_COPY_ALPHA" : 1002, 
}

IMB_Timecode_Type = { 
	"IMB_TC_NONE" : 0, 
	"IMB_TC_RECORD_RUN" : 1, 
	"IMB_TC_FREE_RUN" : 2, 
	"IMB_TC_INTERPOLATED_REC_DATE_FREE_RUN" : 4, 
	"IMB_TC_RECORD_RUN_NO_GAPS" : 8, 
	"IMB_TC_MAX_SLOT" : 8, 
}

IMB_Proxy_Size = { 
	"IMB_PROXY_NONE" : 0, 
	"IMB_PROXY_25" : 1, 
	"IMB_PROXY_50" : 2, 
	"IMB_PROXY_75" : 4, 
	"IMB_PROXY_100" : 8, 
	"IMB_PROXY_MAX_SLOT" : 4, 
}

eModifyKey_Modes = { 
	"MODIFYKEY_MODE_INSERT" : 0, 
	"MODIFYKEY_MODE_DELETE" : 1, 
}

eModifyKey_Returns = { 
	"MODIFYKEY_INVALID_CONTEXT" : -1, 
	"MODIFYKEY_MISSING_TYPEINFO" : -2, 
}

eCreateDriverFlags = { 
	"CREATEDRIVER_WITH_DEFAULT_DVAR" : 1, 
}

eAnimFilterFlags = { 
	"ANIMFILTER_KEYS_LOCAL" : 1, 
	"ANIMFILTER_KEYS_MUTED" : 2, 
	"ANIMFILTER_KEYS_ACTIVE" : 4, 
	"ANIMFILTER_KEYS_NOMAT" : 512, 
	"ANIMFILTER_KEYS_NOSKEY" : 65536, 
}

RGN_TYPE_WINDOW = 0 
RGN_TYPE_HEADER = 1 
RGN_TYPE_CHANNELS = 2 
RGN_TYPE_TEMPORARY = 3 
RGN_TYPE_UI = 4 
RGN_TYPE_TOOLS = 5 
RGN_TYPE_TOOL_PROPS = 6 
RGN_TYPE_PREVIEW = 7 

CurveMappingPreset = { 
	"CURVE_PRESET_LINE" : 0, 
	"CURVE_PRESET_SHARP" : 1, 
	"CURVE_PRESET_SMOOTH" : 2, 
	"CURVE_PRESET_MAX" : 3, 
	"CURVE_PRESET_MID9" : 4, 
	"CURVE_PRESET_ROUND" : 5, 
	"CURVE_PRESET_ROOT" : 6, 
}

CAMERA_UNITS_PX = 0 
CAMERA_UNITS_MM = 1 

INFO_RPT_DEBUG = 1 
INFO_RPT_INFO = 2 
INFO_RPT_OP = 4 
INFO_RPT_WARN = 8 
INFO_RPT_ERR = 16 

CONSOLE_LINE_OUTPUT = 0 
CONSOLE_LINE_INPUT = 1 
CONSOLE_LINE_INFO = 2 
CONSOLE_LINE_ERROR = 3 

FileDisplayTypeE = { 
	"FILE_SHORTDISPLAY" : 1, 
	"FILE_LONGDISPLAY" : 2, 
	"FILE_IMGDISPLAY" : 3, 
}

FileSortTypeE = { 
	"FILE_SORT_NONE" : 0, 
	"FILE_SORT_ALPHA" : 1, 
	"FILE_SORT_EXTENSION" : 2, 
	"FILE_SORT_TIME" : 3, 
	"FILE_SORT_SIZE" : 4, 
}

SIPO_MODE_ANIMATION = 0 
SIPO_MODE_DRIVERS = 1 

SPACE_EMPTY = 0 
SPACE_VIEW3D = 1 
SPACE_IPO = 2 
SPACE_OUTLINER = 3 
SPACE_BUTS = 4 
SPACE_FILE = 5 
SPACE_IMAGE = 6 
SPACE_INFO = 7 
SPACE_SEQ = 8 
SPACE_TEXT = 9 
SPACE_IMASEL = 10 
SPACE_SOUND = 11 
SPACE_ACTION = 12 
SPACE_NLA = 13 
SPACE_SCRIPT = 14 
SPACE_TIME = 15 
SPACE_NODE = 16 
SPACE_LOGIC = 17 
SPACE_CONSOLE = 18 
SPACE_USERPREF = 19 
SPACE_CLIP = 20 
SPACEICONMAX = 20 

CURSOR_FACESEL = 1000 
CURSOR_WAIT = 1001 
CURSOR_EDIT = 1002 
CURSOR_X_MOVE = 1003 
CURSOR_Y_MOVE = 1004 
CURSOR_HELP = 1005 
CURSOR_STD = 1006 
CURSOR_NONE = 1007 
CURSOR_PENCIL = 1008 
CURSOR_COPY = 1009 

BC_NW_ARROWCURSOR = 2 
BC_NS_ARROWCURSOR = 3 
BC_EW_ARROWCURSOR = 4 
BC_WAITCURSOR = 5 
BC_CROSSCURSOR = 6 
BC_EDITCROSSCURSOR = 7 
BC_BOXSELCURSOR = 8 
BC_KNIFECURSOR = 9 
BC_VLOOPCURSOR = 10 
BC_TEXTEDITCURSOR = 11 
BC_PAINTBRUSHCURSOR = 12 
BC_HANDCURSOR = 13 
BC_NSEW_SCROLLCURSOR = 14 
BC_NS_SCROLLCURSOR = 15 
BC_EW_SCROLLCURSOR = 16 
BC_EYEDROPPER_CURSOR = 17 
BC_SWAPAREA_CURSOR = 18 
BC_NUMCURSORS = 19 

BC_BLACK = 0 
BC_WHITE = 1 
BC_RED = 2 
BC_BLUE = 3 
BC_GREEN = 4 
BC_YELLOW = 5 

NDOF_BUTTON_NONE = 400 
NDOF_BUTTON_MENU = 401 
NDOF_BUTTON_FIT = 402 
NDOF_BUTTON_TOP = 403 
NDOF_BUTTON_BOTTOM = 404 
NDOF_BUTTON_LEFT = 405 
NDOF_BUTTON_RIGHT = 406 
NDOF_BUTTON_FRONT = 407 
NDOF_BUTTON_BACK = 408 
NDOF_BUTTON_ISO1 = 409 
NDOF_BUTTON_ISO2 = 410 
NDOF_BUTTON_ROLL_CW = 411 
NDOF_BUTTON_ROLL_CCW = 412 
NDOF_BUTTON_SPIN_CW = 413 
NDOF_BUTTON_SPIN_CCW = 414 
NDOF_BUTTON_TILT_CW = 415 
NDOF_BUTTON_TILT_CCW = 416 
NDOF_BUTTON_ROTATE = 417 
NDOF_BUTTON_PANZOOM = 418 
NDOF_BUTTON_DOMINANT = 419 
NDOF_BUTTON_PLUS = 420 
NDOF_BUTTON_MINUS = 421 
NDOF_BUTTON_1 = 422 
NDOF_BUTTON_2 = 423 
NDOF_BUTTON_3 = 424 
NDOF_BUTTON_4 = 425 
NDOF_BUTTON_5 = 426 
NDOF_BUTTON_6 = 427 
NDOF_BUTTON_7 = 428 
NDOF_BUTTON_8 = 429 
NDOF_BUTTON_9 = 430 
NDOF_BUTTON_10 = 431 
NDOF_LAST = 432 

WM_OP_INVOKE_DEFAULT = 0 
WM_OP_INVOKE_REGION_WIN = 1 
WM_OP_INVOKE_REGION_CHANNELS = 2 
WM_OP_INVOKE_REGION_PREVIEW = 3 
WM_OP_INVOKE_AREA = 4 
WM_OP_INVOKE_SCREEN = 5 
WM_OP_EXEC_DEFAULT = 6 
WM_OP_EXEC_REGION_WIN = 7 
WM_OP_EXEC_REGION_CHANNELS = 8 
WM_OP_EXEC_REGION_PREVIEW = 9 
WM_OP_EXEC_AREA = 10 
WM_OP_EXEC_SCREEN = 11 

P_NOT_STARTED = 0 
P_STARTING = 1 
P_IN_PROGRESS = 2 
P_FINISHING = 3 
P_FINISHED = 4 

WM_LOG_DEBUG = 0 
WM_LOG_INFO = 1000 
WM_LOG_WARNING = 2000 
WM_ERROR_UNDEFINED = 3000 
WM_ERROR_INVALID_INPUT = 3001 
WM_ERROR_INVALID_CONTEXT = 3002 
WM_ERROR_OUT_OF_MEMORY = 3003 

WM_HANDLER_DEFAULT = 0 
WM_HANDLER_FILESELECT = 1 

GPUDeviceType = { 
	"GPU_DEVICE_NVIDIA" : 1, 
	"GPU_DEVICE_ATI" : 2, 
	"GPU_DEVICE_INTEL" : 4, 
	"GPU_DEVICE_SOFTWARE" : 8, 
	"GPU_DEVICE_UNKNOWN" : 16, 
	"GPU_DEVICE_ANY" : 255, 
}

GPUOSType = { 
	"GPU_OS_WIN" : 256, 
	"GPU_OS_MAC" : 512, 
	"GPU_OS_UNIX" : 65536, 
	"GPU_OS_ANY" : 65280, 
}

GPUDriverType = { 
	"GPU_DRIVER_OFFICIAL" : 4194304, 
	"GPU_DRIVER_OPENSOURCE" : 8388608, 
	"GPU_DRIVER_SOFTWARE" : 16777216, 
	"GPU_DRIVER_ANY" : 16711680, 
}

BlenFileType = { 
	"BLENFILETYPE_BLEND" : 1, 
	"BLENFILETYPE_PUB" : 2, 
	"BLENFILETYPE_RUNTIME" : 3, 
}

BIK_ParamType = { 
	"BIK_PARAM_TYPE_FLOAT" : 0, 
	"BIK_PARAM_TYPE_INT" : 1, 
	"BIK_PARAM_TYPE_STRING" : 2, 
}

GHOST_kFailure = 0 
GHOST_kSuccess = 1 

GHOST_kTabletModeNone = 0 
GHOST_kTabletModeStylus = 1 
GHOST_kTabletModeEraser = 2 

GHOST_kNotVisible = 0 
GHOST_kPartiallyVisible = 1 
GHOST_kFullyVisible = 2 

GHOST_kFireTimeNever = 4294967295 

GHOST_kModifierKeyLeftShift = 0 
GHOST_kModifierKeyRightShift = 1 
GHOST_kModifierKeyLeftAlt = 2 
GHOST_kModifierKeyRightAlt = 3 
GHOST_kModifierKeyLeftControl = 4 
GHOST_kModifierKeyRightControl = 5 
GHOST_kModifierKeyOS = 6 
GHOST_kModifierKeyNumMasks = 7 

GHOST_kWindowStateNormal = 0 
GHOST_kWindowStateMaximized = 1 
GHOST_kWindowStateMinimized = 2 
GHOST_kWindowStateFullScreen = 3 
GHOST_kWindowStateEmbedded = 4 
GHOST_kWindowState8Normal = 8 
GHOST_kWindowState8Maximized = 9 
GHOST_kWindowState8Minimized = 10 
GHOST_kWindowState8FullScreen = 11 
GHOST_kWindowStateModified = 12 
GHOST_kWindowStateUnModified = 13 

GHOST_kExitCancel = 0 
GHOST_kExitNow = 1 

GHOST_kWindowOrderTop = 0 
GHOST_kWindowOrderBottom = 1 

GHOST_kDrawingContextTypeNone = 0 
GHOST_kDrawingContextTypeOpenGL = 1 

GHOST_kButtonMaskLeft = 0 
GHOST_kButtonMaskMiddle = 1 
GHOST_kButtonMaskRight = 2 
GHOST_kButtonMaskButton4 = 3 
GHOST_kButtonMaskButton5 = 4 
GHOST_kButtonNumMasks = 5 

GHOST_kEventUnknown = 0 
GHOST_kEventCursorMove = 1 
GHOST_kEventButtonDown = 2 
GHOST_kEventButtonUp = 3 
GHOST_kEventWheel = 4 
GHOST_kEventTrackpad = 5 
GHOST_kEventNDOFMotion = 6 
GHOST_kEventNDOFButton = 7 
GHOST_kEventKeyDown = 8 
GHOST_kEventKeyUp = 9 
GHOST_kEventQuit = 10 
GHOST_kEventWindowClose = 11 
GHOST_kEventWindowActivate = 12 
GHOST_kEventWindowDeactivate = 13 
GHOST_kEventWindowUpdate = 14 
GHOST_kEventWindowSize = 15 
GHOST_kEventWindowMove = 16 
GHOST_kEventDraggingEntered = 17 
GHOST_kEventDraggingUpdated = 18 
GHOST_kEventDraggingExited = 19 
GHOST_kEventDraggingDropDone = 20 
GHOST_kEventOpenMainFile = 21 
GHOST_kEventTimer = 22 
GHOST_kNumEventTypes = 23 

GHOST_kStandardCursorFirstCursor = 0 
GHOST_kStandardCursorDefault = 0 
GHOST_kStandardCursorRightArrow = 1 
GHOST_kStandardCursorLeftArrow = 2 
GHOST_kStandardCursorInfo = 3 
GHOST_kStandardCursorDestroy = 4 
GHOST_kStandardCursorHelp = 5 
GHOST_kStandardCursorCycle = 6 
GHOST_kStandardCursorSpray = 7 
GHOST_kStandardCursorWait = 8 
GHOST_kStandardCursorText = 9 
GHOST_kStandardCursorCrosshair = 10 
GHOST_kStandardCursorUpDown = 11 
GHOST_kStandardCursorLeftRight = 12 
GHOST_kStandardCursorTopSide = 13 
GHOST_kStandardCursorBottomSide = 14 
GHOST_kStandardCursorLeftSide = 15 
GHOST_kStandardCursorRightSide = 16 
GHOST_kStandardCursorTopLeftCorner = 17 
GHOST_kStandardCursorTopRightCorner = 18 
GHOST_kStandardCursorBottomRightCorner = 19 
GHOST_kStandardCursorBottomLeftCorner = 20 
GHOST_kStandardCursorCopy = 21 
GHOST_kStandardCursorCustom = 22 
GHOST_kStandardCursorPencil = 23 
GHOST_kStandardCursorNumCursors = 24 

GHOST_kKeyUnknown = -1 
GHOST_kKeyBackSpace = 0 
GHOST_kKeyTab = 1 
GHOST_kKeyLinefeed = 2 
GHOST_kKeyClear = 3 
GHOST_kKeyEnter = 13 
GHOST_kKeyEsc = 27 
GHOST_kKeySpace = " " 
GHOST_kKeyQuote = 39 
GHOST_kKeyComma = "," 
GHOST_kKeyMinus = "-" 
GHOST_kKeyPeriod = "." 
GHOST_kKeySlash = "/" 
GHOST_kKey0 = "0" 
GHOST_kKey1 = "0" 
GHOST_kKey2 = "0" 
GHOST_kKey3 = "0" 
GHOST_kKey4 = "0" 
GHOST_kKey5 = "0" 
GHOST_kKey6 = "0" 
GHOST_kKey7 = "0" 
GHOST_kKey8 = "0" 
GHOST_kKey9 = "0" 
GHOST_kKeySemicolon = ";" 
GHOST_kKeyEqual = "=" 
GHOST_kKeyA = "A" 
GHOST_kKeyB = "A" 
GHOST_kKeyC = "A" 
GHOST_kKeyD = "A" 
GHOST_kKeyE = "A" 
GHOST_kKeyF = "A" 
GHOST_kKeyG = "A" 
GHOST_kKeyH = "A" 
GHOST_kKeyI = "A" 
GHOST_kKeyJ = "A" 
GHOST_kKeyK = "A" 
GHOST_kKeyL = "A" 
GHOST_kKeyM = "A" 
GHOST_kKeyN = "A" 
GHOST_kKeyO = "A" 
GHOST_kKeyP = "A" 
GHOST_kKeyQ = "A" 
GHOST_kKeyR = "A" 
GHOST_kKeyS = "A" 
GHOST_kKeyT = "A" 
GHOST_kKeyU = "A" 
GHOST_kKeyV = "A" 
GHOST_kKeyW = "A" 
GHOST_kKeyX = "A" 
GHOST_kKeyY = "A" 
GHOST_kKeyZ = "A" 
GHOST_kKeyLeftBracket = "[" 
GHOST_kKeyRightBracket = "]" 
GHOST_kKeyBackslash = 92 
GHOST_kKeyAccentGrave = "`" 
GHOST_kKeyLeftShift = 256 
GHOST_kKeyRightShift = 257 
GHOST_kKeyLeftControl = 258 
GHOST_kKeyRightControl = 259 
GHOST_kKeyLeftAlt = 260 
GHOST_kKeyRightAlt = 261 
GHOST_kKeyOS = 262 
GHOST_kKeyGrLess = 263 
GHOST_kKeyCapsLock = 264 
GHOST_kKeyNumLock = 265 
GHOST_kKeyScrollLock = 266 
GHOST_kKeyLeftArrow = 267 
GHOST_kKeyRightArrow = 268 
GHOST_kKeyUpArrow = 269 
GHOST_kKeyDownArrow = 270 
GHOST_kKeyPrintScreen = 271 
GHOST_kKeyPause = 272 
GHOST_kKeyInsert = 273 
GHOST_kKeyDelete = 274 
GHOST_kKeyHome = 275 
GHOST_kKeyEnd = 276 
GHOST_kKeyUpPage = 277 
GHOST_kKeyDownPage = 278 
GHOST_kKeyNumpad0 = 279 
GHOST_kKeyNumpad1 = 280 
GHOST_kKeyNumpad2 = 281 
GHOST_kKeyNumpad3 = 282 
GHOST_kKeyNumpad4 = 283 
GHOST_kKeyNumpad5 = 284 
GHOST_kKeyNumpad6 = 285 
GHOST_kKeyNumpad7 = 286 
GHOST_kKeyNumpad8 = 287 
GHOST_kKeyNumpad9 = 288 
GHOST_kKeyNumpadPeriod = 289 
GHOST_kKeyNumpadEnter = 290 
GHOST_kKeyNumpadPlus = 291 
GHOST_kKeyNumpadMinus = 292 
GHOST_kKeyNumpadAsterisk = 293 
GHOST_kKeyNumpadSlash = 294 
GHOST_kKeyF1 = 295 
GHOST_kKeyF2 = 296 
GHOST_kKeyF3 = 297 
GHOST_kKeyF4 = 298 
GHOST_kKeyF5 = 299 
GHOST_kKeyF6 = 300 
GHOST_kKeyF7 = 301 
GHOST_kKeyF8 = 302 
GHOST_kKeyF9 = 303 
GHOST_kKeyF10 = 304 
GHOST_kKeyF11 = 305 
GHOST_kKeyF12 = 306 
GHOST_kKeyF13 = 307 
GHOST_kKeyF14 = 308 
GHOST_kKeyF15 = 309 
GHOST_kKeyF16 = 310 
GHOST_kKeyF17 = 311 
GHOST_kKeyF18 = 312 
GHOST_kKeyF19 = 313 
GHOST_kKeyF20 = 314 
GHOST_kKeyF21 = 315 
GHOST_kKeyF22 = 316 
GHOST_kKeyF23 = 317 
GHOST_kKeyF24 = 318 
GHOST_kKeyMediaPlay = 319 
GHOST_kKeyMediaStop = 320 
GHOST_kKeyMediaFirst = 321 
GHOST_kKeyMediaLast = 322 

GHOST_kGrabDisable = 0 
GHOST_kGrabNormal = 1 
GHOST_kGrabWrap = 2 
GHOST_kGrabHide = 3 

GHOST_kTrackpadEventUnknown = 0 
GHOST_kTrackpadEventScroll = 1 
GHOST_kTrackpadEventRotate = 2 
GHOST_kTrackpadEventSwipe = 3 
GHOST_kTrackpadEventMagnify = 4 

GHOST_kDragnDropTypeUnknown = 0 
GHOST_kDragnDropTypeFilenames = 1 
GHOST_kDragnDropTypeString = 2 
GHOST_kDragnDropTypeBitmap = 3 

GHOST_kNotStarted = 0 
GHOST_kStarting = 1 
GHOST_kInProgress = 2 
GHOST_kFinishing = 3 
GHOST_kFinished = 4 

GHOST_kPress = 0 
GHOST_kRelease = 1 

UI_BLOCK_BOUNDS = 1 
UI_BLOCK_BOUNDS_TEXT = 2 
UI_BLOCK_BOUNDS_POPUP_MOUSE = 3 
UI_BLOCK_BOUNDS_POPUP_MENU = 4 
UI_BLOCK_BOUNDS_POPUP_CENTER = 5 

UI_CNR_TOP_LEFT = 1 
UI_CNR_TOP_RIGHT = 2 
UI_CNR_BOTTOM_RIGHT = 4 
UI_CNR_BOTTOM_LEFT = 8 
UI_CNR_NONE = 0 
UI_CNR_ALL = 15 

## simple enums ##
RPYTHONIC_GLOBAL_ENUMS = { 
 "FE_INVALID" : 1,  "_FE_DENORM" : 2,  "FE_DIVBYZERO" : 4,  "FE_OVERFLOW" : 8,  "FE_UNDERFLOW" : 16,  "FE_INEXACT" : 32, 
 "FE_TONEAREST" : 0,  "FE_DOWNWARD" : 1024,  "FE_UPWARD" : 2048,  "FE_TOWARDZERO" : 3072, 
 "SI_ASYNCNL" : -60,  "SI_TKILL" : -6,  "SI_SIGIO" : -5,  "SI_ASYNCIO" : -4,  "SI_MESGQ" : -3,  "SI_TIMER" : -2,  "SI_QUEUE" : -1,  "SI_USER" : 0,  "SI_KERNEL" : 128, 
 "FPE_INTDIV" : 1,  "FPE_INTOVF" : 2,  "FPE_FLTDIV" : 3,  "FPE_FLTOVF" : 4,  "FPE_FLTUND" : 5,  "FPE_FLTRES" : 6,  "FPE_FLTINV" : 7,  "FPE_FLTSUB" : 8, 
 "ILL_ILLOPC" : 1,  "ILL_ILLOPN" : 2,  "ILL_ILLADR" : 3,  "ILL_ILLTRP" : 4,  "ILL_PRVOPC" : 5,  "ILL_PRVREG" : 6,  "ILL_COPROC" : 7,  "ILL_BADSTK" : 8, 
 "SEGV_MAPERR" : 1,  "SEGV_ACCERR" : 2, 
 "BUS_ADRALN" : 1,  "BUS_ADRERR" : 2,  "BUS_OBJERR" : 3, 
 "TRAP_BRKPT" : 1,  "TRAP_TRACE" : 2, 
 "CLD_EXITED" : 1,  "CLD_KILLED" : 2,  "CLD_DUMPED" : 3,  "CLD_TRAPPED" : 4,  "CLD_STOPPED" : 5,  "CLD_CONTINUED" : 6, 
 "POLL_IN" : 1,  "POLL_OUT" : 2,  "POLL_MSG" : 3,  "POLL_ERR" : 4,  "POLL_PRI" : 5,  "POLL_HUP" : 6, 
 "SIGEV_SIGNAL" : 0,  "SIGEV_NONE" : 1,  "SIGEV_THREAD" : 2,  "SIGEV_THREAD_ID" : 4, 
 "SS_ONSTACK" : 1,  "SS_DISABLE" : 2, 
 "REG_GS" : 0,  "REG_FS" : 1,  "REG_ES" : 2,  "REG_DS" : 3,  "REG_EDI" : 4,  "REG_ESI" : 5,  "REG_EBP" : 6,  "REG_ESP" : 7,  "REG_EBX" : 8,  "REG_EDX" : 9,  "REG_ECX" : 10,  "REG_EAX" : 11,  "REG_TRAPNO" : 12,  "REG_ERR" : 13,  "REG_EIP" : 14,  "REG_CS" : 15,  "REG_EFL" : 16,  "REG_UESP" : 17,  "REG_SS" : 18, 
 "MSG_OOB" : 1,  "MSG_PEEK" : 2,  "MSG_DONTROUTE" : 4,  "MSG_TRYHARD" : 4,  "MSG_CTRUNC" : 8,  "MSG_PROXY" : 16,  "MSG_TRUNC" : 32,  "MSG_DONTWAIT" : 64,  "MSG_EOR" : 128,  "MSG_WAITALL" : 256,  "MSG_FIN" : 512,  "MSG_SYN" : 1024,  "MSG_CONFIRM" : 2048,  "MSG_RST" : 4096,  "MSG_ERRQUEUE" : 8192,  "MSG_NOSIGNAL" : 16384,  "MSG_MORE" : 32768,  "MSG_WAITFORONE" : 65536,  "MSG_CMSG_CLOEXEC" : 1073741824, 
 "SCM_RIGHTS" : 1,  "SCM_CREDENTIALS" : 2, 
 "SHUT_RD" : 0,  "SHUT_WR" : 1,  "SHUT_RDWR" : 2, 
 "IPPROTO_IP" : 0,  "IPPROTO_HOPOPTS" : 0,  "IPPROTO_ICMP" : 1,  "IPPROTO_IGMP" : 2,  "IPPROTO_IPIP" : 4,  "IPPROTO_TCP" : 6,  "IPPROTO_EGP" : 8,  "IPPROTO_PUP" : 12,  "IPPROTO_UDP" : 17,  "IPPROTO_IDP" : 22,  "IPPROTO_TP" : 29,  "IPPROTO_DCCP" : 33,  "IPPROTO_IPV6" : 41,  "IPPROTO_ROUTING" : 43,  "IPPROTO_FRAGMENT" : 44,  "IPPROTO_RSVP" : 46,  "IPPROTO_GRE" : 47,  "IPPROTO_ESP" : 50,  "IPPROTO_AH" : 51,  "IPPROTO_ICMPV6" : 58,  "IPPROTO_NONE" : 59,  "IPPROTO_DSTOPTS" : 60,  "IPPROTO_MTP" : 92,  "IPPROTO_ENCAP" : 98,  "IPPROTO_PIM" : 103,  "IPPROTO_COMP" : 108,  "IPPROTO_SCTP" : 132,  "IPPROTO_UDPLITE" : 136,  "IPPROTO_RAW" : 255,  "IPPROTO_MAX" : 256, 
 "IPPORT_ECHO" : 7,  "IPPORT_DISCARD" : 9,  "IPPORT_SYSTAT" : 11,  "IPPORT_DAYTIME" : 13,  "IPPORT_NETSTAT" : 15,  "IPPORT_FTP" : 21,  "IPPORT_TELNET" : 23,  "IPPORT_SMTP" : 25,  "IPPORT_TIMESERVER" : 37,  "IPPORT_NAMESERVER" : 42,  "IPPORT_WHOIS" : 43,  "IPPORT_MTP" : 57,  "IPPORT_TFTP" : 69,  "IPPORT_RJE" : 77,  "IPPORT_FINGER" : 79,  "IPPORT_TTYLINK" : 87,  "IPPORT_SUPDUP" : 95,  "IPPORT_EXECSERVER" : 512,  "IPPORT_LOGINSERVER" : 513,  "IPPORT_CMDSERVER" : 514,  "IPPORT_EFSSERVER" : 520,  "IPPORT_BIFFUDP" : 512,  "IPPORT_WHOSERVER" : 513,  "IPPORT_ROUTESERVER" : 520,  "IPPORT_RESERVED" : 1024,  "IPPORT_USERRESERVED" : 5000, 
 "PTHREAD_CREATE_JOINABLE" : 0,  "PTHREAD_CREATE_DETACHED" : 1, 
 "PTHREAD_MUTEX_TIMED_NP" : 0,  "PTHREAD_MUTEX_RECURSIVE_NP" : 1,  "PTHREAD_MUTEX_ERRORCHECK_NP" : 2,  "PTHREAD_MUTEX_ADAPTIVE_NP" : 3,  "PTHREAD_MUTEX_NORMAL" : 0,  "PTHREAD_MUTEX_RECURSIVE" : 1,  "PTHREAD_MUTEX_ERRORCHECK" : 2,  "PTHREAD_MUTEX_DEFAULT" : 0,  "PTHREAD_MUTEX_FAST_NP" : 0, 
 "PTHREAD_MUTEX_STALLED" : 0,  "PTHREAD_MUTEX_STALLED_NP" : 0,  "PTHREAD_MUTEX_ROBUST" : 1,  "PTHREAD_MUTEX_ROBUST_NP" : 1, 
 "PTHREAD_PRIO_NONE" : 0,  "PTHREAD_PRIO_INHERIT" : 1,  "PTHREAD_PRIO_PROTECT" : 2, 
 "PTHREAD_RWLOCK_PREFER_READER_NP" : 0,  "PTHREAD_RWLOCK_PREFER_WRITER_NP" : 1,  "PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP" : 2,  "PTHREAD_RWLOCK_DEFAULT_NP" : 0, 
 "PTHREAD_INHERIT_SCHED" : 0,  "PTHREAD_EXPLICIT_SCHED" : 1, 
 "PTHREAD_SCOPE_SYSTEM" : 0,  "PTHREAD_SCOPE_PROCESS" : 1, 
 "PTHREAD_PROCESS_PRIVATE" : 0,  "PTHREAD_PROCESS_SHARED" : 1, 
 "PTHREAD_CANCEL_ENABLE" : 0,  "PTHREAD_CANCEL_DISABLE" : 1, 
 "PTHREAD_CANCEL_DEFERRED" : 0,  "PTHREAD_CANCEL_ASYNCHRONOUS" : 1, 
 "FP_NAN" : 0,  "FP_INFINITE" : 1,  "FP_ZERO" : 2,  "FP_SUBNORMAL" : 3,  "FP_NORMAL" : 4, 
 "IEEE_" : -1,  "SVID_" : 0,  "XOPEN_" : 1,  "POSIX_" : 2,  "ISOC_" : 3, 
 "PAINT_SHOW_BRUSH" : 1,  "PAINT_FAST_NAVIGATE" : 2,  "PAINT_SHOW_BRUSH_ON_SURFACE" : 4, 
 "CTX_MODE_EDIT_MESH" : 0,  "CTX_MODE_EDIT_CURVE" : 1,  "CTX_MODE_EDIT_SURFACE" : 2,  "CTX_MODE_EDIT_TEXT" : 3,  "CTX_MODE_EDIT_ARMATURE" : 4,  "CTX_MODE_EDIT_METABALL" : 5,  "CTX_MODE_EDIT_LATTICE" : 6,  "CTX_MODE_POSE" : 7,  "CTX_MODE_SCULPT" : 8,  "CTX_MODE_PAINT_WEIGHT" : 9,  "CTX_MODE_PAINT_VERTEX" : 10,  "CTX_MODE_PAINT_TEXTURE" : 11,  "CTX_MODE_PARTICLE" : 12,  "CTX_MODE_OBJECT" : 13, 
 "CTX_DATA_TYPE_POINTER" : 0,  "CTX_DATA_TYPE_COLLECTION" : 1, 
 "COLLISION_IN_FUTURE" : 2, 
 "CLOTH_SIMSETTINGS_FLAG_COLLOBJ" : 4,  "CLOTH_SIMSETTINGS_FLAG_GOAL" : 8,  "CLOTH_SIMSETTINGS_FLAG_TEARING" : 16,  "CLOTH_SIMSETTINGS_FLAG_SCALING" : 256,  "CLOTH_SIMSETTINGS_FLAG_CCACHE_EDIT" : 262144,  "CLOTH_SIMSETTINGS_FLAG_NO_SPRING_COMPRESS" : 524288, 
 "CLOTH_SPRING_TYPE_STRUCTURAL" : 2,  "CLOTH_SPRING_TYPE_SHEAR" : 4,  "CLOTH_SPRING_TYPE_BENDING" : 8,  "CLOTH_SPRING_TYPE_GOAL" : 16, 
 "CLOTH_COLLSETTINGS_FLAG_ENABLED" : 2,  "CLOTH_COLLSETTINGS_FLAG_SELF" : 4, 
 "CLOTH_SPRING_FLAG_DEACTIVATE" : 2,  "CLOTH_SPRING_FLAG_NEEDED" : 4, 
 "CM_IMPLICIT" : 0, 
 "RGN_TYPE_WINDOW" : 0,  "RGN_TYPE_HEADER" : 1,  "RGN_TYPE_CHANNELS" : 2,  "RGN_TYPE_TEMPORARY" : 3,  "RGN_TYPE_UI" : 4,  "RGN_TYPE_TOOLS" : 5,  "RGN_TYPE_TOOL_PROPS" : 6,  "RGN_TYPE_PREVIEW" : 7, 
 "CAMERA_UNITS_PX" : 0,  "CAMERA_UNITS_MM" : 1, 
 "INFO_RPT_DEBUG" : 1,  "INFO_RPT_INFO" : 2,  "INFO_RPT_OP" : 4,  "INFO_RPT_WARN" : 8,  "INFO_RPT_ERR" : 16, 
 "CONSOLE_LINE_OUTPUT" : 0,  "CONSOLE_LINE_INPUT" : 1,  "CONSOLE_LINE_INFO" : 2,  "CONSOLE_LINE_ERROR" : 3, 
 "SIPO_MODE_ANIMATION" : 0,  "SIPO_MODE_DRIVERS" : 1, 
 "SPACE_EMPTY" : 0,  "SPACE_VIEW3D" : 1,  "SPACE_IPO" : 2,  "SPACE_OUTLINER" : 3,  "SPACE_BUTS" : 4,  "SPACE_FILE" : 5,  "SPACE_IMAGE" : 6,  "SPACE_INFO" : 7,  "SPACE_SEQ" : 8,  "SPACE_TEXT" : 9,  "SPACE_IMASEL" : 10,  "SPACE_SOUND" : 11,  "SPACE_ACTION" : 12,  "SPACE_NLA" : 13,  "SPACE_SCRIPT" : 14,  "SPACE_TIME" : 15,  "SPACE_NODE" : 16,  "SPACE_LOGIC" : 17,  "SPACE_CONSOLE" : 18,  "SPACE_USERPREF" : 19,  "SPACE_CLIP" : 20,  "SPACEICONMAX" : 20, 
 "CURSOR_FACESEL" : 1000,  "CURSOR_WAIT" : 1001,  "CURSOR_EDIT" : 1002,  "CURSOR_X_MOVE" : 1003,  "CURSOR_Y_MOVE" : 1004,  "CURSOR_HELP" : 1005,  "CURSOR_STD" : 1006,  "CURSOR_NONE" : 1007,  "CURSOR_PENCIL" : 1008,  "CURSOR_COPY" : 1009, 
 "BC_NW_ARROWCURSOR" : 2,  "BC_NS_ARROWCURSOR" : 3,  "BC_EW_ARROWCURSOR" : 4,  "BC_WAITCURSOR" : 5,  "BC_CROSSCURSOR" : 6,  "BC_EDITCROSSCURSOR" : 7,  "BC_BOXSELCURSOR" : 8,  "BC_KNIFECURSOR" : 9,  "BC_VLOOPCURSOR" : 10,  "BC_TEXTEDITCURSOR" : 11,  "BC_PAINTBRUSHCURSOR" : 12,  "BC_HANDCURSOR" : 13,  "BC_NSEW_SCROLLCURSOR" : 14,  "BC_NS_SCROLLCURSOR" : 15,  "BC_EW_SCROLLCURSOR" : 16,  "BC_EYEDROPPER_CURSOR" : 17,  "BC_SWAPAREA_CURSOR" : 18,  "BC_NUMCURSORS" : 19, 
 "BC_BLACK" : 0,  "BC_WHITE" : 1,  "BC_RED" : 2,  "BC_BLUE" : 3,  "BC_GREEN" : 4,  "BC_YELLOW" : 5, 
 "NDOF_BUTTON_NONE" : 400,  "NDOF_BUTTON_MENU" : 401,  "NDOF_BUTTON_FIT" : 402,  "NDOF_BUTTON_TOP" : 403,  "NDOF_BUTTON_BOTTOM" : 404,  "NDOF_BUTTON_LEFT" : 405,  "NDOF_BUTTON_RIGHT" : 406,  "NDOF_BUTTON_FRONT" : 407,  "NDOF_BUTTON_BACK" : 408,  "NDOF_BUTTON_ISO1" : 409,  "NDOF_BUTTON_ISO2" : 410,  "NDOF_BUTTON_ROLL_CW" : 411,  "NDOF_BUTTON_ROLL_CCW" : 412,  "NDOF_BUTTON_SPIN_CW" : 413,  "NDOF_BUTTON_SPIN_CCW" : 414,  "NDOF_BUTTON_TILT_CW" : 415,  "NDOF_BUTTON_TILT_CCW" : 416,  "NDOF_BUTTON_ROTATE" : 417,  "NDOF_BUTTON_PANZOOM" : 418,  "NDOF_BUTTON_DOMINANT" : 419,  "NDOF_BUTTON_PLUS" : 420,  "NDOF_BUTTON_MINUS" : 421,  "NDOF_BUTTON_1" : 422,  "NDOF_BUTTON_2" : 423,  "NDOF_BUTTON_3" : 424,  "NDOF_BUTTON_4" : 425,  "NDOF_BUTTON_5" : 426,  "NDOF_BUTTON_6" : 427,  "NDOF_BUTTON_7" : 428,  "NDOF_BUTTON_8" : 429,  "NDOF_BUTTON_9" : 430,  "NDOF_BUTTON_10" : 431,  "NDOF_LAST" : 432, 
 "WM_OP_INVOKE_DEFAULT" : 0,  "WM_OP_INVOKE_REGION_WIN" : 1,  "WM_OP_INVOKE_REGION_CHANNELS" : 2,  "WM_OP_INVOKE_REGION_PREVIEW" : 3,  "WM_OP_INVOKE_AREA" : 4,  "WM_OP_INVOKE_SCREEN" : 5,  "WM_OP_EXEC_DEFAULT" : 6,  "WM_OP_EXEC_REGION_WIN" : 7,  "WM_OP_EXEC_REGION_CHANNELS" : 8,  "WM_OP_EXEC_REGION_PREVIEW" : 9,  "WM_OP_EXEC_AREA" : 10,  "WM_OP_EXEC_SCREEN" : 11, 
 "P_NOT_STARTED" : 0,  "P_STARTING" : 1,  "P_IN_PROGRESS" : 2,  "P_FINISHING" : 3,  "P_FINISHED" : 4, 
 "WM_LOG_DEBUG" : 0,  "WM_LOG_INFO" : 1000,  "WM_LOG_WARNING" : 2000,  "WM_ERROR_UNDEFINED" : 3000,  "WM_ERROR_INVALID_INPUT" : 3001,  "WM_ERROR_INVALID_CONTEXT" : 3002,  "WM_ERROR_OUT_OF_MEMORY" : 3003, 
 "WM_HANDLER_DEFAULT" : 0,  "WM_HANDLER_FILESELECT" : 1, 
 "GHOST_kFailure" : 0,  "GHOST_kSuccess" : 1, 
 "GHOST_kTabletModeNone" : 0,  "GHOST_kTabletModeStylus" : 1,  "GHOST_kTabletModeEraser" : 2, 
 "GHOST_kNotVisible" : 0,  "GHOST_kPartiallyVisible" : 1,  "GHOST_kFullyVisible" : 2, 
 "GHOST_kFireTimeNever" : 4294967295, 
 "GHOST_kModifierKeyLeftShift" : 0,  "GHOST_kModifierKeyRightShift" : 1,  "GHOST_kModifierKeyLeftAlt" : 2,  "GHOST_kModifierKeyRightAlt" : 3,  "GHOST_kModifierKeyLeftControl" : 4,  "GHOST_kModifierKeyRightControl" : 5,  "GHOST_kModifierKeyOS" : 6,  "GHOST_kModifierKeyNumMasks" : 7, 
 "GHOST_kWindowStateNormal" : 0,  "GHOST_kWindowStateMaximized" : 1,  "GHOST_kWindowStateMinimized" : 2,  "GHOST_kWindowStateFullScreen" : 3,  "GHOST_kWindowStateEmbedded" : 4,  "GHOST_kWindowState8Normal" : 8,  "GHOST_kWindowState8Maximized" : 9,  "GHOST_kWindowState8Minimized" : 10,  "GHOST_kWindowState8FullScreen" : 11,  "GHOST_kWindowStateModified" : 12,  "GHOST_kWindowStateUnModified" : 13, 
 "GHOST_kExitCancel" : 0,  "GHOST_kExitNow" : 1, 
 "GHOST_kWindowOrderTop" : 0,  "GHOST_kWindowOrderBottom" : 1, 
 "GHOST_kDrawingContextTypeNone" : 0,  "GHOST_kDrawingContextTypeOpenGL" : 1, 
 "GHOST_kButtonMaskLeft" : 0,  "GHOST_kButtonMaskMiddle" : 1,  "GHOST_kButtonMaskRight" : 2,  "GHOST_kButtonMaskButton4" : 3,  "GHOST_kButtonMaskButton5" : 4,  "GHOST_kButtonNumMasks" : 5, 
 "GHOST_kEventUnknown" : 0,  "GHOST_kEventCursorMove" : 1,  "GHOST_kEventButtonDown" : 2,  "GHOST_kEventButtonUp" : 3,  "GHOST_kEventWheel" : 4,  "GHOST_kEventTrackpad" : 5,  "GHOST_kEventNDOFMotion" : 6,  "GHOST_kEventNDOFButton" : 7,  "GHOST_kEventKeyDown" : 8,  "GHOST_kEventKeyUp" : 9,  "GHOST_kEventQuit" : 10,  "GHOST_kEventWindowClose" : 11,  "GHOST_kEventWindowActivate" : 12,  "GHOST_kEventWindowDeactivate" : 13,  "GHOST_kEventWindowUpdate" : 14,  "GHOST_kEventWindowSize" : 15,  "GHOST_kEventWindowMove" : 16,  "GHOST_kEventDraggingEntered" : 17,  "GHOST_kEventDraggingUpdated" : 18,  "GHOST_kEventDraggingExited" : 19,  "GHOST_kEventDraggingDropDone" : 20,  "GHOST_kEventOpenMainFile" : 21,  "GHOST_kEventTimer" : 22,  "GHOST_kNumEventTypes" : 23, 
 "GHOST_kStandardCursorFirstCursor" : 0,  "GHOST_kStandardCursorDefault" : 0,  "GHOST_kStandardCursorRightArrow" : 1,  "GHOST_kStandardCursorLeftArrow" : 2,  "GHOST_kStandardCursorInfo" : 3,  "GHOST_kStandardCursorDestroy" : 4,  "GHOST_kStandardCursorHelp" : 5,  "GHOST_kStandardCursorCycle" : 6,  "GHOST_kStandardCursorSpray" : 7,  "GHOST_kStandardCursorWait" : 8,  "GHOST_kStandardCursorText" : 9,  "GHOST_kStandardCursorCrosshair" : 10,  "GHOST_kStandardCursorUpDown" : 11,  "GHOST_kStandardCursorLeftRight" : 12,  "GHOST_kStandardCursorTopSide" : 13,  "GHOST_kStandardCursorBottomSide" : 14,  "GHOST_kStandardCursorLeftSide" : 15,  "GHOST_kStandardCursorRightSide" : 16,  "GHOST_kStandardCursorTopLeftCorner" : 17,  "GHOST_kStandardCursorTopRightCorner" : 18,  "GHOST_kStandardCursorBottomRightCorner" : 19,  "GHOST_kStandardCursorBottomLeftCorner" : 20,  "GHOST_kStandardCursorCopy" : 21,  "GHOST_kStandardCursorCustom" : 22,  "GHOST_kStandardCursorPencil" : 23,  "GHOST_kStandardCursorNumCursors" : 24, 
 "GHOST_kKeyUnknown" : -1,  "GHOST_kKeyBackSpace" : 0,  "GHOST_kKeyTab" : 1,  "GHOST_kKeyLinefeed" : 2,  "GHOST_kKeyClear" : 3,  "GHOST_kKeyEnter" : 13,  "GHOST_kKeyEsc" : 27,  "GHOST_kKeySpace" : " ",  "GHOST_kKeyQuote" : 39,  "GHOST_kKeyComma" : ",",  "GHOST_kKeyMinus" : "-",  "GHOST_kKeyPeriod" : ".",  "GHOST_kKeySlash" : "/",  "GHOST_kKey0" : "0",  "GHOST_kKey1" : "0",  "GHOST_kKey2" : "0",  "GHOST_kKey3" : "0",  "GHOST_kKey4" : "0",  "GHOST_kKey5" : "0",  "GHOST_kKey6" : "0",  "GHOST_kKey7" : "0",  "GHOST_kKey8" : "0",  "GHOST_kKey9" : "0",  "GHOST_kKeySemicolon" : ";",  "GHOST_kKeyEqual" : "=",  "GHOST_kKeyA" : "A",  "GHOST_kKeyB" : "A",  "GHOST_kKeyC" : "A",  "GHOST_kKeyD" : "A",  "GHOST_kKeyE" : "A",  "GHOST_kKeyF" : "A",  "GHOST_kKeyG" : "A",  "GHOST_kKeyH" : "A",  "GHOST_kKeyI" : "A",  "GHOST_kKeyJ" : "A",  "GHOST_kKeyK" : "A",  "GHOST_kKeyL" : "A",  "GHOST_kKeyM" : "A",  "GHOST_kKeyN" : "A",  "GHOST_kKeyO" : "A",  "GHOST_kKeyP" : "A",  "GHOST_kKeyQ" : "A",  "GHOST_kKeyR" : "A",  "GHOST_kKeyS" : "A",  "GHOST_kKeyT" : "A",  "GHOST_kKeyU" : "A",  "GHOST_kKeyV" : "A",  "GHOST_kKeyW" : "A",  "GHOST_kKeyX" : "A",  "GHOST_kKeyY" : "A",  "GHOST_kKeyZ" : "A",  "GHOST_kKeyLeftBracket" : "[",  "GHOST_kKeyRightBracket" : "]",  "GHOST_kKeyBackslash" : 92,  "GHOST_kKeyAccentGrave" : "`",  "GHOST_kKeyLeftShift" : 256,  "GHOST_kKeyRightShift" : 257,  "GHOST_kKeyLeftControl" : 258,  "GHOST_kKeyRightControl" : 259,  "GHOST_kKeyLeftAlt" : 260,  "GHOST_kKeyRightAlt" : 261,  "GHOST_kKeyOS" : 262,  "GHOST_kKeyGrLess" : 263,  "GHOST_kKeyCapsLock" : 264,  "GHOST_kKeyNumLock" : 265,  "GHOST_kKeyScrollLock" : 266,  "GHOST_kKeyLeftArrow" : 267,  "GHOST_kKeyRightArrow" : 268,  "GHOST_kKeyUpArrow" : 269,  "GHOST_kKeyDownArrow" : 270,  "GHOST_kKeyPrintScreen" : 271,  "GHOST_kKeyPause" : 272,  "GHOST_kKeyInsert" : 273,  "GHOST_kKeyDelete" : 274,  "GHOST_kKeyHome" : 275,  "GHOST_kKeyEnd" : 276,  "GHOST_kKeyUpPage" : 277,  "GHOST_kKeyDownPage" : 278,  "GHOST_kKeyNumpad0" : 279,  "GHOST_kKeyNumpad1" : 280,  "GHOST_kKeyNumpad2" : 281,  "GHOST_kKeyNumpad3" : 282,  "GHOST_kKeyNumpad4" : 283,  "GHOST_kKeyNumpad5" : 284,  "GHOST_kKeyNumpad6" : 285,  "GHOST_kKeyNumpad7" : 286,  "GHOST_kKeyNumpad8" : 287,  "GHOST_kKeyNumpad9" : 288,  "GHOST_kKeyNumpadPeriod" : 289,  "GHOST_kKeyNumpadEnter" : 290,  "GHOST_kKeyNumpadPlus" : 291,  "GHOST_kKeyNumpadMinus" : 292,  "GHOST_kKeyNumpadAsterisk" : 293,  "GHOST_kKeyNumpadSlash" : 294,  "GHOST_kKeyF1" : 295,  "GHOST_kKeyF2" : 296,  "GHOST_kKeyF3" : 297,  "GHOST_kKeyF4" : 298,  "GHOST_kKeyF5" : 299,  "GHOST_kKeyF6" : 300,  "GHOST_kKeyF7" : 301,  "GHOST_kKeyF8" : 302,  "GHOST_kKeyF9" : 303,  "GHOST_kKeyF10" : 304,  "GHOST_kKeyF11" : 305,  "GHOST_kKeyF12" : 306,  "GHOST_kKeyF13" : 307,  "GHOST_kKeyF14" : 308,  "GHOST_kKeyF15" : 309,  "GHOST_kKeyF16" : 310,  "GHOST_kKeyF17" : 311,  "GHOST_kKeyF18" : 312,  "GHOST_kKeyF19" : 313,  "GHOST_kKeyF20" : 314,  "GHOST_kKeyF21" : 315,  "GHOST_kKeyF22" : 316,  "GHOST_kKeyF23" : 317,  "GHOST_kKeyF24" : 318,  "GHOST_kKeyMediaPlay" : 319,  "GHOST_kKeyMediaStop" : 320,  "GHOST_kKeyMediaFirst" : 321,  "GHOST_kKeyMediaLast" : 322, 
 "GHOST_kGrabDisable" : 0,  "GHOST_kGrabNormal" : 1,  "GHOST_kGrabWrap" : 2,  "GHOST_kGrabHide" : 3, 
 "GHOST_kTrackpadEventUnknown" : 0,  "GHOST_kTrackpadEventScroll" : 1,  "GHOST_kTrackpadEventRotate" : 2,  "GHOST_kTrackpadEventSwipe" : 3,  "GHOST_kTrackpadEventMagnify" : 4, 
 "GHOST_kDragnDropTypeUnknown" : 0,  "GHOST_kDragnDropTypeFilenames" : 1,  "GHOST_kDragnDropTypeString" : 2,  "GHOST_kDragnDropTypeBitmap" : 3, 
 "GHOST_kNotStarted" : 0,  "GHOST_kStarting" : 1,  "GHOST_kInProgress" : 2,  "GHOST_kFinishing" : 3,  "GHOST_kFinished" : 4, 
 "GHOST_kPress" : 0,  "GHOST_kRelease" : 1, 
 "UI_BLOCK_BOUNDS" : 1,  "UI_BLOCK_BOUNDS_TEXT" : 2,  "UI_BLOCK_BOUNDS_POPUP_MOUSE" : 3,  "UI_BLOCK_BOUNDS_POPUP_MENU" : 4,  "UI_BLOCK_BOUNDS_POPUP_CENTER" : 5, 
 "UI_CNR_TOP_LEFT" : 1,  "UI_CNR_TOP_RIGHT" : 2,  "UI_CNR_BOTTOM_RIGHT" : 4,  "UI_CNR_BOTTOM_LEFT" : 8,  "UI_CNR_NONE" : 0,  "UI_CNR_ALL" : 15, 

}
class fenv_t(_rpythonic_struct_): pass
class wait(ctypes.Union): pass
class __wait_terminated(_rpythonic_struct_): pass
class __wait_stopped(_rpythonic_struct_): pass
class __WAIT_STATUS(ctypes.Union): pass
class div_t(_rpythonic_struct_): pass
class ldiv_t(_rpythonic_struct_): pass
class lldiv_t(_rpythonic_struct_): pass
class __locale_struct(_rpythonic_struct_): _array_wrapper_ = True
class __locale_data(_rpythonic_struct_): pass
class __fsid_t(_rpythonic_struct_): _array_wrapper_ = True
class __sigset_t(_rpythonic_struct_): _array_wrapper_ = True
class timespec(_rpythonic_struct_): pass
class timeval(_rpythonic_struct_): pass
class fd_set(_rpythonic_struct_): _array_wrapper_ = True
class pthread_attr_t(ctypes.Union): pass
class __pthread_internal_slist(_rpythonic_struct_): pass
class pthread_mutex_t(ctypes.Union): pass
class __pthread_mutex_s(_rpythonic_struct_): pass
class pthread_mutexattr_t(ctypes.Union): pass
class pthread_cond_t(ctypes.Union): pass
class pthread_condattr_t(ctypes.Union): pass
class pthread_rwlock_t(ctypes.Union): pass
class __data(_rpythonic_struct_): pass
class pthread_rwlockattr_t(ctypes.Union): pass
class pthread_barrier_t(ctypes.Union): pass
class pthread_barrierattr_t(ctypes.Union): pass
class random_data(_rpythonic_struct_): pass
class drand48_data(_rpythonic_struct_): _array_wrapper_ = True
class sigval(ctypes.Union): pass
class siginfo(_rpythonic_struct_): pass
class _sifields(ctypes.Union): pass
class _kill(_rpythonic_struct_): pass
class _timer(_rpythonic_struct_): pass
class _rt(_rpythonic_struct_): pass
class _sigchld(_rpythonic_struct_): pass
class _sigfault(_rpythonic_struct_): pass
class _sigpoll(_rpythonic_struct_): pass
class sigevent(_rpythonic_struct_): pass
class _sigev_un(ctypes.Union): pass
class _sigev_thread(_rpythonic_struct_): pass
class sigaction(_rpythonic_struct_): pass
class __sigaction_handler(ctypes.Union): pass
class sigvec(_rpythonic_struct_): pass
class _fpreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpxreg(_rpythonic_struct_): _array_wrapper_ = True
class _xmmreg(_rpythonic_struct_): _array_wrapper_ = True
class _fpstate(_rpythonic_struct_): _array_wrapper_ = True
class sigcontext(_rpythonic_struct_): pass
class sigstack(_rpythonic_struct_): pass
class sigaltstack(_rpythonic_struct_): pass
class _libc_fpreg(_rpythonic_struct_): _array_wrapper_ = True
class _libc_fpstate(_rpythonic_struct_): _array_wrapper_ = True
class mcontext_t(_rpythonic_struct_): pass
class ucontext(_rpythonic_struct_): pass
class __mbstate_t(_rpythonic_struct_): pass
class __value(ctypes.Union): pass
class _G_fpos_t(_rpythonic_struct_): pass
class _G_fpos64_t(_rpythonic_struct_): pass
class _IO_jump_t(_rpythonic_struct_): pass
class _IO_marker(_rpythonic_struct_): pass
class _IO_FILE(_rpythonic_struct_): _array_wrapper_ = True
class _IO_FILE_plus(_rpythonic_struct_): pass
class _IO_cookie_io_functions_t(_rpythonic_struct_): pass
class _IO_cookie_file(_rpythonic_struct_): pass
class obstack(_rpythonic_struct_): pass
class iovec(_rpythonic_struct_): pass
class sockaddr(_rpythonic_struct_): _array_wrapper_ = True
class sockaddr_storage(_rpythonic_struct_): _array_wrapper_ = True
class msghdr(_rpythonic_struct_): pass
class mmsghdr(_rpythonic_struct_): pass
class cmsghdr(_rpythonic_struct_): _array_wrapper_ = True
class ucred(_rpythonic_struct_): pass
class linger(_rpythonic_struct_): pass
class osockaddr(_rpythonic_struct_): _array_wrapper_ = True
class __SOCKADDR_ARG(ctypes.Union): pass
class sockaddr_at(_rpythonic_struct_): pass
class sockaddr_ax25(_rpythonic_struct_): pass
class sockaddr_dl(_rpythonic_struct_): pass
class sockaddr_eon(_rpythonic_struct_): pass
class sockaddr_inarp(_rpythonic_struct_): pass
class sockaddr_ipx(_rpythonic_struct_): pass
class sockaddr_iso(_rpythonic_struct_): pass
class sockaddr_ns(_rpythonic_struct_): pass
class sockaddr_un(_rpythonic_struct_): pass
class sockaddr_x25(_rpythonic_struct_): pass
class __CONST_SOCKADDR_ARG(ctypes.Union): pass
class in_addr(_rpythonic_struct_): pass
class in6_addr(_rpythonic_struct_): pass
class __in6_u(ctypes.Union): pass
class sockaddr_in(_rpythonic_struct_): _array_wrapper_ = True
class sockaddr_in6(_rpythonic_struct_): pass
class ip_mreq(_rpythonic_struct_): pass
class ip_mreq_source(_rpythonic_struct_): pass
class ipv6_mreq(_rpythonic_struct_): pass
class group_req(_rpythonic_struct_): pass
class group_source_req(_rpythonic_struct_): pass
class ip_msfilter(_rpythonic_struct_): _array_wrapper_ = True
class group_filter(_rpythonic_struct_): _array_wrapper_ = True
class ip_opts(_rpythonic_struct_): _array_wrapper_ = True
class ip_mreqn(_rpythonic_struct_): pass
class in_pktinfo(_rpythonic_struct_): pass
class in6_pktinfo(_rpythonic_struct_): pass
class ip6_mtuinfo(_rpythonic_struct_): pass
class bArgs(_rpythonic_struct_): pass
class sched_param(_rpythonic_struct_): pass
class __sched_param(_rpythonic_struct_): pass
class cpu_set_t(_rpythonic_struct_): _array_wrapper_ = True
class tm(_rpythonic_struct_): pass
class itimerspec(_rpythonic_struct_): pass
class _pthread_cleanup_buffer(_rpythonic_struct_): pass
class __pthread_unwind_buf_t(_rpythonic_struct_): _array_wrapper_ = True
class __cancel_jmp_buf(_rpythonic_struct_): _array_wrapper_ = True
class __pthread_cleanup_frame(_rpythonic_struct_): pass
class __jmp_buf_tag(_rpythonic_struct_): pass
class ThreadedWorker(_rpythonic_struct_): pass
class ThreadQueue(_rpythonic_struct_): pass
class EditVert(_rpythonic_struct_): pass
class EditEdge(_rpythonic_struct_): pass
class Link(_rpythonic_struct_): pass
class LinkData(_rpythonic_struct_): pass
class ListBase(_rpythonic_struct_): pass
class stat(_rpythonic_struct_): pass
class stat64(_rpythonic_struct_): pass
class direntry(_rpythonic_struct_): _array_wrapper_ = True
class dirlink(_rpythonic_struct_): pass
class LinkNode(_rpythonic_struct_): pass
class Entry(_rpythonic_struct_): pass
class GHash(_rpythonic_struct_): pass
class BLI_mempool(_rpythonic_struct_): pass
class GHashIterator(_rpythonic_struct_): pass
class GHashPair(_rpythonic_struct_): pass
class exception(_rpythonic_struct_): pass
class DualQuat(_rpythonic_struct_): _array_wrapper_ = True
class VertexTangent(_rpythonic_struct_): _array_wrapper_ = True
class FileData(_rpythonic_struct_): pass
class IDPropertyData(_rpythonic_struct_): pass
class IDProperty(_rpythonic_struct_): _array_wrapper_ = True
class ID(_rpythonic_struct_): _array_wrapper_ = True
class Library(_rpythonic_struct_): _array_wrapper_ = True
class PreviewImage(_rpythonic_struct_): _array_wrapper_ = True
class vec2s(_rpythonic_struct_): pass
class vec2f(_rpythonic_struct_): pass
class rcti(_rpythonic_struct_): pass
class rctf(_rpythonic_struct_): pass
class Object(_rpythonic_struct_): pass
class Brush(_rpythonic_struct_): pass
class World(_rpythonic_struct_): pass
class Group(_rpythonic_struct_): pass
class Text(_rpythonic_struct_): pass
class bNodeTree(_rpythonic_struct_): pass
class AnimData(_rpythonic_struct_): pass
class Editing(_rpythonic_struct_): pass
class SceneStats(_rpythonic_struct_): pass
class bGPdata(_rpythonic_struct_): pass
class Base(_rpythonic_struct_): pass
class AviCodecData(_rpythonic_struct_): _array_wrapper_ = True
class QuicktimeCodecData(_rpythonic_struct_): _array_wrapper_ = True
class QuicktimeCodecSettings(_rpythonic_struct_): pass
class FFMpegCodecData(_rpythonic_struct_): pass
class AudioData(_rpythonic_struct_): pass
class SceneRenderLayer(_rpythonic_struct_): _array_wrapper_ = True
class Material(_rpythonic_struct_): pass
class ImageFormatData(_rpythonic_struct_): _array_wrapper_ = True
class RenderData(_rpythonic_struct_): _array_wrapper_ = True
class RenderProfile(_rpythonic_struct_): _array_wrapper_ = True
class GameDome(_rpythonic_struct_): pass
class GameFraming(_rpythonic_struct_): _array_wrapper_ = True
class RecastData(_rpythonic_struct_): pass
class GameData(_rpythonic_struct_): pass
class TimeMarker(_rpythonic_struct_): _array_wrapper_ = True
class Paint(_rpythonic_struct_): _array_wrapper_ = True
class ImagePaintSettings(_rpythonic_struct_): _array_wrapper_ = True
class ParticleBrushData(_rpythonic_struct_): pass
class ParticleEditSettings(_rpythonic_struct_): _array_wrapper_ = True
class TransformOrientation(_rpythonic_struct_): _array_wrapper_ = True
class Sculpt(_rpythonic_struct_): _array_wrapper_ = True
class VPaint(_rpythonic_struct_): pass
class MDeformVert(_rpythonic_struct_): pass
class ToolSettings(_rpythonic_struct_): _array_wrapper_ = True
class bStats(_rpythonic_struct_): pass
class UnitSettings(_rpythonic_struct_): pass
class PhysicsSettings(_rpythonic_struct_): _array_wrapper_ = True
class Scene(_rpythonic_struct_): _array_wrapper_ = True
class DagForest(_rpythonic_struct_): pass
class MemFile(_rpythonic_struct_): pass
class bContext(_rpythonic_struct_): pass
class FunctionRNA(_rpythonic_struct_): pass
class PropertyRNA(_rpythonic_struct_): pass
class EnumPropertyRNA(_rpythonic_struct_): pass
class StructRNA(_rpythonic_struct_): pass
class BlenderRNA(_rpythonic_struct_): pass
class PointerRNA(_rpythonic_struct_): pass
class C_id(_rpythonic_struct_): pass
class PropertyPointerRNA(_rpythonic_struct_): pass
class CollectionPropertyIterator(_rpythonic_struct_): pass
class CollectionPointerLink(_rpythonic_struct_): pass
class RawArray(_rpythonic_struct_): pass
class EnumPropertyItem(_rpythonic_struct_): pass
class ParameterList(_rpythonic_struct_): pass
class ParameterIterator(_rpythonic_struct_): pass
class ParameterDynAlloc(_rpythonic_struct_): pass
class ExtensionRNA(_rpythonic_struct_): pass
class EditMesh(_rpythonic_struct_): pass
class bPoseChannel(_rpythonic_struct_): pass
class bContextDataResult(_rpythonic_struct_): pass
class bContextStoreEntry(_rpythonic_struct_): _array_wrapper_ = True
class bContextStore(_rpythonic_struct_): pass
class SpaceAction(_rpythonic_struct_): pass
class VFont(_rpythonic_struct_): pass
class Curve(_rpythonic_struct_): pass
class objfnt(_rpythonic_struct_): pass
class TmpFont(_rpythonic_struct_): pass
class CharInfo(_rpythonic_struct_): pass
class chartrans(_rpythonic_struct_): pass
class SelBox(_rpythonic_struct_): pass
class EditFont(_rpythonic_struct_): _array_wrapper_ = True
class BME_Glob(_rpythonic_struct_): pass
class Global(_rpythonic_struct_): _array_wrapper_ = True
class Main(_rpythonic_struct_): _array_wrapper_ = True
class Mesh(_rpythonic_struct_): pass
class MTFace(_rpythonic_struct_): pass
class bSound(_rpythonic_struct_): pass
class PackedFile(_rpythonic_struct_): pass
class bglMats(_rpythonic_struct_): pass
class bNode(_rpythonic_struct_): pass
class bNodeLink(_rpythonic_struct_): pass
class bNodeSocket(_rpythonic_struct_): pass
class bNodeStack(_rpythonic_struct_): pass
class bNodeTreeExec(_rpythonic_struct_): pass
class GPUMaterial(_rpythonic_struct_): pass
class GPUNode(_rpythonic_struct_): pass
class GPUNodeStack(_rpythonic_struct_): pass
class uiBlock(_rpythonic_struct_): pass
class uiLayout(_rpythonic_struct_): pass
class bNodeSocketTemplate(_rpythonic_struct_): _array_wrapper_ = True
class bNodeSocketType(_rpythonic_struct_): _array_wrapper_ = True
class bNodeTemplate(_rpythonic_struct_): pass
class bNodeType(_rpythonic_struct_): _array_wrapper_ = True
class bNodeTreeType(_rpythonic_struct_): _array_wrapper_ = True
class CompBuf(_rpythonic_struct_): pass
class wmLocal(_rpythonic_struct_): pass
class wmSubWindow(_rpythonic_struct_): pass
class Report(_rpythonic_struct_): pass
class ReportList(_rpythonic_struct_): pass
class ReportTimerInfo(_rpythonic_struct_): _array_wrapper_ = True
class wmWindowManager(_rpythonic_struct_): pass
class wmWindow(_rpythonic_struct_): _array_wrapper_ = True
class wmOperatorTypeMacro(_rpythonic_struct_): _array_wrapper_ = True
class wmKeyMapItem(_rpythonic_struct_): _array_wrapper_ = True
class wmKeyMapDiffItem(_rpythonic_struct_): pass
class wmKeyMap(_rpythonic_struct_): _array_wrapper_ = True
class wmKeyConfig(_rpythonic_struct_): _array_wrapper_ = True
class wmOperator(_rpythonic_struct_): _array_wrapper_ = True
class Sequence(_rpythonic_struct_): pass
class SoundWaveform(_rpythonic_struct_): pass
class DagNodeQueue(_rpythonic_struct_): pass
class DagNode(_rpythonic_struct_): pass
class IDPropertyTemplate(ctypes.Union): pass
class string(_rpythonic_struct_): pass
class array(_rpythonic_struct_): pass
class matrix_or_vector(_rpythonic_struct_): pass
class uiMenuItem(_rpythonic_struct_): pass
class SpaceType(_rpythonic_struct_): _array_wrapper_ = True
class ARegionType(_rpythonic_struct_): pass
class PanelType(_rpythonic_struct_): _array_wrapper_ = True
class HeaderType(_rpythonic_struct_): _array_wrapper_ = True
class Header(_rpythonic_struct_): pass
class MenuType(_rpythonic_struct_): _array_wrapper_ = True
class Menu(_rpythonic_struct_): pass
class anim(_rpythonic_struct_): pass
class CustomDataLayer(_rpythonic_struct_): _array_wrapper_ = True
class CustomDataExternal(_rpythonic_struct_): _array_wrapper_ = True
class CustomData(_rpythonic_struct_): pass
class BVHTree(_rpythonic_struct_): pass
class BVHTreeOverlap(_rpythonic_struct_): pass
class BVHTreeNearest(_rpythonic_struct_): _array_wrapper_ = True
class BVHTreeRay(_rpythonic_struct_): _array_wrapper_ = True
class BVHTreeRayHit(_rpythonic_struct_): _array_wrapper_ = True
class MVert(_rpythonic_struct_): pass
class MFace(_rpythonic_struct_): pass
class BVHTreeFromMesh(_rpythonic_struct_): pass
class MEdge(_rpythonic_struct_): pass
class KeyBlock(_rpythonic_struct_): pass
class ModifierData(_rpythonic_struct_): pass
class MCol(_rpythonic_struct_): pass
class PBVH(_rpythonic_struct_): pass
class DMGridData(_rpythonic_struct_): _array_wrapper_ = True
class DMGridAdjacency(_rpythonic_struct_): _array_wrapper_ = True
class DerivedMesh(_rpythonic_struct_): pass
class DMVertexAttribs(_rpythonic_struct_): _array_wrapper_ = True
class tface(_rpythonic_struct_): _array_wrapper_ = True
class mcol(_rpythonic_struct_): _array_wrapper_ = True
class tang(_rpythonic_struct_): pass
class orco(_rpythonic_struct_): pass
class EditMeshDerivedMesh(_rpythonic_struct_): pass
class ClothSimSettings(_rpythonic_struct_): _array_wrapper_ = True
class EffectorWeights(_rpythonic_struct_): pass
class ClothCollSettings(_rpythonic_struct_): pass
class ClothModifierData(_rpythonic_struct_): pass
class CollisionModifierData(_rpythonic_struct_): pass
class CollPair(_rpythonic_struct_): _array_wrapper_ = True
class EdgeCollPair(_rpythonic_struct_): _array_wrapper_ = True
class FaceCollPair(_rpythonic_struct_): _array_wrapper_ = True
class ColliderCache(_rpythonic_struct_): pass
class CollisionTree(_rpythonic_struct_): pass
class Cloth(_rpythonic_struct_): pass
class Implicit_Data(_rpythonic_struct_): pass
class EdgeHash(_rpythonic_struct_): pass
class ClothVertex(_rpythonic_struct_): _array_wrapper_ = True
class ClothSpring(_rpythonic_struct_): _array_wrapper_ = True
class CM_SOLVER_DEF(_rpythonic_struct_): pass
class bGPDlayer(_rpythonic_struct_): pass
class MovieReconstructContext(_rpythonic_struct_): pass
class MovieTrackingContext(_rpythonic_struct_): pass
class MovieDistortion(_rpythonic_struct_): pass
class Camera(_rpythonic_struct_): pass
class ImMetaData(_rpythonic_struct_): pass
class ImBuf(_rpythonic_struct_): _array_wrapper_ = True
class MEM_CacheLimiterHandle_s(_rpythonic_struct_): pass
class ChannelDriver(_rpythonic_struct_): pass
class bConstraint(_rpythonic_struct_): pass
class bPythonConstraint(_rpythonic_struct_): pass
class bConstraintOb(_rpythonic_struct_): pass
class bConstraintTarget(_rpythonic_struct_): pass
class NodeBlurData(_rpythonic_struct_): pass
class Render(_rpythonic_struct_): pass
class RenderPass(_rpythonic_struct_): _array_wrapper_ = True
class RenderLayer(_rpythonic_struct_): _array_wrapper_ = True
class RenderResult(_rpythonic_struct_): pass
class RenderStats(_rpythonic_struct_): _array_wrapper_ = True
class TexResult(_rpythonic_struct_): pass
class ShadeResult(_rpythonic_struct_): _array_wrapper_ = True
class ShadeInputCopy(_rpythonic_struct_): _array_wrapper_ = True
class VlakRen(_rpythonic_struct_): pass
class StrandRen(_rpythonic_struct_): pass
class ObjectInstanceRen(_rpythonic_struct_): pass
class ObjectRen(_rpythonic_struct_): pass
class VertRen(_rpythonic_struct_): pass
class ShadeInputUV(_rpythonic_struct_): _array_wrapper_ = True
class ShadeInputCol(_rpythonic_struct_): _array_wrapper_ = True
class ShadeInput(_rpythonic_struct_): _array_wrapper_ = True
class RenderEngineType(_rpythonic_struct_): _array_wrapper_ = True
class RenderEngine(_rpythonic_struct_): pass
class bArmature(_rpythonic_struct_): pass
class Bone(_rpythonic_struct_): pass
class MeshDeformModifierData(_rpythonic_struct_): pass
class SK_Sketch(_rpythonic_struct_): pass
class ViewContext(_rpythonic_struct_): pass
class EditBone(_rpythonic_struct_): _array_wrapper_ = True
class KeyingSet(_rpythonic_struct_): pass
class bAction(_rpythonic_struct_): pass
class FCurve(_rpythonic_struct_): pass
class BezTriple(_rpythonic_struct_): pass
class KeyingSetInfo(_rpythonic_struct_): _array_wrapper_ = True
class RenderInfo(_rpythonic_struct_): pass
class View2D(_rpythonic_struct_): _array_wrapper_ = True
class bScreen(_rpythonic_struct_): _array_wrapper_ = True
class ScrVert(_rpythonic_struct_): pass
class ScrEdge(_rpythonic_struct_): pass
class Panel(_rpythonic_struct_): _array_wrapper_ = True
class ScrArea(_rpythonic_struct_): pass
class ARegion(_rpythonic_struct_): _array_wrapper_ = True
class CurveMapPoint(_rpythonic_struct_): pass
class CurveMap(_rpythonic_struct_): _array_wrapper_ = True
class CurveMapping(_rpythonic_struct_): _array_wrapper_ = True
class Histogram(_rpythonic_struct_): _array_wrapper_ = True
class Scopes(_rpythonic_struct_): _array_wrapper_ = True
class TreeStoreElem(_rpythonic_struct_): pass
class TreeStore(_rpythonic_struct_): pass
class GPUTexture(_rpythonic_struct_): pass
class ImageUser(_rpythonic_struct_): pass
class Image(_rpythonic_struct_): _array_wrapper_ = True
class MovieTrackingBundle(_rpythonic_struct_): pass
class MovieReconstructedCamera(_rpythonic_struct_): _array_wrapper_ = True
class MovieTrackingCamera(_rpythonic_struct_): _array_wrapper_ = True
class MovieTrackingMarker(_rpythonic_struct_): _array_wrapper_ = True
class MovieTrackingTrack(_rpythonic_struct_): _array_wrapper_ = True
class MovieTrackingSettings(_rpythonic_struct_): pass
class MovieTrackingStabilization(_rpythonic_struct_): pass
class MovieTrackingReconstruction(_rpythonic_struct_): pass
class MovieTrackingStats(_rpythonic_struct_): _array_wrapper_ = True
class MovieTracking(_rpythonic_struct_): pass
class MovieClipUser(_rpythonic_struct_): pass
class MovieClipProxy(_rpythonic_struct_): _array_wrapper_ = True
class MovieClip(_rpythonic_struct_): _array_wrapper_ = True
class MovieClipCache(_rpythonic_struct_): pass
class MovieClipScopes(_rpythonic_struct_): _array_wrapper_ = True
class BlendHandle(_rpythonic_struct_): pass
class FileList(_rpythonic_struct_): pass
class bDopeSheet(_rpythonic_struct_): pass
class FileLayout(_rpythonic_struct_): pass
class SpaceLink(_rpythonic_struct_): _array_wrapper_ = True
class SpaceInfo(_rpythonic_struct_): _array_wrapper_ = True
class SpaceIpo(_rpythonic_struct_): _array_wrapper_ = True
class SpaceButs(_rpythonic_struct_): _array_wrapper_ = True
class SpaceSeq(_rpythonic_struct_): _array_wrapper_ = True
class FileSelectParams(_rpythonic_struct_): _array_wrapper_ = True
class SpaceFile(_rpythonic_struct_): pass
class SpaceOops(_rpythonic_struct_): _array_wrapper_ = True
class SpaceImage(_rpythonic_struct_): _array_wrapper_ = True
class SpaceNla(_rpythonic_struct_): _array_wrapper_ = True
class SpaceText(_rpythonic_struct_): _array_wrapper_ = True
class Script(_rpythonic_struct_): _array_wrapper_ = True
class SpaceScript(_rpythonic_struct_): pass
class SpaceTimeCache(_rpythonic_struct_): pass
class SpaceTime(_rpythonic_struct_): pass
class SpaceNode(_rpythonic_struct_): _array_wrapper_ = True
class SpaceLogic(_rpythonic_struct_): _array_wrapper_ = True
class ConsoleLine(_rpythonic_struct_): pass
class SpaceConsole(_rpythonic_struct_): _array_wrapper_ = True
class SpaceUserPref(_rpythonic_struct_): _array_wrapper_ = True
class SpaceClip(_rpythonic_struct_): _array_wrapper_ = True
class ViewDepths(_rpythonic_struct_): pass
class BoundBox(_rpythonic_struct_): pass
class SmoothViewStore(_rpythonic_struct_): pass
class BGpic(_rpythonic_struct_): pass
class RegionView3D(_rpythonic_struct_): _array_wrapper_ = True
class View3D(_rpythonic_struct_): _array_wrapper_ = True
class EditFace(_rpythonic_struct_): pass
class wmJob(_rpythonic_struct_): pass
class BCursor(_rpythonic_struct_): pass
class wmNotifier(_rpythonic_struct_): pass
class wmGesture(_rpythonic_struct_): pass
class wmEvent(_rpythonic_struct_): _array_wrapper_ = True
class wmTabletData(_rpythonic_struct_): pass
class wmNDOFMotionData(_rpythonic_struct_): pass
class wmTimer(_rpythonic_struct_): pass
class wmOperatorType(_rpythonic_struct_): pass
class wmReport(_rpythonic_struct_): pass
class wmDrag(_rpythonic_struct_): _array_wrapper_ = True
class wmDropBox(_rpythonic_struct_): pass
class RecentFile(_rpythonic_struct_): pass
class wmPaintCursor(_rpythonic_struct_): pass
class wmEventHandler(_rpythonic_struct_): pass
class SmokeModifierData(_rpythonic_struct_): pass
class GPUFrameBuffer(_rpythonic_struct_): pass
class GPUOffScreen(_rpythonic_struct_): pass
class GPUShader(_rpythonic_struct_): pass
class GPUVertexAttribs(_rpythonic_struct_): _array_wrapper_ = True
class layer(_rpythonic_struct_): _array_wrapper_ = True
class GPUVertPointLink(_rpythonic_struct_): pass
class GPUBuffer(_rpythonic_struct_): pass
class GPUBufferMaterial(_rpythonic_struct_): pass
class GPUDrawObject(_rpythonic_struct_): pass
class GPUAttrib(_rpythonic_struct_): pass
class GPU_Buffers(_rpythonic_struct_): pass
class BHead(_rpythonic_struct_): pass
class BlendFileData(_rpythonic_struct_): _array_wrapper_ = True
class bPose(_rpythonic_struct_): pass
class BIK_ParamValue(_rpythonic_struct_): pass
class value(ctypes.Union): pass
class GHOST_TabletData(_rpythonic_struct_): pass
class GHOST_TEventCursorData(_rpythonic_struct_): pass
class GHOST_TEventButtonData(_rpythonic_struct_): pass
class GHOST_TEventWheelData(_rpythonic_struct_): pass
class GHOST_TEventTrackpadData(_rpythonic_struct_): pass
class GHOST_TEventDragnDropData(_rpythonic_struct_): pass
class GHOST_TStringArray(_rpythonic_struct_): pass
class GHOST_TEventNDOFMotionData(_rpythonic_struct_): pass
class GHOST_TEventNDOFButtonData(_rpythonic_struct_): pass
class GHOST_TEventKeyData(_rpythonic_struct_): _array_wrapper_ = True
class GHOST_DisplaySetting(_rpythonic_struct_): pass
class GHOST_SystemHandle__(_rpythonic_struct_): pass
class GHOST_TimerTaskHandle__(_rpythonic_struct_): pass
class GHOST_WindowHandle__(_rpythonic_struct_): pass
class GHOST_EventHandle__(_rpythonic_struct_): pass
class GHOST_RectangleHandle__(_rpythonic_struct_): pass
class GHOST_EventConsumerHandle__(_rpythonic_struct_): pass
class GHOST_SystemPathsHandle__(_rpythonic_struct_): pass
class plPhysicsSdkHandle__(_rpythonic_struct_): pass
class plDynamicsWorldHandle__(_rpythonic_struct_): pass
class plRigidBodyHandle__(_rpythonic_struct_): pass
class plCollisionShapeHandle__(_rpythonic_struct_): pass
class plConstraintHandle__(_rpythonic_struct_): pass
class plMeshInterfaceHandle__(_rpythonic_struct_): pass
class plCollisionBroadphaseHandle__(_rpythonic_struct_): pass
class plBroadphaseProxyHandle__(_rpythonic_struct_): pass
class plCollisionWorldHandle__(_rpythonic_struct_): pass
class plRayCastResult(_rpythonic_struct_): pass
class BulletSoftBody(_rpythonic_struct_): pass
class Ipo(_rpythonic_struct_): pass
class Ocean(_rpythonic_struct_): pass
class MTex(_rpythonic_struct_): _array_wrapper_ = True
class PluginTex(_rpythonic_struct_): _array_wrapper_ = True
class CBData(_rpythonic_struct_): pass
class ColorBand(_rpythonic_struct_): _array_wrapper_ = True
class EnvMap(_rpythonic_struct_): _array_wrapper_ = True
class PointDensity(_rpythonic_struct_): _array_wrapper_ = True
class VoxelData(_rpythonic_struct_): _array_wrapper_ = True
class OceanTex(_rpythonic_struct_): _array_wrapper_ = True
class Tex(_rpythonic_struct_): _array_wrapper_ = True
class TexMapping(_rpythonic_struct_): _array_wrapper_ = True
class ColorMapping(_rpythonic_struct_): _array_wrapper_ = True
class uiFont(_rpythonic_struct_): _array_wrapper_ = True
class uiFontStyle(_rpythonic_struct_): _array_wrapper_ = True
class uiStyle(_rpythonic_struct_): _array_wrapper_ = True
class uiWidgetColors(_rpythonic_struct_): _array_wrapper_ = True
class uiWidgetStateColors(_rpythonic_struct_): _array_wrapper_ = True
class uiPanelColors(_rpythonic_struct_): _array_wrapper_ = True
class ThemeUI(_rpythonic_struct_): _array_wrapper_ = True
class ThemeSpace(_rpythonic_struct_): _array_wrapper_ = True
class ThemeWireColor(_rpythonic_struct_): _array_wrapper_ = True
class bTheme(_rpythonic_struct_): _array_wrapper_ = True
class bAddon(_rpythonic_struct_): _array_wrapper_ = True
class SolidLight(_rpythonic_struct_): _array_wrapper_ = True
class UserDef(_rpythonic_struct_): _array_wrapper_ = True
class AutoComplete(_rpythonic_struct_): pass
class uiBut(_rpythonic_struct_): pass
class uiPopupBlockHandle(_rpythonic_struct_): pass
class uiSearchItems(_rpythonic_struct_): pass
class uiPopupMenu(_rpythonic_struct_): pass
## union and structures ##
__freeze_rpythonic_struct( fenv_t, [
	( "__control_word", ctypes.c_uint16 ),
	( "__unused1", ctypes.c_uint16 ),
	( "__status_word", ctypes.c_uint16 ),
	( "__unused2", ctypes.c_uint16 ),
	( "__tags", ctypes.c_uint16 ),
	( "__unused3", ctypes.c_uint16 ),
	( "__eip", ctypes.c_uint ),
	( "__cs_selector", ctypes.c_uint16 ),
	( "__opcode", ctypes.c_uint ),
	( "__unused4", ctypes.c_uint ),
	( "__data_offset", ctypes.c_uint ),
	( "__data_selector", ctypes.c_uint16 ),
	( "__unused5", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( __wait_terminated, [
	( "__w_termsig", ctypes.c_uint ),
	( "__w_coredump", ctypes.c_uint ),
	( "__w_retcode", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xa72db0c>
])

__freeze_rpythonic_struct( __wait_stopped, [
	( "__w_stopval", ctypes.c_uint ),
	( "__w_stopsig", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xa72dcac>
])

__freeze_rpythonic_struct( wait, [
	( "w_status", ctypes.c_int ),
	( "__wait_terminated", __wait_terminated ),
	( "__wait_stopped", __wait_stopped ),
])

__freeze_rpythonic_struct( __WAIT_STATUS, [
	( "__uptr", ctypes.POINTER(wait) ),
	( "__iptr", ctypes.POINTER(ctypes.c_int) ),
])

__freeze_rpythonic_struct( div_t, [
	( "quot", ctypes.c_int ),
	( "rem", ctypes.c_int ),
])

__freeze_rpythonic_struct( ldiv_t, [
	( "quot", ctypes.c_int64 ),
	( "rem", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( lldiv_t, [
	( "quot", ctypes.c_longlong ),
	( "rem", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( __locale_data, [
])

__freeze_rpythonic_struct( __locale_struct, [
	( "__locales", ctypes.POINTER(( __locale_data * 13 )) ),
	( "__ctype_b", ctypes.POINTER(ctypes.c_uint16) ),
	( "__ctype_tolower", ctypes.POINTER(ctypes.c_int) ),
	( "__ctype_toupper", ctypes.POINTER(ctypes.c_int) ),
	( "__names", ctypes.POINTER(( ctypes.c_char * 13 )) ),
])

__freeze_rpythonic_struct( __fsid_t, [
	( "__val", ( ctypes.c_int * 2 ) ),
])

__freeze_rpythonic_struct( __sigset_t, [
	( "__val", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( timespec, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_nsec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( timeval, [
	( "tv_sec", ctypes.c_int64 ),
	( "tv_usec", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( fd_set, [
	( "fds_bits", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_attr_t, [
	( "__size", ( ctypes.c_char * 36 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( __pthread_internal_slist, [
	( "__next", ctypes.POINTER(__pthread_internal_slist) ),
])

__freeze_rpythonic_struct( __pthread_mutex_s, [
	( "__lock", ctypes.c_int ),
	( "__count", ctypes.c_uint ),
	( "__owner", ctypes.c_int ),
	( "__kind", ctypes.c_int ),
	( "__nusers", ctypes.c_uint ),
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xa7566ec>
])

__freeze_rpythonic_struct( pthread_mutex_t, [
	( "__data", __pthread_mutex_s ),
	( "__size", ( ctypes.c_char * 24 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_mutexattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( __data, [
	( "__lock", ctypes.c_int ),
	( "__nr_readers", ctypes.c_uint ),
	( "__readers_wakeup", ctypes.c_uint ),
	( "__writer_wakeup", ctypes.c_uint ),
	( "__nr_readers_queued", ctypes.c_uint ),
	( "__nr_writers_queued", ctypes.c_uint ),
	( "__flags", ctypes.c_ubyte ),
	( "__shared", ctypes.c_ubyte ),
	( "__pad1", ctypes.c_ubyte ),
	( "__pad2", ctypes.c_ubyte ),
	( "__writer", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_cond_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 48 ) ),
	( "__align", ctypes.c_longlong ),
])

__freeze_rpythonic_struct( pthread_condattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( pthread_rwlock_t, [
	( "__data", __data ),
	( "__size", ( ctypes.c_char * 32 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_rwlockattr_t, [
	( "__size", ( ctypes.c_char * 8 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrier_t, [
	( "__size", ( ctypes.c_char * 20 ) ),
	( "__align", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( pthread_barrierattr_t, [
	( "__size", ( ctypes.c_char * 4 ) ),
	( "__align", ctypes.c_int ),
])

__freeze_rpythonic_struct( random_data, [
	( "fptr", ctypes.POINTER(ctypes.c_int32) ),
	( "rptr", ctypes.POINTER(ctypes.c_int32) ),
	( "state", ctypes.POINTER(ctypes.c_int32) ),
	( "rand_type", ctypes.c_int ),
	( "rand_deg", ctypes.c_int ),
	( "rand_sep", ctypes.c_int ),
	( "end_ptr", ctypes.POINTER(ctypes.c_int32) ),
])

__freeze_rpythonic_struct( drand48_data, [
	( "__x", ( ctypes.c_uint16 * 3 ) ),
	( "__old_x", ( ctypes.c_uint16 * 3 ) ),
	( "__c", ctypes.c_uint16 ),
	( "__init", ctypes.c_uint16 ),
	( "__a", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( sigval, [
	( "sival_int", ctypes.c_int ),
	( "sival_ptr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _kill, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _timer, [
	( "si_tid", ctypes.c_int ),
	( "si_overrun", ctypes.c_int ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _rt, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_sigval", sigval ),
])

__freeze_rpythonic_struct( _sigchld, [
	( "si_pid", ctypes.c_int ),
	( "si_uid", ctypes.c_uint ),
	( "si_status", ctypes.c_int ),
	( "si_utime", ctypes.c_int64 ),
	( "si_stime", ctypes.c_int64 ),
])

__freeze_rpythonic_struct( _sigfault, [
	( "si_addr", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigpoll, [
	( "si_band", ctypes.c_int64 ),
	( "si_fd", ctypes.c_int ),
])

__freeze_rpythonic_struct( _sifields, [
	( "_pad", ctypes.c_int ),
	( "_kill", _kill ),
	( "_timer", _timer ),
	( "_rt", _rt ),
	( "_sigchld", _sigchld ),
	( "_sigfault", _sigfault ),
	( "_sigpoll", _sigpoll ),
])

__freeze_rpythonic_struct( siginfo, [
	( "si_signo", ctypes.c_int ),
	( "si_errno", ctypes.c_int ),
	( "si_code", ctypes.c_int ),
	( "_sifields", _sifields ),
])

__freeze_rpythonic_struct( _sigev_thread, [
	( "_function", ctypes.c_void_p ),
	( "_attribute", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( _sigev_un, [
	( "_pad", ctypes.c_int ),
	( "_tid", ctypes.c_int ),
	( "_sigev_thread", _sigev_thread ),
])

__freeze_rpythonic_struct( sigevent, [
	( "sigev_value", sigval ),
	( "sigev_signo", ctypes.c_int ),
	( "sigev_notify", ctypes.c_int ),
	( "_sigev_un", _sigev_un ),
])

__freeze_rpythonic_struct( __sigaction_handler, [
	( "sa_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sa_sigaction", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigaction, [
	( "__sigaction_handler", __sigaction_handler ),
	( "sa_mask", __sigset_t ),
	( "sa_flags", ctypes.c_int ),
	( "sa_restorer", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( sigvec, [
	( "sv_handler", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,) ),
	( "sv_mask", ctypes.c_int ),
	( "sv_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( _fpreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
])

__freeze_rpythonic_struct( _fpxreg, [
	( "significand", ( ctypes.c_ushort * 4 ) ),
	( "exponent", ctypes.c_ushort ),
	( "padding", ( ctypes.c_ushort * 3 ) ),
])

__freeze_rpythonic_struct( _xmmreg, [
	( "element", ( ctypes.c_uint * 4 ) ),
])

__freeze_rpythonic_struct( _fpstate, [
	( "cw", ctypes.c_uint ),
	( "sw", ctypes.c_uint ),
	( "tag", ctypes.c_uint ),
	( "ipoff", ctypes.c_uint ),
	( "cssel", ctypes.c_uint ),
	( "dataoff", ctypes.c_uint ),
	( "datasel", ctypes.c_uint ),
	( "_st", ( _fpreg * 8 ) ),
	( "status", ctypes.c_ushort ),
	( "magic", ctypes.c_ushort ),
	( "_fxsr_env", ( ctypes.c_uint * 6 ) ),
	( "mxcsr", ctypes.c_uint ),
	( "reserved", ctypes.c_uint ),
	( "_fxsr_st", ( _fpxreg * 8 ) ),
	( "_xmm", ( _xmmreg * 8 ) ),
	( "padding", ( ctypes.c_uint * 56 ) ),
])

__freeze_rpythonic_struct( sigcontext, [
	( "gs", ctypes.c_ushort ),
	( "__gsh", ctypes.c_ushort ),
	( "fs", ctypes.c_ushort ),
	( "__fsh", ctypes.c_ushort ),
	( "es", ctypes.c_ushort ),
	( "__esh", ctypes.c_ushort ),
	( "ds", ctypes.c_ushort ),
	( "__dsh", ctypes.c_ushort ),
	( "edi", ctypes.c_ulong ),
	( "esi", ctypes.c_ulong ),
	( "ebp", ctypes.c_ulong ),
	( "esp", ctypes.c_ulong ),
	( "ebx", ctypes.c_ulong ),
	( "edx", ctypes.c_ulong ),
	( "ecx", ctypes.c_ulong ),
	( "eax", ctypes.c_ulong ),
	( "trapno", ctypes.c_ulong ),
	( "err", ctypes.c_ulong ),
	( "eip", ctypes.c_ulong ),
	( "cs", ctypes.c_ushort ),
	( "__csh", ctypes.c_ushort ),
	( "eflags", ctypes.c_ulong ),
	( "esp_at_signal", ctypes.c_ulong ),
	( "ss", ctypes.c_ushort ),
	( "__ssh", ctypes.c_ushort ),
	( "fpstate", ctypes.POINTER(_fpstate) ),
	( "oldmask", ctypes.c_ulong ),
	( "cr2", ctypes.c_ulong ),
])

__freeze_rpythonic_struct( sigstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_onstack", ctypes.c_int ),
])

__freeze_rpythonic_struct( sigaltstack, [
	( "ss_sp", ctypes.POINTER(ctypes.c_void_p) ),
	( "ss_flags", ctypes.c_int ),
	( "ss_size", ctypes.c_uint ),
])

__freeze_rpythonic_struct( _libc_fpreg, [
	( "significand", ( ctypes.c_uint16 * 4 ) ),
	( "exponent", ctypes.c_uint16 ),
])

__freeze_rpythonic_struct( _libc_fpstate, [
	( "cw", ctypes.c_uint64 ),
	( "sw", ctypes.c_uint64 ),
	( "tag", ctypes.c_uint64 ),
	( "ipoff", ctypes.c_uint64 ),
	( "cssel", ctypes.c_uint64 ),
	( "dataoff", ctypes.c_uint64 ),
	( "datasel", ctypes.c_uint64 ),
	( "_st", ( _libc_fpreg * 8 ) ),
	( "status", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( mcontext_t, [
	( "gregs", ( ctypes.c_int * 19 ) ),
	( "fpregs", ctypes.POINTER(_libc_fpstate) ),
	( "oldmask", ctypes.c_uint64 ),
	( "cr2", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( ucontext, [
	( "uc_flags", ctypes.c_uint64 ),
	( "uc_link", ctypes.POINTER(ucontext) ),
	( "uc_stack", sigaltstack ),
	( "uc_mcontext", mcontext_t ),
	( "uc_sigmask", __sigset_t ),
	( "__fpregs_mem", _libc_fpstate ),
])

__freeze_rpythonic_struct( __value, [
	( "__wch", ctypes.c_uint ),
	( "__wchb", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( __mbstate_t, [
	( "__count", ctypes.c_int ),
	( "__value", __value ),
])

__freeze_rpythonic_struct( _G_fpos_t, [
	( "__pos", ctypes.c_int64 ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _G_fpos64_t, [
	( "__pos", ctypes.c_longlong ),
	( "__state", __mbstate_t ),
])

__freeze_rpythonic_struct( _IO_jump_t, [
])

__freeze_rpythonic_struct( _IO_marker, [
	( "_next", ctypes.POINTER(_IO_marker) ),
	( "_sbuf", ctypes.POINTER(_IO_FILE) ),
	( "_pos", ctypes.c_int ),
])

__freeze_rpythonic_struct( _IO_FILE, [
	( "_flags", ctypes.c_int ),
	( "_IO_read_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_read_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_ptr", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_write_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_buf_end", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_backup_base", ctypes.POINTER(ctypes.c_char) ),
	( "_IO_save_end", ctypes.POINTER(ctypes.c_char) ),
	( "_markers", ctypes.POINTER(_IO_marker) ),
	( "_chain", ctypes.POINTER(_IO_FILE) ),
	( "_fileno", ctypes.c_int ),
	( "_flags2", ctypes.c_int ),
	( "_old_offset", ctypes.c_int64 ),
	( "_cur_column", ctypes.c_ushort ),
	( "_vtable_offset", ctypes.c_char ),
	( "_shortbuf", ( ctypes.c_char * 1 ) ),
	( "_lock", ctypes.POINTER(ctypes.c_void_p) ),
	( "_offset", ctypes.c_longlong ),
	( "__pad1", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad2", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad3", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad4", ctypes.POINTER(ctypes.c_void_p) ),
	( "__pad5", ctypes.c_uint ),
	( "_mode", ctypes.c_int ),
	( "_unused2", ctypes.c_char ),
])

__freeze_rpythonic_struct( _IO_FILE_plus, [
])

__freeze_rpythonic_struct( _IO_cookie_io_functions_t, [
	( "read", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_uint,) ),
	( "write", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.c_uint,) ),
	( "seek", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_longlong),ctypes.c_int,) ),
	( "close", ctypes.CFUNCTYPE(ctypes.c_int, ) ),
])

__freeze_rpythonic_struct( _IO_cookie_file, [
])

__freeze_rpythonic_struct( obstack, [
])

__freeze_rpythonic_struct( iovec, [
	( "iov_base", ctypes.POINTER(ctypes.c_void_p) ),
	( "iov_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( sockaddr, [
	( "sa_family", ctypes.c_uint16 ),
	( "sa_data", ( ctypes.c_char * 14 ) ),
])

__freeze_rpythonic_struct( sockaddr_storage, [
	( "ss_family", ctypes.c_uint16 ),
	( "__ss_align", ctypes.c_uint64 ),
	( "__ss_padding", ctypes.c_char ),
])

__freeze_rpythonic_struct( msghdr, [
	( "msg_name", ctypes.POINTER(ctypes.c_void_p) ),
	( "msg_namelen", ctypes.c_uint ),
	( "msg_iov", ctypes.POINTER(iovec) ),
	( "msg_iovlen", ctypes.c_uint ),
	( "msg_control", ctypes.POINTER(ctypes.c_void_p) ),
	( "msg_controllen", ctypes.c_uint ),
	( "msg_flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( mmsghdr, [
	( "msg_hdr", msghdr ),
	( "msg_len", ctypes.c_uint ),
])

__freeze_rpythonic_struct( cmsghdr, [
	( "cmsg_len", ctypes.c_uint ),
	( "cmsg_level", ctypes.c_int ),
	( "cmsg_type", ctypes.c_int ),
	( "__cmsg_data", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( ucred, [
	( "pid", ctypes.c_int ),
	( "uid", ctypes.c_uint ),
	( "gid", ctypes.c_uint ),
])

__freeze_rpythonic_struct( linger, [
	( "l_onoff", ctypes.c_int ),
	( "l_linger", ctypes.c_int ),
])

__freeze_rpythonic_struct( osockaddr, [
	( "sa_family", ctypes.c_uint16 ),
	( "sa_data", ( ctypes.c_ubyte * 14 ) ),
])

__freeze_rpythonic_struct( sockaddr_at, [
])

__freeze_rpythonic_struct( sockaddr_ax25, [
])

__freeze_rpythonic_struct( sockaddr_dl, [
])

__freeze_rpythonic_struct( sockaddr_eon, [
])

__freeze_rpythonic_struct( in_addr, [
	( "s_addr", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( sockaddr_in, [
	( "sin_family", ctypes.c_uint16 ),
	( "sin_port", ctypes.c_uint16 ),
	( "sin_addr", in_addr ),
	( "sin_zero", ctypes.c_ubyte ),
])

__freeze_rpythonic_struct( __in6_u, [
	( "__u6_addr8", ( ctypes.c_uint8 * 16 ) ),
	( "__u6_addr16", ( ctypes.c_uint16 * 8 ) ),
	( "__u6_addr32", ( ctypes.c_uint32 * 4 ) ),
])

__freeze_rpythonic_struct( in6_addr, [
	( "__in6_u", __in6_u ),
])

__freeze_rpythonic_struct( sockaddr_in6, [
	( "sin6_family", ctypes.c_uint16 ),
	( "sin6_port", ctypes.c_uint16 ),
	( "sin6_flowinfo", ctypes.c_uint32 ),
	( "sin6_addr", in6_addr ),
	( "sin6_scope_id", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( sockaddr_inarp, [
])

__freeze_rpythonic_struct( sockaddr_ipx, [
])

__freeze_rpythonic_struct( sockaddr_iso, [
])

__freeze_rpythonic_struct( sockaddr_ns, [
])

__freeze_rpythonic_struct( sockaddr_un, [
])

__freeze_rpythonic_struct( sockaddr_x25, [
])

__freeze_rpythonic_struct( __SOCKADDR_ARG, [
	( "__sockaddr__", ctypes.POINTER(sockaddr) ),
	( "__sockaddr_at__", ctypes.POINTER(sockaddr_at) ),
	( "__sockaddr_ax25__", ctypes.POINTER(sockaddr_ax25) ),
	( "__sockaddr_dl__", ctypes.POINTER(sockaddr_dl) ),
	( "__sockaddr_eon__", ctypes.POINTER(sockaddr_eon) ),
	( "__sockaddr_in__", ctypes.POINTER(sockaddr_in) ),
	( "__sockaddr_in6__", ctypes.POINTER(sockaddr_in6) ),
	( "__sockaddr_inarp__", ctypes.POINTER(sockaddr_inarp) ),
	( "__sockaddr_ipx__", ctypes.POINTER(sockaddr_ipx) ),
	( "__sockaddr_iso__", ctypes.POINTER(sockaddr_iso) ),
	( "__sockaddr_ns__", ctypes.POINTER(sockaddr_ns) ),
	( "__sockaddr_un__", ctypes.POINTER(sockaddr_un) ),
	( "__sockaddr_x25__", ctypes.POINTER(sockaddr_x25) ),
])

__freeze_rpythonic_struct( __CONST_SOCKADDR_ARG, [
	( "__sockaddr__", ctypes.POINTER(sockaddr) ),
	( "__sockaddr_at__", ctypes.POINTER(sockaddr_at) ),
	( "__sockaddr_ax25__", ctypes.POINTER(sockaddr_ax25) ),
	( "__sockaddr_dl__", ctypes.POINTER(sockaddr_dl) ),
	( "__sockaddr_eon__", ctypes.POINTER(sockaddr_eon) ),
	( "__sockaddr_in__", ctypes.POINTER(sockaddr_in) ),
	( "__sockaddr_in6__", ctypes.POINTER(sockaddr_in6) ),
	( "__sockaddr_inarp__", ctypes.POINTER(sockaddr_inarp) ),
	( "__sockaddr_ipx__", ctypes.POINTER(sockaddr_ipx) ),
	( "__sockaddr_iso__", ctypes.POINTER(sockaddr_iso) ),
	( "__sockaddr_ns__", ctypes.POINTER(sockaddr_ns) ),
	( "__sockaddr_un__", ctypes.POINTER(sockaddr_un) ),
	( "__sockaddr_x25__", ctypes.POINTER(sockaddr_x25) ),
])

__freeze_rpythonic_struct( ip_mreq, [
	( "imr_multiaddr", in_addr ),
	( "imr_interface", in_addr ),
])

__freeze_rpythonic_struct( ip_mreq_source, [
	( "imr_multiaddr", in_addr ),
	( "imr_interface", in_addr ),
	( "imr_sourceaddr", in_addr ),
])

__freeze_rpythonic_struct( ipv6_mreq, [
	( "ipv6mr_multiaddr", in6_addr ),
	( "ipv6mr_interface", ctypes.c_uint ),
])

__freeze_rpythonic_struct( group_req, [
	( "gr_interface", ctypes.c_uint32 ),
	( "gr_group", sockaddr_storage ),
])

__freeze_rpythonic_struct( group_source_req, [
	( "gsr_interface", ctypes.c_uint32 ),
	( "gsr_group", sockaddr_storage ),
	( "gsr_source", sockaddr_storage ),
])

__freeze_rpythonic_struct( ip_msfilter, [
	( "imsf_multiaddr", in_addr ),
	( "imsf_interface", in_addr ),
	( "imsf_fmode", ctypes.c_uint32 ),
	( "imsf_numsrc", ctypes.c_uint32 ),
	( "imsf_slist", ( in_addr * 1 ) ),
])

__freeze_rpythonic_struct( group_filter, [
	( "gf_interface", ctypes.c_uint32 ),
	( "gf_group", sockaddr_storage ),
	( "gf_fmode", ctypes.c_uint32 ),
	( "gf_numsrc", ctypes.c_uint32 ),
	( "gf_slist", ( sockaddr_storage * 1 ) ),
])

__freeze_rpythonic_struct( ip_opts, [
	( "ip_dst", in_addr ),
	( "ip_opts", ( ctypes.c_char * 40 ) ),
])

__freeze_rpythonic_struct( ip_mreqn, [
	( "imr_multiaddr", in_addr ),
	( "imr_address", in_addr ),
	( "imr_ifindex", ctypes.c_int ),
])

__freeze_rpythonic_struct( in_pktinfo, [
	( "ipi_ifindex", ctypes.c_int ),
	( "ipi_spec_dst", in_addr ),
	( "ipi_addr", in_addr ),
])

__freeze_rpythonic_struct( in6_pktinfo, [
	( "ipi6_addr", in6_addr ),
	( "ipi6_ifindex", ctypes.c_uint ),
])

__freeze_rpythonic_struct( ip6_mtuinfo, [
	( "ip6m_addr", sockaddr_in6 ),
	( "ip6m_mtu", ctypes.c_uint32 ),
])

__freeze_rpythonic_struct( bArgs, [
])

__freeze_rpythonic_struct( sched_param, [
	( "__sched_priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( __sched_param, [
	( "__sched_priority", ctypes.c_int ),
])

__freeze_rpythonic_struct( cpu_set_t, [
	( "__bits", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( tm, [
	( "tm_sec", ctypes.c_int ),
	( "tm_min", ctypes.c_int ),
	( "tm_hour", ctypes.c_int ),
	( "tm_mday", ctypes.c_int ),
	( "tm_mon", ctypes.c_int ),
	( "tm_year", ctypes.c_int ),
	( "tm_wday", ctypes.c_int ),
	( "tm_yday", ctypes.c_int ),
	( "tm_isdst", ctypes.c_int ),
	( "tm_gmtoff", ctypes.c_int64 ),
	( "tm_zone", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( itimerspec, [
	( "it_interval", timespec ),
	( "it_value", timespec ),
])

__freeze_rpythonic_struct( _pthread_cleanup_buffer, [
	( "__routine", ctypes.c_void_p ),
	( "__arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "__canceltype", ctypes.c_int ),
	( "__prev", ctypes.POINTER(_pthread_cleanup_buffer) ),
])

__freeze_rpythonic_struct( __cancel_jmp_buf, [
	( "__cancel_jmp_buf", ( ctypes.c_int * 7 ) ),
	( "__mask_was_saved", ( ctypes.c_int * 1 ) ),
])

__freeze_rpythonic_struct( __pthread_unwind_buf_t, [
	( "__cancel_jmp_buf", ( __cancel_jmp_buf * 1 ) ),
	( "__pad", ctypes.POINTER(( ctypes.c_void_p * 4 )) ),
])

__freeze_rpythonic_struct( __pthread_cleanup_frame, [
	( "__cancel_routine", ctypes.c_void_p ),
	( "__cancel_arg", ctypes.POINTER(ctypes.c_void_p) ),
	( "__do_it", ctypes.c_int ),
	( "__cancel_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( __jmp_buf_tag, [
])

__freeze_rpythonic_struct( ThreadedWorker, [
])

__freeze_rpythonic_struct( ThreadQueue, [
])

__freeze_rpythonic_struct( EditVert, [
])

__freeze_rpythonic_struct( EditEdge, [
])

__freeze_rpythonic_struct( Link, [
	( "next", ctypes.POINTER(Link) ),
	( "prev", ctypes.POINTER(Link) ),
])

__freeze_rpythonic_struct( LinkData, [
	( "next", ctypes.POINTER(LinkData) ),
	( "prev", ctypes.POINTER(LinkData) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( ListBase, [
	( "first", ctypes.POINTER(ctypes.c_void_p) ),
	( "last", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( stat, [
	( "st_dev", ctypes.c_ulonglong ),
	( "__pad1", ctypes.c_uint16 ),
	( "st_ino", ctypes.c_uint64 ),
	( "st_mode", ctypes.c_uint ),
	( "st_nlink", ctypes.c_uint ),
	( "st_uid", ctypes.c_uint ),
	( "st_gid", ctypes.c_uint ),
	( "st_rdev", ctypes.c_ulonglong ),
	( "__pad2", ctypes.c_uint16 ),
	( "st_size", ctypes.c_int64 ),
	( "st_blksize", ctypes.c_int64 ),
	( "st_blocks", ctypes.c_int64 ),
	( "st_atim", timespec ),
	( "st_mtim", timespec ),
	( "st_ctim", timespec ),
	( "__unused4", ctypes.c_uint64 ),
	( "__unused5", ctypes.c_uint64 ),
])

__freeze_rpythonic_struct( stat64, [
	( "st_dev", ctypes.c_ulonglong ),
	( "__pad1", ctypes.c_uint ),
	( "__st_ino", ctypes.c_uint64 ),
	( "st_mode", ctypes.c_uint ),
	( "st_nlink", ctypes.c_uint ),
	( "st_uid", ctypes.c_uint ),
	( "st_gid", ctypes.c_uint ),
	( "st_rdev", ctypes.c_ulonglong ),
	( "__pad2", ctypes.c_uint ),
	( "st_size", ctypes.c_longlong ),
	( "st_blksize", ctypes.c_int64 ),
	( "st_blocks", ctypes.c_longlong ),
	( "st_atim", timespec ),
	( "st_mtim", timespec ),
	( "st_ctim", timespec ),
	( "st_ino", ctypes.c_ulonglong ),
])

__freeze_rpythonic_struct( ImMetaData, [
])

__freeze_rpythonic_struct( MEM_CacheLimiterHandle_s, [
])

__freeze_rpythonic_struct( ImBuf, [
	( "next", ctypes.POINTER(ImBuf) ),
	( "prev", ctypes.POINTER(ImBuf) ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "planes", ctypes.c_ubyte ),
	( "channels", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "mall", ctypes.c_int ),
	( "rect", ctypes.POINTER(ctypes.c_uint) ),
	( "rect_float", ctypes.POINTER(ctypes.c_float) ),
	( "ppm", ( ctypes.c_double * 2 ) ),
	( "tilex", ctypes.c_int ),
	( "tiley", ctypes.c_int ),
	( "xtiles", ctypes.c_int ),
	( "ytiles", ctypes.c_int ),
	( "tiles", ctypes.POINTER(ctypes.POINTER(ctypes.c_uint)) ),
	( "zbuf", ctypes.POINTER(ctypes.c_int) ),
	( "zbuf_float", ctypes.POINTER(ctypes.c_float) ),
	( "dither", ctypes.c_float ),
	( "profile", ctypes.c_short ),
	( "mipmap", ctypes.POINTER(( ImBuf * 20 )) ),
	( "miptot", ctypes.c_int ),
	( "miplevel", ctypes.c_int ),
	( "index", ctypes.c_int ),
	( "userflags", ctypes.c_int ),
	( "metadata", ctypes.POINTER(ImMetaData) ),
	( "userdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "ftype", ctypes.c_int ),
	( "name", ( ctypes.c_char * 1023 ) ),
	( "cachename", ( ctypes.c_char * 1023 ) ),
	( "c_handle", ctypes.POINTER(MEM_CacheLimiterHandle_s) ),
	( "refcounter", ctypes.c_int ),
	( "encodedbuffer", ctypes.POINTER(ctypes.c_ubyte) ),
	( "encodedsize", ctypes.c_uint ),
	( "encodedbuffersize", ctypes.c_uint ),
])

__freeze_rpythonic_struct( direntry, [
	( "string", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_uint ),
	( "relname", ctypes.POINTER(ctypes.c_char) ),
	( "path", ctypes.POINTER(ctypes.c_char) ),
	( "s", stat ),
	( "flags", ctypes.c_uint ),
	( "size", ( ctypes.c_char * 16 ) ),
	( "mode1", ( ctypes.c_char * 4 ) ),
	( "mode2", ( ctypes.c_char * 4 ) ),
	( "mode3", ( ctypes.c_char * 4 ) ),
	( "owner", ( ctypes.c_char * 16 ) ),
	( "time", ( ctypes.c_char * 8 ) ),
	( "date", ( ctypes.c_char * 16 ) ),
	( "extra", ( ctypes.c_char * 16 ) ),
	( "poin", ctypes.POINTER(ctypes.c_void_p) ),
	( "nr", ctypes.c_int ),
	( "image", ctypes.POINTER(ImBuf) ),
	( "selflag", ctypes.c_uint ),
])

__freeze_rpythonic_struct( dirlink, [
	( "next", ctypes.POINTER(dirlink) ),
	( "prev", ctypes.POINTER(dirlink) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( LinkNode, [
])

__freeze_rpythonic_struct( Entry, [
	( "next", ctypes.POINTER(Entry) ),
	( "key", ctypes.POINTER(ctypes.c_void_p) ),
	( "val", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( BLI_mempool, [
])

__freeze_rpythonic_struct( GHash, [
	( "hashfp", ctypes.CFUNCTYPE(ctypes.c_uint, ) ),
	( "cmpfp", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),) ),
	( "buckets", ctypes.POINTER(ctypes.POINTER(Entry)) ),
	( "entrypool", ctypes.POINTER(BLI_mempool) ),
	( "nbuckets", ctypes.c_int ),
	( "nentries", ctypes.c_int ),
	( "cursize", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHashIterator, [
	( "gh", ctypes.POINTER(GHash) ),
	( "curBucket", ctypes.c_int ),
	( "curEntry", ctypes.POINTER(Entry) ),
])

__freeze_rpythonic_struct( GHashPair, [
	( "first", ctypes.POINTER(ctypes.c_void_p) ),
	( "second", ctypes.c_int ),
])

__freeze_rpythonic_struct( exception, [
	( "C_type", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "arg1", ctypes.c_double ),
	( "arg2", ctypes.c_double ),
	( "retval", ctypes.c_double ),
])

__freeze_rpythonic_struct( DualQuat, [
	( "quat", ( ctypes.c_float * 4 ) ),
	( "trans", ( ctypes.c_float * 4 ) ),
	( "scale", ( ctypes.c_float * 4 ) ),
	( "scale_weight", ctypes.c_float ),
])

__freeze_rpythonic_struct( VertexTangent, [
	( "next", ctypes.POINTER(VertexTangent) ),
	( "tang", ( ctypes.c_float * 3 ) ),
	( "uv", ( ctypes.c_float * 2 ) ),
])

__freeze_rpythonic_struct( FileData, [
])

__freeze_rpythonic_struct( IDPropertyData, [
	( "pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "group", ListBase ),
	( "val", ctypes.c_int ),
	( "val2", ctypes.c_int ),
])

__freeze_rpythonic_struct( IDProperty, [
	( "next", ctypes.POINTER(IDProperty) ),
	( "prev", ctypes.POINTER(IDProperty) ),
	( "C_type", ctypes.c_char ),
	( "subtype", ctypes.c_char ),
	( "flag", ctypes.c_short ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "saved", ctypes.c_int ),
	( "data", IDPropertyData ),
	( "C_len", ctypes.c_int ),
	( "totallen", ctypes.c_int ),
])

__freeze_rpythonic_struct( ID, [
	( "next", ctypes.POINTER(ctypes.c_void_p) ),
	( "prev", ctypes.POINTER(ctypes.c_void_p) ),
	( "newid", ctypes.POINTER(ID) ),
	( "lib", ctypes.POINTER(Library) ),
	( "name", ( ctypes.c_char * 24 ) ),
	( "us", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "icon_id", ctypes.c_int ),
	( "properties", ctypes.POINTER(IDProperty) ),
])

__freeze_rpythonic_struct( Library, [
	( "C_id", ID ),
	( "idblock", ctypes.POINTER(ID) ),
	( "filedata", ctypes.POINTER(FileData) ),
	( "name", ( ctypes.c_char * 240 ) ),
	( "filepath", ( ctypes.c_char * 240 ) ),
	( "tot", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "parent", ctypes.POINTER(Library) ),
])

__freeze_rpythonic_struct( PreviewImage, [
	( "w", ( ctypes.c_uint * 2 ) ),
	( "h", ( ctypes.c_uint * 2 ) ),
	( "changed", ( ctypes.c_short * 2 ) ),
	( "changed_timestamp", ( ctypes.c_short * 2 ) ),
	( "rect", ctypes.POINTER(( ctypes.c_uint * 2 )) ),
])

__freeze_rpythonic_struct( vec2s, [
	( "x", ctypes.c_short ),
	( "y", ctypes.c_short ),
])

__freeze_rpythonic_struct( vec2f, [
	( "x", ctypes.c_float ),
	( "y", ctypes.c_float ),
])

__freeze_rpythonic_struct( rcti, [
	( "xmin", ctypes.c_int ),
	( "xmax", ctypes.c_int ),
	( "ymin", ctypes.c_int ),
	( "ymax", ctypes.c_int ),
])

__freeze_rpythonic_struct( rctf, [
	( "xmin", ctypes.c_float ),
	( "xmax", ctypes.c_float ),
	( "ymin", ctypes.c_float ),
	( "ymax", ctypes.c_float ),
])

__freeze_rpythonic_struct( Object, [
])

__freeze_rpythonic_struct( Brush, [
])

__freeze_rpythonic_struct( World, [
])

__freeze_rpythonic_struct( Group, [
])

__freeze_rpythonic_struct( Text, [
])

__freeze_rpythonic_struct( bNodeTree, [
])

__freeze_rpythonic_struct( AnimData, [
])

__freeze_rpythonic_struct( Editing, [
])

__freeze_rpythonic_struct( SceneStats, [
])

__freeze_rpythonic_struct( bGPdata, [
])

__freeze_rpythonic_struct( Base, [
	( "next", ctypes.POINTER(Base) ),
	( "prev", ctypes.POINTER(Base) ),
	( "lay", ctypes.c_uint ),
	( "selcol", ctypes.c_uint ),
	( "flag", ctypes.c_int ),
	( "sx", ctypes.c_short ),
	( "sy", ctypes.c_short ),
	( "C_object", ctypes.POINTER(Object) ),
])

__freeze_rpythonic_struct( AviCodecData, [
	( "lpFormat", ctypes.POINTER(ctypes.c_void_p) ),
	( "lpParms", ctypes.POINTER(ctypes.c_void_p) ),
	( "cbFormat", ctypes.c_uint ),
	( "cbParms", ctypes.c_uint ),
	( "fccType", ctypes.c_uint ),
	( "fccHandler", ctypes.c_uint ),
	( "dwKeyFrameEvery", ctypes.c_uint ),
	( "dwQuality", ctypes.c_uint ),
	( "dwBytesPerSecond", ctypes.c_uint ),
	( "dwFlags", ctypes.c_uint ),
	( "dwInterleaveEvery", ctypes.c_uint ),
	( "pad", ctypes.c_uint ),
	( "avicodecname", ( ctypes.c_char * 128 ) ),
])

__freeze_rpythonic_struct( QuicktimeCodecData, [
	( "cdParms", ctypes.POINTER(ctypes.c_void_p) ),
	( "pad", ctypes.POINTER(ctypes.c_void_p) ),
	( "cdSize", ctypes.c_uint ),
	( "pad2", ctypes.c_uint ),
	( "qtcodecname", ( ctypes.c_char * 128 ) ),
])

__freeze_rpythonic_struct( QuicktimeCodecSettings, [
	( "codecType", ctypes.c_int ),
	( "codecSpatialQuality", ctypes.c_int ),
	( "codec", ctypes.c_int ),
	( "codecFlags", ctypes.c_int ),
	( "colorDepth", ctypes.c_int ),
	( "codecTemporalQuality", ctypes.c_int ),
	( "minSpatialQuality", ctypes.c_int ),
	( "minTemporalQuality", ctypes.c_int ),
	( "keyFrameRate", ctypes.c_int ),
	( "bitRate", ctypes.c_int ),
	( "audiocodecType", ctypes.c_int ),
	( "audioSampleRate", ctypes.c_int ),
	( "audioBitDepth", ctypes.c_short ),
	( "audioChannels", ctypes.c_short ),
	( "audioCodecFlags", ctypes.c_int ),
	( "audioBitRate", ctypes.c_int ),
	( "pad1", ctypes.c_int ),
])

__freeze_rpythonic_struct( FFMpegCodecData, [
	( "C_type", ctypes.c_int ),
	( "codec", ctypes.c_int ),
	( "audio_codec", ctypes.c_int ),
	( "video_bitrate", ctypes.c_int ),
	( "audio_bitrate", ctypes.c_int ),
	( "audio_mixrate", ctypes.c_int ),
	( "audio_channels", ctypes.c_int ),
	( "audio_pad", ctypes.c_int ),
	( "audio_volume", ctypes.c_float ),
	( "gop_size", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "rc_min_rate", ctypes.c_int ),
	( "rc_max_rate", ctypes.c_int ),
	( "rc_buffer_size", ctypes.c_int ),
	( "mux_packet_size", ctypes.c_int ),
	( "mux_rate", ctypes.c_int ),
	( "properties", ctypes.POINTER(IDProperty) ),
])

__freeze_rpythonic_struct( AudioData, [
	( "mixrate", ctypes.c_int ),
	( "main", ctypes.c_float ),
	( "speed_of_sound", ctypes.c_float ),
	( "doppler_factor", ctypes.c_float ),
	( "distance_model", ctypes.c_int ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "volume", ctypes.c_float ),
	( "pad2", ctypes.c_float ),
])

__freeze_rpythonic_struct( Material, [
])

__freeze_rpythonic_struct( SceneRenderLayer, [
	( "next", ctypes.POINTER(SceneRenderLayer) ),
	( "prev", ctypes.POINTER(SceneRenderLayer) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "mat_override", ctypes.POINTER(Material) ),
	( "light_override", ctypes.POINTER(Group) ),
	( "lay", ctypes.c_uint ),
	( "lay_zmask", ctypes.c_uint ),
	( "layflag", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "passflag", ctypes.c_int ),
	( "pass_xor", ctypes.c_int ),
])

__freeze_rpythonic_struct( ImageFormatData, [
	( "imtype", ctypes.c_char ),
	( "depth", ctypes.c_char ),
	( "planes", ctypes.c_char ),
	( "flag", ctypes.c_char ),
	( "quality", ctypes.c_char ),
	( "compress", ctypes.c_char ),
	( "exr_codec", ctypes.c_char ),
	( "cineon_flag", ctypes.c_char ),
	( "cineon_white", ctypes.c_short ),
	( "cineon_black", ctypes.c_short ),
	( "cineon_gamma", ctypes.c_float ),
	( "jp2_flag", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 7 ) ),
])

__freeze_rpythonic_struct( RenderData, [
	( "im_format", ImageFormatData ),
	( "avicodecdata", ctypes.POINTER(AviCodecData) ),
	( "qtcodecdata", ctypes.POINTER(QuicktimeCodecData) ),
	( "qtcodecsettings", QuicktimeCodecSettings ),
	( "ffcodecdata", FFMpegCodecData ),
	( "cfra", ctypes.c_int ),
	( "sfra", ctypes.c_int ),
	( "efra", ctypes.c_int ),
	( "subframe", ctypes.c_float ),
	( "psfra", ctypes.c_int ),
	( "pefra", ctypes.c_int ),
	( "images", ctypes.c_int ),
	( "framapto", ctypes.c_int ),
	( "flag", ctypes.c_short ),
	( "threads", ctypes.c_short ),
	( "framelen", ctypes.c_float ),
	( "blurfac", ctypes.c_float ),
	( "edgeR", ctypes.c_float ),
	( "edgeG", ctypes.c_float ),
	( "edgeB", ctypes.c_float ),
	( "fullscreen", ctypes.c_short ),
	( "xplay", ctypes.c_short ),
	( "yplay", ctypes.c_short ),
	( "freqplay", ctypes.c_short ),
	( "depth", ctypes.c_short ),
	( "attrib", ctypes.c_short ),
	( "frame_step", ctypes.c_int ),
	( "stereomode", ctypes.c_short ),
	( "dimensionspreset", ctypes.c_short ),
	( "filtertype", ctypes.c_short ),
	( "size", ctypes.c_short ),
	( "maximsize", ctypes.c_short ),
	( "xsch", ctypes.c_short ),
	( "ysch", ctypes.c_short ),
	( "xparts", ctypes.c_short ),
	( "yparts", ctypes.c_short ),
	( "planes", ctypes.c_short ),
	( "imtype", ctypes.c_short ),
	( "subimtype", ctypes.c_short ),
	( "quality", ctypes.c_short ),
	( "displaymode", ctypes.c_short ),
	( "scemode", ctypes.c_int ),
	( "mode", ctypes.c_int ),
	( "raytrace_options", ctypes.c_int ),
	( "raytrace_structure", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "ocres", ctypes.c_short ),
	( "pad4", ctypes.c_short ),
	( "alphamode", ctypes.c_short ),
	( "osa", ctypes.c_short ),
	( "frs_sec", ctypes.c_short ),
	( "edgeint", ctypes.c_short ),
	( "safety", rctf ),
	( "border", rctf ),
	( "disprect", rcti ),
	( "layers", ListBase ),
	( "actlay", ctypes.c_short ),
	( "mblur_samples", ctypes.c_short ),
	( "xasp", ctypes.c_float ),
	( "yasp", ctypes.c_float ),
	( "frs_sec_base", ctypes.c_float ),
	( "gauss", ctypes.c_float ),
	( "color_mgt_flag", ctypes.c_int ),
	( "postgamma", ctypes.c_float ),
	( "posthue", ctypes.c_float ),
	( "postsat", ctypes.c_float ),
	( "dither_intensity", ctypes.c_float ),
	( "bake_osa", ctypes.c_short ),
	( "bake_filter", ctypes.c_short ),
	( "bake_mode", ctypes.c_short ),
	( "bake_flag", ctypes.c_short ),
	( "bake_normal_space", ctypes.c_short ),
	( "bake_quad_split", ctypes.c_short ),
	( "bake_maxdist", ctypes.c_float ),
	( "bake_biasdist", ctypes.c_float ),
	( "bake_pad", ctypes.c_float ),
	( "pic", ( ctypes.c_char * 240 ) ),
	( "stamp", ctypes.c_int ),
	( "stamp_font_id", ctypes.c_short ),
	( "pad3", ctypes.c_short ),
	( "stamp_udata", ( ctypes.c_char * 160 ) ),
	( "fg_stamp", ( ctypes.c_float * 4 ) ),
	( "bg_stamp", ( ctypes.c_float * 4 ) ),
	( "seq_prev_type", ctypes.c_char ),
	( "seq_rend_type", ctypes.c_char ),
	( "seq_flag", ctypes.c_char ),
	( "pad5", ( ctypes.c_char * 5 ) ),
	( "simplify_flag", ctypes.c_int ),
	( "simplify_subsurf", ctypes.c_short ),
	( "simplify_shadowsamples", ctypes.c_short ),
	( "simplify_particles", ctypes.c_float ),
	( "simplify_aosss", ctypes.c_float ),
	( "cineonwhite", ctypes.c_short ),
	( "cineonblack", ctypes.c_short ),
	( "cineongamma", ctypes.c_float ),
	( "jp2_preset", ctypes.c_short ),
	( "jp2_depth", ctypes.c_short ),
	( "rpad3", ctypes.c_int ),
	( "domeres", ctypes.c_short ),
	( "domemode", ctypes.c_short ),
	( "domeangle", ctypes.c_short ),
	( "dometilt", ctypes.c_short ),
	( "domeresbuf", ctypes.c_float ),
	( "pad2", ctypes.c_float ),
	( "dometext", ctypes.POINTER(Text) ),
	( "engine", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( RenderProfile, [
	( "next", ctypes.POINTER(RenderProfile) ),
	( "prev", ctypes.POINTER(RenderProfile) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "particle_perc", ctypes.c_short ),
	( "subsurf_max", ctypes.c_short ),
	( "shadbufsample_max", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "ao_error", ctypes.c_float ),
	( "pad2", ctypes.c_float ),
])

__freeze_rpythonic_struct( GameDome, [
	( "res", ctypes.c_short ),
	( "mode", ctypes.c_short ),
	( "angle", ctypes.c_short ),
	( "tilt", ctypes.c_short ),
	( "resbuf", ctypes.c_float ),
	( "pad2", ctypes.c_float ),
	( "warptext", ctypes.POINTER(Text) ),
])

__freeze_rpythonic_struct( GameFraming, [
	( "col", ( ctypes.c_float * 3 ) ),
	( "C_type", ctypes.c_char ),
	( "pad1", ctypes.c_char ),
	( "pad2", ctypes.c_char ),
	( "pad3", ctypes.c_char ),
])

__freeze_rpythonic_struct( RecastData, [
	( "cellsize", ctypes.c_float ),
	( "cellheight", ctypes.c_float ),
	( "agentmaxslope", ctypes.c_float ),
	( "agentmaxclimb", ctypes.c_float ),
	( "agentheight", ctypes.c_float ),
	( "agentradius", ctypes.c_float ),
	( "edgemaxlen", ctypes.c_float ),
	( "edgemaxerror", ctypes.c_float ),
	( "regionminsize", ctypes.c_float ),
	( "regionmergesize", ctypes.c_float ),
	( "vertsperpoly", ctypes.c_int ),
	( "detailsampledist", ctypes.c_float ),
	( "detailsamplemaxerror", ctypes.c_float ),
	( "pad1", ctypes.c_short ),
	( "pad2", ctypes.c_short ),
])

__freeze_rpythonic_struct( GameData, [
	( "framing", GameFraming ),
	( "fullscreen", ctypes.c_short ),
	( "xplay", ctypes.c_short ),
	( "yplay", ctypes.c_short ),
	( "freqplay", ctypes.c_short ),
	( "depth", ctypes.c_short ),
	( "attrib", ctypes.c_short ),
	( "rt1", ctypes.c_short ),
	( "rt2", ctypes.c_short ),
	( "dome", GameDome ),
	( "stereoflag", ctypes.c_short ),
	( "stereomode", ctypes.c_short ),
	( "eyeseparation", ctypes.c_float ),
	( "recastData", RecastData ),
	( "gravity", ctypes.c_float ),
	( "activityBoxRadius", ctypes.c_float ),
	( "flag", ctypes.c_int ),
	( "mode", ctypes.c_short ),
	( "matmode", ctypes.c_short ),
	( "occlusionRes", ctypes.c_short ),
	( "physicsEngine", ctypes.c_short ),
	( "exitkey", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "ticrate", ctypes.c_short ),
	( "maxlogicstep", ctypes.c_short ),
	( "physubstep", ctypes.c_short ),
	( "maxphystep", ctypes.c_short ),
	( "obstacleSimulation", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "levelHeight", ctypes.c_float ),
])

__freeze_rpythonic_struct( TimeMarker, [
	( "next", ctypes.POINTER(TimeMarker) ),
	( "prev", ctypes.POINTER(TimeMarker) ),
	( "frame", ctypes.c_int ),
	( "name", ( ctypes.c_char * 64 ) ),
	( "flag", ctypes.c_uint ),
	( "camera", ctypes.POINTER(Object) ),
])

__freeze_rpythonic_struct( Paint, [
	( "brush", ctypes.POINTER(Brush) ),
	( "paint_cursor", ctypes.POINTER(ctypes.c_void_p) ),
	( "paint_cursor_col", ( ctypes.c_ubyte * 4 ) ),
	( "flags", ctypes.c_int ),
])

__freeze_rpythonic_struct( ImagePaintSettings, [
	( "paint", Paint ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "seam_bleed", ctypes.c_short ),
	( "normal_angle", ctypes.c_short ),
	( "screen_grab_size", ( ctypes.c_short * 2 ) ),
	( "pad1", ctypes.c_int ),
	( "paintcursor", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( ParticleBrushData, [
	( "size", ctypes.c_short ),
	( "step", ctypes.c_short ),
	( "invert", ctypes.c_short ),
	( "count", ctypes.c_short ),
	( "flag", ctypes.c_int ),
	( "strength", ctypes.c_float ),
])

__freeze_rpythonic_struct( MDeformVert, [
])

__freeze_rpythonic_struct( VPaint, [
	( "paint", Paint ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "tot", ctypes.c_int ),
	( "vpaint_prev", ctypes.POINTER(ctypes.c_uint) ),
	( "wpaint_prev", ctypes.POINTER(MDeformVert) ),
	( "paintcursor", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( Sculpt, [
	( "paint", Paint ),
	( "flags", ctypes.c_int ),
	( "radial_symm", ( ctypes.c_int * 3 ) ),
	( "last_x", ctypes.c_float ),
	( "last_y", ctypes.c_float ),
	( "last_angle", ctypes.c_float ),
	( "draw_anchored", ctypes.c_int ),
	( "anchored_size", ctypes.c_int ),
	( "anchored_location", ( ctypes.c_float * 3 ) ),
	( "anchored_initial_mouse", ( ctypes.c_float * 2 ) ),
	( "draw_pressure", ctypes.c_int ),
	( "pressure_value", ctypes.c_float ),
	( "special_rotation", ctypes.c_float ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( ParticleEditSettings, [
	( "flag", ctypes.c_short ),
	( "totrekey", ctypes.c_short ),
	( "totaddkey", ctypes.c_short ),
	( "brushtype", ctypes.c_short ),
	( "brush", ( ParticleBrushData * 7 ) ),
	( "paintcursor", ctypes.POINTER(ctypes.c_void_p) ),
	( "emitterdist", ctypes.c_float ),
	( "rt", ctypes.c_float ),
	( "selectmode", ctypes.c_int ),
	( "edittype", ctypes.c_int ),
	( "draw_step", ctypes.c_int ),
	( "fade_frames", ctypes.c_int ),
	( "scene", ctypes.POINTER(Scene) ),
	( "C_object", ctypes.POINTER(Object) ),
])

__freeze_rpythonic_struct( ToolSettings, [
	( "vpaint", ctypes.POINTER(VPaint) ),
	( "wpaint", ctypes.POINTER(VPaint) ),
	( "sculpt", ctypes.POINTER(Sculpt) ),
	( "vgroup_weight", ctypes.c_float ),
	( "cornertype", ctypes.c_short ),
	( "editbutflag", ctypes.c_short ),
	( "jointrilimit", ctypes.c_float ),
	( "degr", ctypes.c_float ),
	( "step", ctypes.c_short ),
	( "turn", ctypes.c_short ),
	( "extr_offs", ctypes.c_float ),
	( "doublimit", ctypes.c_float ),
	( "normalsize", ctypes.c_float ),
	( "automerge", ctypes.c_short ),
	( "selectmode", ctypes.c_short ),
	( "segments", ctypes.c_short ),
	( "rings", ctypes.c_short ),
	( "vertices", ctypes.c_short ),
	( "unwrapper", ctypes.c_short ),
	( "uvcalc_radius", ctypes.c_float ),
	( "uvcalc_cubesize", ctypes.c_float ),
	( "uvcalc_margin", ctypes.c_float ),
	( "uvcalc_mapdir", ctypes.c_short ),
	( "uvcalc_mapalign", ctypes.c_short ),
	( "uvcalc_flag", ctypes.c_short ),
	( "uv_flag", ctypes.c_short ),
	( "uv_selectmode", ctypes.c_short ),
	( "uv_pad", ctypes.c_short ),
	( "gpencil_flags", ctypes.c_short ),
	( "autoik_chainlen", ctypes.c_short ),
	( "imapaint", ImagePaintSettings ),
	( "particle", ParticleEditSettings ),
	( "proportional_size", ctypes.c_float ),
	( "select_thresh", ctypes.c_float ),
	( "clean_thresh", ctypes.c_float ),
	( "autokey_mode", ctypes.c_short ),
	( "autokey_flag", ctypes.c_short ),
	( "retopo_mode", ctypes.c_char ),
	( "retopo_paint_tool", ctypes.c_char ),
	( "line_div", ctypes.c_char ),
	( "ellipse_div", ctypes.c_char ),
	( "retopo_hotspot", ctypes.c_char ),
	( "multires_subdiv_type", ctypes.c_char ),
	( "skgen_resolution", ctypes.c_short ),
	( "skgen_threshold_internal", ctypes.c_float ),
	( "skgen_threshold_external", ctypes.c_float ),
	( "skgen_length_ratio", ctypes.c_float ),
	( "skgen_length_limit", ctypes.c_float ),
	( "skgen_angle_limit", ctypes.c_float ),
	( "skgen_correlation_limit", ctypes.c_float ),
	( "skgen_symmetry_limit", ctypes.c_float ),
	( "skgen_retarget_angle_weight", ctypes.c_float ),
	( "skgen_retarget_length_weight", ctypes.c_float ),
	( "skgen_retarget_distance_weight", ctypes.c_float ),
	( "skgen_options", ctypes.c_short ),
	( "skgen_postpro", ctypes.c_char ),
	( "skgen_postpro_passes", ctypes.c_char ),
	( "skgen_subdivisions", ( ctypes.c_char * 3 ) ),
	( "skgen_multi_level", ctypes.c_char ),
	( "skgen_template", ctypes.POINTER(Object) ),
	( "bone_sketching", ctypes.c_char ),
	( "bone_sketching_convert", ctypes.c_char ),
	( "skgen_subdivision_number", ctypes.c_char ),
	( "skgen_retarget_options", ctypes.c_char ),
	( "skgen_retarget_roll", ctypes.c_char ),
	( "skgen_side_string", ( ctypes.c_char * 8 ) ),
	( "skgen_num_string", ( ctypes.c_char * 8 ) ),
	( "edge_mode", ctypes.c_char ),
	( "edge_mode_live_unwrap", ctypes.c_char ),
	( "snap_mode", ctypes.c_char ),
	( "snap_flag", ctypes.c_short ),
	( "snap_target", ctypes.c_short ),
	( "proportional", ctypes.c_short ),
	( "prop_mode", ctypes.c_short ),
	( "proportional_objects", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 5 ) ),
	( "auto_normalize", ctypes.c_char ),
	( "multipaint", ctypes.c_char ),
	( "sculpt_paint_settings", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "sculpt_paint_unified_size", ctypes.c_int ),
	( "sculpt_paint_unified_unprojected_radius", ctypes.c_float ),
	( "sculpt_paint_unified_alpha", ctypes.c_float ),
])

__freeze_rpythonic_struct( Scene, [
	( "C_id", ID ),
	( "adt", ctypes.POINTER(AnimData) ),
	( "camera", ctypes.POINTER(Object) ),
	( "world", ctypes.POINTER(World) ),
	( "set", ctypes.POINTER(Scene) ),
	( "base", ListBase ),
	( "basact", ctypes.POINTER(Base) ),
	( "obedit", ctypes.POINTER(Object) ),
	( "cursor", ( ctypes.c_float * 3 ) ),
	( "twcent", ( ctypes.c_float * 3 ) ),
	( "twmin", ( ctypes.c_float * 3 ) ),
	( "twmax", ( ctypes.c_float * 3 ) ),
	( "lay", ctypes.c_uint ),
	( "layact", ctypes.c_int ),
	( "lay_updated", ctypes.c_uint ),
	( "customdata_mask", ctypes.c_uint ),
	( "customdata_mask_modal", ctypes.c_uint ),
	( "flag", ctypes.c_short ),
	( "use_nodes", ctypes.c_short ),
	( "nodetree", ctypes.POINTER(bNodeTree) ),
	( "ed", ctypes.POINTER(Editing) ),
	( "toolsettings", ctypes.POINTER(ToolSettings) ),
	( "stats", ctypes.POINTER(SceneStats) ),
	( "r", RenderData ),
	( "audio", AudioData ),
	( "markers", ListBase ),
	( "transform_spaces", ListBase ),
	( "sound_scene", ctypes.POINTER(ctypes.c_void_p) ),
	( "sound_scene_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "sound_scrub_handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "speaker_handles", ctypes.POINTER(ctypes.c_void_p) ),
	( "fps_info", ctypes.POINTER(ctypes.c_void_p) ),
	( "theDag", ctypes.POINTER(DagForest) ),
	( "dagisvalid", ctypes.c_short ),
	( "dagflags", ctypes.c_short ),
	( "recalc", ctypes.c_short ),
	( "pad6", ctypes.c_short ),
	( "pad5", ctypes.c_int ),
	( "active_keyingset", ctypes.c_int ),
	( "keyingsets", ListBase ),
	( "framing", GameFraming ),
	( "gm", GameData ),
	( "unit", UnitSettings ),
	( "gpd", ctypes.POINTER(bGPdata) ),
	( "physics_settings", PhysicsSettings ),
	( "clip", ctypes.POINTER(MovieClip) ),
])

__freeze_rpythonic_struct( TransformOrientation, [
	( "next", ctypes.POINTER(TransformOrientation) ),
	( "prev", ctypes.POINTER(TransformOrientation) ),
	( "name", ( ctypes.c_char * 36 ) ),
	( "mat", ( ctypes.c_float * 3 ) ),
])

__freeze_rpythonic_struct( bStats, [
	( "totobj", ctypes.c_int ),
	( "totlamp", ctypes.c_int ),
	( "totobjsel", ctypes.c_int ),
	( "totcurve", ctypes.c_int ),
	( "totmesh", ctypes.c_int ),
	( "totarmature", ctypes.c_int ),
	( "totvert", ctypes.c_int ),
	( "totface", ctypes.c_int ),
])

__freeze_rpythonic_struct( UnitSettings, [
	( "scale_length", ctypes.c_float ),
	( "system", ctypes.c_char ),
	( "system_rotation", ctypes.c_char ),
	( "flag", ctypes.c_short ),
])

__freeze_rpythonic_struct( PhysicsSettings, [
	( "gravity", ( ctypes.c_float * 3 ) ),
	( "flag", ctypes.c_int ),
	( "quick_cache_step", ctypes.c_int ),
	( "rt", ctypes.c_int ),
])

__freeze_rpythonic_struct( DagForest, [
])

__freeze_rpythonic_struct( MemFile, [
])

__freeze_rpythonic_struct( bContext, [
])

__freeze_rpythonic_struct( FunctionRNA, [
])

__freeze_rpythonic_struct( PropertyRNA, [
])

__freeze_rpythonic_struct( EnumPropertyRNA, [
])

__freeze_rpythonic_struct( StructRNA, [
])

__freeze_rpythonic_struct( BlenderRNA, [
])

__freeze_rpythonic_struct( PointerRNA, [
	( "C_id", C_id ),
	( "C_type", ctypes.POINTER(StructRNA) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( C_id, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( PropertyPointerRNA, [
	( "ptr", PointerRNA ),
	( "prop", ctypes.POINTER(PropertyRNA) ),
])

__freeze_rpythonic_struct( CollectionPropertyIterator, [
	( "parent", PointerRNA ),
	( "builtin_parent", PointerRNA ),
	( "prop", ctypes.POINTER(PropertyRNA) ),
	( "internal", ctypes.POINTER(ctypes.c_void_p) ),
	( "idprop", ctypes.c_int ),
	( "level", ctypes.c_int ),
	( "ptr", PointerRNA ),
	( "valid", ctypes.c_int ),
])

__freeze_rpythonic_struct( CollectionPointerLink, [
	( "next", ctypes.POINTER(CollectionPointerLink) ),
	( "prev", ctypes.POINTER(CollectionPointerLink) ),
	( "ptr", PointerRNA ),
])

__freeze_rpythonic_struct( RawArray, [
	( "array", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_type", ctypes.c_int ),
	( "C_len", ctypes.c_int ),
	( "stride", ctypes.c_int ),
])

__freeze_rpythonic_struct( EnumPropertyItem, [
	( "value", ctypes.c_int ),
	( "identifier", ctypes.POINTER(ctypes.c_char) ),
	( "icon", ctypes.c_int ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( ParameterList, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "func", ctypes.POINTER(FunctionRNA) ),
	( "alloc_size", ctypes.c_int ),
	( "arg_count", ctypes.c_int ),
	( "ret_count", ctypes.c_int ),
])

__freeze_rpythonic_struct( ParameterIterator, [
	( "parms", ctypes.POINTER(ParameterList) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "size", ctypes.c_int ),
	( "offset", ctypes.c_int ),
	( "parm", ctypes.POINTER(PropertyRNA) ),
	( "valid", ctypes.c_int ),
])

__freeze_rpythonic_struct( ParameterDynAlloc, [
	( "array_tot", ctypes.c_int ),
	( "array", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( ExtensionRNA, [
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
	( "srna", ctypes.POINTER(StructRNA) ),
	( "call", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(bContext),ctypes.POINTER(PointerRNA),ctypes.POINTER(FunctionRNA),ctypes.POINTER(ParameterList),) ),
	( "free", ctypes.CFUNCTYPE(ctypes.c_void_p, ) ),
])

__freeze_rpythonic_struct( EditMesh, [
])

__freeze_rpythonic_struct( bPoseChannel, [
])

__freeze_rpythonic_struct( bContextDataResult, [
])

__freeze_rpythonic_struct( bContextStoreEntry, [
	( "next", ctypes.POINTER(bContextStoreEntry) ),
	( "prev", ctypes.POINTER(bContextStoreEntry) ),
	( "name", ( ctypes.c_char * 128 ) ),
	( "ptr", PointerRNA ),
])

__freeze_rpythonic_struct( bContextStore, [
	( "next", ctypes.POINTER(bContextStore) ),
	( "prev", ctypes.POINTER(bContextStore) ),
	( "entries", ListBase ),
	( "used", ctypes.c_int ),
])

__freeze_rpythonic_struct( SpaceAction, [
])

__freeze_rpythonic_struct( VFont, [
])

__freeze_rpythonic_struct( Curve, [
])

__freeze_rpythonic_struct( objfnt, [
])

__freeze_rpythonic_struct( TmpFont, [
])

__freeze_rpythonic_struct( CharInfo, [
])

__freeze_rpythonic_struct( chartrans, [
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "rot", ctypes.c_float ),
	( "linenr", ctypes.c_short ),
	( "charnr", ctypes.c_short ),
	( "dobreak", ctypes.c_char ),
])

__freeze_rpythonic_struct( SelBox, [
	( "x", ctypes.c_float ),
	( "y", ctypes.c_float ),
	( "w", ctypes.c_float ),
	( "h", ctypes.c_float ),
])

__freeze_rpythonic_struct( EditFont, [
	( "copybuf", ctypes.POINTER(ctypes.c_int) ),
	( "copybufinfo", ctypes.POINTER(ctypes.c_int) ),
	( "textbuf", ctypes.POINTER(ctypes.c_int) ),
	( "textbufinfo", ctypes.POINTER(CharInfo) ),
	( "oldstr", ctypes.POINTER(ctypes.c_int) ),
	( "oldstrinfo", ctypes.POINTER(CharInfo) ),
	( "textcurs", ( ctypes.c_float * 4 ) ),
])

__freeze_rpythonic_struct( BME_Glob, [
])

__freeze_rpythonic_struct( Global, [
	( "main", ctypes.POINTER(Main) ),
	( "ima", ( ctypes.c_char * 256 ) ),
	( "lib", ( ctypes.c_char * 256 ) ),
	( "relbase_valid", ctypes.c_int ),
	( "recent_files", ListBase ),
	( "afbreek", ctypes.c_short ),
	( "moving", ctypes.c_short ),
	( "file_loaded", ctypes.c_short ),
	( "background", ctypes.c_char ),
	( "factory_startup", ctypes.c_char ),
	( "winpos", ctypes.c_short ),
	( "displaymode", ctypes.c_short ),
	( "rendering", ctypes.c_short ),
	( "rt", ctypes.c_short ),
	( "f", ctypes.c_int ),
	( "editBMesh", ctypes.POINTER(BME_Glob) ),
	( "save_over", ctypes.c_int ),
	( "have_quicktime", ctypes.c_int ),
	( "ui_international", ctypes.c_int ),
	( "charstart", ctypes.c_int ),
	( "charmin", ctypes.c_int ),
	( "charmax", ctypes.c_int ),
	( "selfont", ctypes.POINTER(VFont) ),
	( "ttfdata", ListBase ),
	( "fileflags", ctypes.c_int ),
	( "windowstate", ctypes.c_int ),
])

__freeze_rpythonic_struct( Main, [
	( "next", ctypes.POINTER(Main) ),
	( "prev", ctypes.POINTER(Main) ),
	( "name", ( ctypes.c_char * 240 ) ),
	( "versionfile", ctypes.c_short ),
	( "subversionfile", ctypes.c_short ),
	( "minversionfile", ctypes.c_short ),
	( "minsubversionfile", ctypes.c_short ),
	( "revision", ctypes.c_int ),
	( "curlib", ctypes.POINTER(Library) ),
	( "scene", ListBase ),
	( "library", ListBase ),
	( "C_object", ListBase ),
	( "mesh", ListBase ),
	( "curve", ListBase ),
	( "mball", ListBase ),
	( "mat", ListBase ),
	( "tex", ListBase ),
	( "image", ListBase ),
	( "latt", ListBase ),
	( "lamp", ListBase ),
	( "camera", ListBase ),
	( "ipo", ListBase ),
	( "key", ListBase ),
	( "world", ListBase ),
	( "screen", ListBase ),
	( "script", ListBase ),
	( "vfont", ListBase ),
	( "text", ListBase ),
	( "speaker", ListBase ),
	( "sound", ListBase ),
	( "group", ListBase ),
	( "armature", ListBase ),
	( "action", ListBase ),
	( "nodetree", ListBase ),
	( "brush", ListBase ),
	( "particle", ListBase ),
	( "wm", ListBase ),
	( "gpencil", ListBase ),
	( "movieclip", ListBase ),
	( "id_tag_update", ( ctypes.c_char * 256 ) ),
])

__freeze_rpythonic_struct( Mesh, [
])

__freeze_rpythonic_struct( MTFace, [
])

__freeze_rpythonic_struct( bSound, [
])

__freeze_rpythonic_struct( PackedFile, [
])

__freeze_rpythonic_struct( bglMats, [
])

__freeze_rpythonic_struct( bNode, [
])

__freeze_rpythonic_struct( bNodeLink, [
])

__freeze_rpythonic_struct( bNodeSocket, [
])

__freeze_rpythonic_struct( bNodeStack, [
])

__freeze_rpythonic_struct( bNodeTreeExec, [
])

__freeze_rpythonic_struct( GPUMaterial, [
])

__freeze_rpythonic_struct( GPUNode, [
])

__freeze_rpythonic_struct( GPUNodeStack, [
])

__freeze_rpythonic_struct( uiBlock, [
])

__freeze_rpythonic_struct( uiLayout, [
])

__freeze_rpythonic_struct( bNodeSocketTemplate, [
	( "C_type", ctypes.c_int ),
	( "limit", ctypes.c_int ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "val1", ctypes.c_float ),
	( "val2", ctypes.c_float ),
	( "val3", ctypes.c_float ),
	( "val4", ctypes.c_float ),
	( "min", ctypes.c_float ),
	( "max", ctypes.c_float ),
	( "subtype", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "sock", ctypes.POINTER(bNodeSocket) ),
])

__freeze_rpythonic_struct( bNodeSocketType, [
	( "C_type", ctypes.c_int ),
	( "ui_name", ( ctypes.c_char * 32 ) ),
	( "ui_description", ( ctypes.c_char * 128 ) ),
	( "ui_icon", ctypes.c_int ),
	( "ui_color", ( ctypes.c_char * 4 ) ),
	( "value_structname", ctypes.POINTER(ctypes.c_char) ),
	( "value_structsize", ctypes.c_int ),
	( "buttonfunc", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(uiBlock),ctypes.POINTER(bNodeTree),ctypes.POINTER(bNode),ctypes.POINTER(bNodeSocket),ctypes.POINTER(ctypes.c_char),ctypes.c_int,ctypes.c_int,ctypes.c_int,) ),
])

__freeze_rpythonic_struct( bNodeTemplate, [
	( "C_type", ctypes.c_int ),
	( "ngroup", ctypes.POINTER(bNodeTree) ),
])

__freeze_rpythonic_struct( bNodeType, [
	( "next", ctypes.POINTER(ctypes.c_void_p) ),
	( "prev", ctypes.POINTER(ctypes.c_void_p) ),
	( "needs_free", ctypes.c_short ),
	( "C_type", ctypes.c_int ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "width", ctypes.c_float ),
	( "minwidth", ctypes.c_float ),
	( "maxwidth", ctypes.c_float ),
	( "height", ctypes.c_float ),
	( "minheight", ctypes.c_float ),
	( "maxheight", ctypes.c_float ),
	( "nclass", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "compatibility", ctypes.c_short ),
	( "inputs", ctypes.POINTER(bNodeSocketTemplate) ),
	( "outputs", ctypes.POINTER(bNodeSocketTemplate) ),
	( "storagename", ( ctypes.c_char * 64 ) ),
	( "drawfunc", ctypes.c_void_p ),
	( "drawupdatefunc", ctypes.c_void_p ),
	( "uifunc", ctypes.c_void_p ),
	( "uifuncbut", ctypes.c_void_p ),
	( "labelfunc", ctypes.POINTER(ctypes.c_void_p) ),
	( "resize_area_func", ctypes.c_void_p ),
	( "updatefunc", ctypes.c_void_p ),
	( "verifyfunc", ctypes.c_void_p ),
	( "initfunc", ctypes.c_void_p ),
	( "freestoragefunc", ctypes.c_void_p ),
	( "copystoragefunc", ctypes.c_void_p ),
	( "templatefunc", ctypes.c_void_p ),
	( "validfunc", ctypes.c_void_p ),
	( "inittreefunc", ctypes.c_void_p ),
	( "updatetreefunc", ctypes.c_void_p ),
	( "group_edit_get", ctypes.POINTER(ctypes.c_void_p) ),
	( "group_edit_set", ctypes.POINTER(ctypes.c_void_p) ),
	( "group_edit_clear", ctypes.c_void_p ),
	( "initexecfunc", ctypes.POINTER(ctypes.c_void_p) ),
	( "freeexecfunc", ctypes.c_void_p ),
	( "execfunc", ctypes.c_void_p ),
	( "newexecfunc", ctypes.c_void_p ),
	( "mutefunc", ctypes.c_void_p ),
	( "mutelinksfunc", ctypes.c_void_p ),
	( "gpufunc", ctypes.c_void_p ),
	( "gpuextfunc", ctypes.c_void_p ),
	( "gpumutefunc", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( bNodeTreeType, [
	( "C_type", ctypes.c_int ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "node_types", ListBase ),
	( "free_cache", ctypes.c_void_p ),
	( "free_node_cache", ctypes.c_void_p ),
	( "foreach_nodetree", ctypes.c_void_p ),
	( "foreach_nodeclass", ctypes.c_void_p ),
	( "localize", ctypes.c_void_p ),
	( "local_sync", ctypes.c_void_p ),
	( "local_merge", ctypes.c_void_p ),
	( "update", ctypes.c_void_p ),
	( "update_node", ctypes.c_void_p ),
	( "validate_link", ctypes.c_void_p ),
	( "mutefunc", ctypes.c_void_p ),
	( "mutelinksfunc", ctypes.c_void_p ),
	( "gpumutefunc", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( CompBuf, [
])

__freeze_rpythonic_struct( wmLocal, [
])

__freeze_rpythonic_struct( wmSubWindow, [
])

__freeze_rpythonic_struct( Report, [
	( "next", ctypes.POINTER(Report) ),
	( "prev", ctypes.POINTER(Report) ),
	( "C_type", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "C_len", ctypes.c_int ),
	( "typestr", ctypes.POINTER(ctypes.c_char) ),
	( "message", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( ReportList, [
	( "C_list", ListBase ),
	( "printlevel", ctypes.c_int ),
	( "storelevel", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "reporttimer", ctypes.POINTER(wmTimer) ),
])

__freeze_rpythonic_struct( ReportTimerInfo, [
	( "col", ( ctypes.c_float * 3 ) ),
	( "greyscale", ctypes.c_float ),
	( "widthfac", ctypes.c_float ),
])

__freeze_rpythonic_struct( wmWindowManager, [
	( "C_id", ID ),
	( "windrawable", ctypes.POINTER(wmWindow) ),
	( "winactive", ctypes.POINTER(wmWindow) ),
	( "windows", ListBase ),
	( "initialized", ctypes.c_int ),
	( "file_saved", ctypes.c_short ),
	( "op_undo_depth", ctypes.c_short ),
	( "operators", ListBase ),
	( "queue", ListBase ),
	( "reports", ReportList ),
	( "jobs", ListBase ),
	( "paintcursors", ListBase ),
	( "drags", ListBase ),
	( "keyconfigs", ListBase ),
	( "defaultconf", ctypes.POINTER(wmKeyConfig) ),
	( "addonconf", ctypes.POINTER(wmKeyConfig) ),
	( "userconf", ctypes.POINTER(wmKeyConfig) ),
	( "timers", ListBase ),
	( "autosavetimer", ctypes.POINTER(wmTimer) ),
])

__freeze_rpythonic_struct( wmWindow, [
	( "next", ctypes.POINTER(wmWindow) ),
	( "prev", ctypes.POINTER(wmWindow) ),
	( "ghostwin", ctypes.POINTER(ctypes.c_void_p) ),
	( "winid", ctypes.c_int ),
	( "grabcursor", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "screen", ctypes.POINTER(bScreen) ),
	( "newscreen", ctypes.POINTER(bScreen) ),
	( "screenname", ( ctypes.c_char * 32 ) ),
	( "posx", ctypes.c_short ),
	( "posy", ctypes.c_short ),
	( "sizex", ctypes.c_short ),
	( "sizey", ctypes.c_short ),
	( "windowstate", ctypes.c_short ),
	( "monitor", ctypes.c_short ),
	( "active", ctypes.c_short ),
	( "cursor", ctypes.c_short ),
	( "lastcursor", ctypes.c_short ),
	( "modalcursor", ctypes.c_short ),
	( "addmousemove", ctypes.c_short ),
	( "pad2", ctypes.c_short ),
	( "eventstate", ctypes.POINTER(wmEvent) ),
	( "curswin", ctypes.POINTER(wmSubWindow) ),
	( "tweak", ctypes.POINTER(wmGesture) ),
	( "drawmethod", ctypes.c_int ),
	( "drawfail", ctypes.c_int ),
	( "drawdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "queue", ListBase ),
	( "handlers", ListBase ),
	( "modalhandlers", ListBase ),
	( "subwindows", ListBase ),
	( "gesture", ListBase ),
])

__freeze_rpythonic_struct( wmOperatorTypeMacro, [
	( "next", ctypes.POINTER(wmOperatorTypeMacro) ),
	( "prev", ctypes.POINTER(wmOperatorTypeMacro) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "properties", ctypes.POINTER(IDProperty) ),
	( "ptr", ctypes.POINTER(PointerRNA) ),
])

__freeze_rpythonic_struct( wmKeyMapItem, [
	( "next", ctypes.POINTER(wmKeyMapItem) ),
	( "prev", ctypes.POINTER(wmKeyMapItem) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "properties", ctypes.POINTER(IDProperty) ),
	( "propvalue", ctypes.c_short ),
	( "C_type", ctypes.c_short ),
	( "val", ctypes.c_short ),
	( "shift", ctypes.c_short ),
	( "ctrl", ctypes.c_short ),
	( "alt", ctypes.c_short ),
	( "oskey", ctypes.c_short ),
	( "keymodifier", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "maptype", ctypes.c_short ),
	( "C_id", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "ptr", ctypes.POINTER(PointerRNA) ),
])

__freeze_rpythonic_struct( wmKeyMapDiffItem, [
	( "next", ctypes.POINTER(wmKeyMapDiffItem) ),
	( "prev", ctypes.POINTER(wmKeyMapDiffItem) ),
	( "remove_item", ctypes.POINTER(wmKeyMapItem) ),
	( "add_item", ctypes.POINTER(wmKeyMapItem) ),
])

__freeze_rpythonic_struct( wmKeyMap, [
	( "next", ctypes.POINTER(wmKeyMap) ),
	( "prev", ctypes.POINTER(wmKeyMap) ),
	( "items", ListBase ),
	( "diff_items", ListBase ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "spaceid", ctypes.c_short ),
	( "regionid", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "kmi_id", ctypes.c_short ),
	( "poll", ctypes.c_void_p ),
	( "modal_items", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( wmKeyConfig, [
	( "next", ctypes.POINTER(wmKeyConfig) ),
	( "prev", ctypes.POINTER(wmKeyConfig) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "basename", ( ctypes.c_char * 64 ) ),
	( "keymaps", ListBase ),
	( "actkeymap", ctypes.c_int ),
	( "flag", ctypes.c_int ),
])

__freeze_rpythonic_struct( wmOperator, [
	( "next", ctypes.POINTER(wmOperator) ),
	( "prev", ctypes.POINTER(wmOperator) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "properties", ctypes.POINTER(IDProperty) ),
	( "C_type", ctypes.POINTER(wmOperatorType) ),
	( "customdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "py_instance", ctypes.POINTER(ctypes.c_void_p) ),
	( "ptr", ctypes.POINTER(PointerRNA) ),
	( "reports", ctypes.POINTER(ReportList) ),
	( "macro", ListBase ),
	( "opm", ctypes.POINTER(wmOperator) ),
	( "layout", ctypes.POINTER(uiLayout) ),
	( "flag", ctypes.c_short ),
	( "pad", ( ctypes.c_short * 3 ) ),
])

__freeze_rpythonic_struct( Sequence, [
])

__freeze_rpythonic_struct( SoundWaveform, [
	( "length", ctypes.c_int ),
	( "data", ctypes.POINTER(ctypes.c_float) ),
])

__freeze_rpythonic_struct( DagNodeQueue, [
])

__freeze_rpythonic_struct( DagNode, [
])

__freeze_rpythonic_struct( IDPropertyTemplate, [
	( "i", ctypes.c_int ),
	( "f", ctypes.c_float ),
	( "d", ctypes.c_double ),
	( "string", string ),
	( "C_id", ctypes.POINTER(ID) ),
	( "array", array ),
	( "matrix_or_vector", matrix_or_vector ),
])

__freeze_rpythonic_struct( string, [
	( "C_str", ctypes.POINTER(ctypes.c_char) ),
	( "C_len", ctypes.c_short ),
	( "subtype", ctypes.c_char ),
])

__freeze_rpythonic_struct( array, [
	( "C_type", ctypes.c_short ),
	( "C_len", ctypes.c_short ),
])

__freeze_rpythonic_struct( matrix_or_vector, [
	( "matvec_size", ctypes.c_int ),
	( "example", ctypes.POINTER(ctypes.c_float) ),
])

__freeze_rpythonic_struct( uiMenuItem, [
])

__freeze_rpythonic_struct( SpaceType, [
	( "next", ctypes.POINTER(SpaceType) ),
	( "prev", ctypes.POINTER(SpaceType) ),
	( "name", ( ctypes.c_char * 64 ) ),
	( "spaceid", ctypes.c_int ),
	( "iconid", ctypes.c_int ),
	( "new", ctypes.POINTER(ctypes.c_void_p) ),
	( "free", ctypes.c_void_p ),
	( "init", ctypes.c_void_p ),
	( "listener", ctypes.c_void_p ),
	( "refresh", ctypes.c_void_p ),
	( "duplicate", ctypes.POINTER(ctypes.c_void_p) ),
	( "operatortypes", ctypes.c_void_p ),
	( "keymap", ctypes.c_void_p ),
	( "dropboxes", ctypes.c_void_p ),
	( "context", ctypes.c_void_p ),
	( "regiontypes", ListBase ),
	( "toolshelf", ListBase ),
	( "keymapflag", ctypes.c_int ),
])

__freeze_rpythonic_struct( ARegionType, [
	( "next", ctypes.POINTER(ARegionType) ),
	( "prev", ctypes.POINTER(ARegionType) ),
	( "regionid", ctypes.c_int ),
	( "init", ctypes.c_void_p ),
	( "draw", ctypes.c_void_p ),
	( "listener", ctypes.c_void_p ),
	( "free", ctypes.c_void_p ),
	( "duplicate", ctypes.POINTER(ctypes.c_void_p) ),
	( "operatortypes", ctypes.c_void_p ),
	( "keymap", ctypes.c_void_p ),
	( "cursor", ctypes.c_void_p ),
	( "context", ctypes.c_void_p ),
	( "drawcalls", ListBase ),
	( "paneltypes", ListBase ),
	( "headertypes", ListBase ),
	( "minsizex", ctypes.c_int ),
	( "minsizey", ctypes.c_int ),
	( "prefsizex", ctypes.c_int ),
	( "prefsizey", ctypes.c_int ),
	( "keymapflag", ctypes.c_int ),
	( "do_lock", ctypes.c_short ),
	( "lock", ctypes.c_short ),
])

__freeze_rpythonic_struct( PanelType, [
	( "next", ctypes.POINTER(PanelType) ),
	( "prev", ctypes.POINTER(PanelType) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "label", ( ctypes.c_char * 64 ) ),
	( "context", ( ctypes.c_char * 64 ) ),
	( "space_type", ctypes.c_int ),
	( "region_type", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "poll", ctypes.c_void_p ),
	( "draw_header", ctypes.c_void_p ),
	( "draw", ctypes.c_void_p ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( HeaderType, [
	( "next", ctypes.POINTER(HeaderType) ),
	( "prev", ctypes.POINTER(HeaderType) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "space_type", ctypes.c_int ),
	( "draw", ctypes.c_void_p ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( Header, [
	( "C_type", ctypes.POINTER(HeaderType) ),
	( "layout", ctypes.POINTER(uiLayout) ),
])

__freeze_rpythonic_struct( MenuType, [
	( "next", ctypes.POINTER(MenuType) ),
	( "prev", ctypes.POINTER(MenuType) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "label", ( ctypes.c_char * 64 ) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "poll", ctypes.c_void_p ),
	( "draw", ctypes.c_void_p ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( Menu, [
	( "C_type", ctypes.POINTER(MenuType) ),
	( "layout", ctypes.POINTER(uiLayout) ),
])

__freeze_rpythonic_struct( anim, [
])

__freeze_rpythonic_struct( CustomDataLayer, [
	( "C_type", ctypes.c_int ),
	( "offset", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "active", ctypes.c_int ),
	( "active_rnd", ctypes.c_int ),
	( "active_clone", ctypes.c_int ),
	( "active_mask", ctypes.c_int ),
	( "pad", ( ctypes.c_char * 4 ) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( CustomDataExternal, [
	( "filename", ( ctypes.c_char * 240 ) ),
])

__freeze_rpythonic_struct( CustomData, [
	( "layers", ctypes.POINTER(CustomDataLayer) ),
	( "totlayer", ctypes.c_int ),
	( "maxlayer", ctypes.c_int ),
	( "totsize", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "pool", ctypes.POINTER(ctypes.c_void_p) ),
	( "external", ctypes.POINTER(CustomDataExternal) ),
])

__freeze_rpythonic_struct( BVHTree, [
])

__freeze_rpythonic_struct( BVHTreeOverlap, [
	( "indexA", ctypes.c_int ),
	( "indexB", ctypes.c_int ),
])

__freeze_rpythonic_struct( BVHTreeNearest, [
	( "index", ctypes.c_int ),
	( "co", ( ctypes.c_float * 3 ) ),
	( "no", ( ctypes.c_float * 3 ) ),
	( "dist", ctypes.c_float ),
])

__freeze_rpythonic_struct( BVHTreeRay, [
	( "origin", ( ctypes.c_float * 3 ) ),
	( "direction", ( ctypes.c_float * 3 ) ),
	( "radius", ctypes.c_float ),
])

__freeze_rpythonic_struct( BVHTreeRayHit, [
	( "index", ctypes.c_int ),
	( "co", ( ctypes.c_float * 3 ) ),
	( "no", ( ctypes.c_float * 3 ) ),
	( "dist", ctypes.c_float ),
])

__freeze_rpythonic_struct( MVert, [
])

__freeze_rpythonic_struct( MFace, [
])

__freeze_rpythonic_struct( BVHTreeFromMesh, [
	( "tree", ctypes.POINTER(BVHTree) ),
	( "nearest_callback", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,ctypes.POINTER(ctypes.c_float),ctypes.POINTER(BVHTreeNearest),) ),
	( "raycast_callback", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,ctypes.POINTER(BVHTreeRay),ctypes.POINTER(BVHTreeRayHit),) ),
	( "mesh", ctypes.POINTER(DerivedMesh) ),
	( "vert", ctypes.POINTER(MVert) ),
	( "edge", ctypes.POINTER(MEdge) ),
	( "face", ctypes.POINTER(MFace) ),
	( "sphere_radius", ctypes.c_float ),
	( "cached", ctypes.c_int ),
	( "em_evil", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( MEdge, [
])

__freeze_rpythonic_struct( KeyBlock, [
])

__freeze_rpythonic_struct( ModifierData, [
])

__freeze_rpythonic_struct( MCol, [
])

__freeze_rpythonic_struct( PBVH, [
])

__freeze_rpythonic_struct( DMGridData, [
	( "co", ( ctypes.c_float * 3 ) ),
	( "no", ( ctypes.c_float * 3 ) ),
])

__freeze_rpythonic_struct( DMGridAdjacency, [
	( "index", ( ctypes.c_int * 4 ) ),
	( "rotation", ( ctypes.c_int * 4 ) ),
])

__freeze_rpythonic_struct( DerivedMesh, [
	( "vertData", CustomData ),
	( "edgeData", CustomData ),
	( "faceData", CustomData ),
	( "numVertData", ctypes.c_int ),
	( "numEdgeData", ctypes.c_int ),
	( "numFaceData", ctypes.c_int ),
	( "needsFree", ctypes.c_int ),
	( "deformedOnly", ctypes.c_int ),
	( "bvhCache", ctypes.POINTER(LinkNode) ),
	( "drawObject", ctypes.POINTER(GPUDrawObject) ),
	( "C_type", ctypes.c_int ),
	( "auto_bump_scale", ctypes.c_float ),
	( "getNumVerts", ctypes.c_void_p ),
	( "getNumFaces", ctypes.c_void_p ),
	( "getNumEdges", ctypes.c_void_p ),
	( "getVert", ctypes.c_void_p ),
	( "getEdge", ctypes.c_void_p ),
	( "getFace", ctypes.c_void_p ),
	( "getVertArray", ctypes.POINTER(ctypes.c_void_p) ),
	( "getEdgeArray", ctypes.POINTER(ctypes.c_void_p) ),
	( "getFaceArray", ctypes.POINTER(ctypes.c_void_p) ),
	( "copyVertArray", ctypes.c_void_p ),
	( "copyEdgeArray", ctypes.c_void_p ),
	( "copyFaceArray", ctypes.c_void_p ),
	( "dupVertArray", ctypes.POINTER(ctypes.c_void_p) ),
	( "dupEdgeArray", ctypes.POINTER(ctypes.c_void_p) ),
	( "dupFaceArray", ctypes.POINTER(ctypes.c_void_p) ),
	( "getVertData", ctypes.POINTER(ctypes.c_void_p) ),
	( "getEdgeData", ctypes.POINTER(ctypes.c_void_p) ),
	( "getFaceData", ctypes.POINTER(ctypes.c_void_p) ),
	( "getVertDataArray", ctypes.POINTER(ctypes.c_void_p) ),
	( "getEdgeDataArray", ctypes.POINTER(ctypes.c_void_p) ),
	( "getFaceDataArray", ctypes.POINTER(ctypes.c_void_p) ),
	( "getNumGrids", ctypes.c_void_p ),
	( "getGridSize", ctypes.c_void_p ),
	( "getGridData", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)) ),
	( "getGridAdjacency", ctypes.POINTER(ctypes.c_void_p) ),
	( "getGridOffset", ctypes.POINTER(ctypes.c_void_p) ),
	( "foreachMappedVert", ctypes.c_void_p ),
	( "foreachMappedEdge", ctypes.c_void_p ),
	( "foreachMappedFaceCenter", ctypes.c_void_p ),
	( "getMinMax", ctypes.c_void_p ),
	( "getVertCo", ctypes.c_void_p ),
	( "getVertCos", ctypes.c_void_p ),
	( "getVertNo", ctypes.c_void_p ),
	( "getFaceMap", ctypes.POINTER(ctypes.c_void_p) ),
	( "getPBVH", ctypes.POINTER(ctypes.c_void_p) ),
	( "drawVerts", ctypes.c_void_p ),
	( "drawUVEdges", ctypes.c_void_p ),
	( "drawEdges", ctypes.c_void_p ),
	( "drawLooseEdges", ctypes.c_void_p ),
	( "drawFacesSolid", ctypes.c_void_p ),
	( "drawFacesColored", ctypes.c_void_p ),
	( "drawFacesTex", ctypes.c_void_p ),
	( "drawFacesGLSL", ctypes.c_void_p ),
	( "drawMappedFaces", ctypes.c_void_p ),
	( "drawMappedFacesTex", ctypes.c_void_p ),
	( "drawMappedFacesGLSL", ctypes.c_void_p ),
	( "drawMappedEdges", ctypes.c_void_p ),
	( "drawMappedEdgesInterp", ctypes.c_void_p ),
	( "drawMappedFacesMat", ctypes.c_void_p ),
	( "release", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( DMVertexAttribs, [
	( "tface", ( tface * 8 ) ),
	( "mcol", ( mcol * 8 ) ),
	( "tang", tang ),
	( "orco", orco ),
	( "tottface", ctypes.c_int ),
	( "totmcol", ctypes.c_int ),
	( "tottang", ctypes.c_int ),
	( "totorco", ctypes.c_int ),
])

__freeze_rpythonic_struct( tface, [
	( "array", ctypes.POINTER(( MTFace * 8 )) ),
	( "emOffset", ( ctypes.c_int * 8 ) ),
	( "glIndex", ( ctypes.c_int * 8 ) ),
	( "glTexco", ( ctypes.c_int * 8 ) ),
])

__freeze_rpythonic_struct( mcol, [
	( "array", ctypes.POINTER(( MCol * 8 )) ),
	( "emOffset", ( ctypes.c_int * 8 ) ),
	( "glIndex", ( ctypes.c_int * 8 ) ),
])

__freeze_rpythonic_struct( tang, [
	( "array", ctypes.POINTER(ctypes.c_float) ),
	( "emOffset", ctypes.c_int ),
	( "glIndex", ctypes.c_int ),
])

__freeze_rpythonic_struct( orco, [
	( "array", ctypes.POINTER(ctypes.c_float) ),
	( "emOffset", ctypes.c_int ),
	( "glIndex", ctypes.c_int ),
	( "glTexco", ctypes.c_int ),
])

__freeze_rpythonic_struct( EditMeshDerivedMesh, [
	( "dm", DerivedMesh ),
	( "em", ctypes.POINTER(EditMesh) ),
	( "vertexCos", ctypes.POINTER(ctypes.c_float) ),
	( "vertexNos", ctypes.POINTER(ctypes.c_float) ),
	( "faceNos", ctypes.POINTER(ctypes.c_float) ),
])

__freeze_rpythonic_struct( ClothSimSettings, [
	( "cache", ctypes.POINTER(LinkNode) ),
	( "mingoal", ctypes.c_float ),
	( "Cdis", ctypes.c_float ),
	( "Cvi", ctypes.c_float ),
	( "gravity", ( ctypes.c_float * 3 ) ),
	( "dt", ctypes.c_float ),
	( "mass", ctypes.c_float ),
	( "structural", ctypes.c_float ),
	( "shear", ctypes.c_float ),
	( "bending", ctypes.c_float ),
	( "max_bend", ctypes.c_float ),
	( "max_struct", ctypes.c_float ),
	( "max_shear", ctypes.c_float ),
	( "avg_spring_len", ctypes.c_float ),
	( "timescale", ctypes.c_float ),
	( "maxgoal", ctypes.c_float ),
	( "eff_force_scale", ctypes.c_float ),
	( "eff_wind_scale", ctypes.c_float ),
	( "sim_time_old", ctypes.c_float ),
	( "defgoal", ctypes.c_float ),
	( "goalspring", ctypes.c_float ),
	( "goalfrict", ctypes.c_float ),
	( "velocity_smooth", ctypes.c_float ),
	( "collider_friction", ctypes.c_float ),
	( "stepsPerFrame", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "preroll", ctypes.c_int ),
	( "maxspringlen", ctypes.c_int ),
	( "solver_type", ctypes.c_short ),
	( "vgroup_bend", ctypes.c_short ),
	( "vgroup_mass", ctypes.c_short ),
	( "vgroup_struct", ctypes.c_short ),
	( "shapekey_rest", ctypes.c_short ),
	( "presets", ctypes.c_short ),
	( "reset", ctypes.c_short ),
	( "pad", ( ctypes.c_short * 3 ) ),
	( "effector_weights", ctypes.POINTER(EffectorWeights) ),
])

__freeze_rpythonic_struct( EffectorWeights, [
])

__freeze_rpythonic_struct( ClothCollSettings, [
	( "collision_list", ctypes.POINTER(LinkNode) ),
	( "epsilon", ctypes.c_float ),
	( "self_friction", ctypes.c_float ),
	( "friction", ctypes.c_float ),
	( "selfepsilon", ctypes.c_float ),
	( "repel_force", ctypes.c_float ),
	( "distance_repel", ctypes.c_float ),
	( "flags", ctypes.c_int ),
	( "self_loop_count", ctypes.c_short ),
	( "loop_count", ctypes.c_short ),
	( "group", ctypes.POINTER(Group) ),
])

__freeze_rpythonic_struct( ClothModifierData, [
])

__freeze_rpythonic_struct( CollisionModifierData, [
])

__freeze_rpythonic_struct( CollPair, [
	( "face1", ctypes.c_uint ),
	( "face2", ctypes.c_uint ),
	( "distance", ctypes.c_double ),
	( "normal", ( ctypes.c_float * 3 ) ),
	( "vector", ( ctypes.c_float * 3 ) ),
	( "pa", ( ctypes.c_float * 3 ) ),
	( "pb", ( ctypes.c_float * 3 ) ),
	( "flag", ctypes.c_int ),
	( "time", ctypes.c_float ),
	( "ap1", ctypes.c_int ),
	( "ap2", ctypes.c_int ),
	( "ap3", ctypes.c_int ),
	( "bp1", ctypes.c_int ),
	( "bp2", ctypes.c_int ),
	( "bp3", ctypes.c_int ),
	( "pointsb", ( ctypes.c_int * 4 ) ),
])

__freeze_rpythonic_struct( EdgeCollPair, [
	( "p11", ctypes.c_uint ),
	( "p12", ctypes.c_uint ),
	( "p21", ctypes.c_uint ),
	( "p22", ctypes.c_uint ),
	( "normal", ( ctypes.c_float * 3 ) ),
	( "vector", ( ctypes.c_float * 3 ) ),
	( "time", ctypes.c_float ),
	( "lastsign", ctypes.c_int ),
	( "pa", ( ctypes.c_float * 3 ) ),
	( "pb", ( ctypes.c_float * 3 ) ),
])

__freeze_rpythonic_struct( FaceCollPair, [
	( "p11", ctypes.c_uint ),
	( "p12", ctypes.c_uint ),
	( "p13", ctypes.c_uint ),
	( "p21", ctypes.c_uint ),
	( "normal", ( ctypes.c_float * 3 ) ),
	( "vector", ( ctypes.c_float * 3 ) ),
	( "time", ctypes.c_float ),
	( "lastsign", ctypes.c_int ),
	( "pa", ( ctypes.c_float * 3 ) ),
	( "pb", ( ctypes.c_float * 3 ) ),
])

__freeze_rpythonic_struct( ColliderCache, [
	( "next", ctypes.POINTER(ColliderCache) ),
	( "prev", ctypes.POINTER(ColliderCache) ),
	( "ob", ctypes.POINTER(Object) ),
	( "collmd", ctypes.POINTER(CollisionModifierData) ),
])

__freeze_rpythonic_struct( CollisionTree, [
])

__freeze_rpythonic_struct( Cloth, [
	( "verts", ctypes.POINTER(ClothVertex) ),
	( "springs", ctypes.POINTER(LinkNode) ),
	( "numverts", ctypes.c_uint ),
	( "numsprings", ctypes.c_uint ),
	( "numfaces", ctypes.c_uint ),
	( "old_solver_type", ctypes.c_ubyte ),
	( "pad2", ctypes.c_ubyte ),
	( "pad3", ctypes.c_short ),
	( "bvhtree", ctypes.POINTER(BVHTree) ),
	( "bvhselftree", ctypes.POINTER(BVHTree) ),
	( "mfaces", ctypes.POINTER(MFace) ),
	( "implicit", ctypes.POINTER(Implicit_Data) ),
	( "implicitEM", ctypes.POINTER(Implicit_Data) ),
	( "edgehash", ctypes.POINTER(EdgeHash) ),
])

__freeze_rpythonic_struct( Implicit_Data, [
])

__freeze_rpythonic_struct( EdgeHash, [
])

__freeze_rpythonic_struct( ClothVertex, [
	( "flags", ctypes.c_int ),
	( "v", ( ctypes.c_float * 3 ) ),
	( "xconst", ( ctypes.c_float * 3 ) ),
	( "x", ( ctypes.c_float * 3 ) ),
	( "xold", ( ctypes.c_float * 3 ) ),
	( "tx", ( ctypes.c_float * 3 ) ),
	( "txold", ( ctypes.c_float * 3 ) ),
	( "tv", ( ctypes.c_float * 3 ) ),
	( "mass", ctypes.c_float ),
	( "goal", ctypes.c_float ),
	( "impulse", ( ctypes.c_float * 3 ) ),
	( "xrest", ctypes.POINTER(ctypes.c_float) ),
	( "impulse_count", ctypes.c_uint ),
	( "avg_spring_len", ctypes.c_float ),
	( "struct_stiff", ctypes.c_float ),
	( "bend_stiff", ctypes.c_float ),
	( "shear_stiff", ctypes.c_float ),
	( "spring_count", ctypes.c_int ),
])

__freeze_rpythonic_struct( ClothSpring, [
	( "ij", ctypes.c_int ),
	( "kl", ctypes.c_int ),
	( "restlen", ctypes.c_float ),
	( "matrix_index", ctypes.c_int ),
	( "C_type", ctypes.c_int ),
	( "flags", ctypes.c_int ),
	( "dfdx", ( ctypes.c_float * 3 ) ),
	( "dfdv", ( ctypes.c_float * 3 ) ),
	( "f", ( ctypes.c_float * 3 ) ),
	( "stiffness", ctypes.c_float ),
	( "editrestlen", ctypes.c_float ),
])

__freeze_rpythonic_struct( CM_SOLVER_DEF, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "C_id", ctypes.c_int ),
	( "init", ctypes.c_void_p ),
	( "solver", ctypes.c_void_p ),
	( "free", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( bGPDlayer, [
])

__freeze_rpythonic_struct( MovieReconstructContext, [
])

__freeze_rpythonic_struct( MovieTrackingContext, [
])

__freeze_rpythonic_struct( MovieDistortion, [
])

__freeze_rpythonic_struct( Camera, [
])

__freeze_rpythonic_struct( ChannelDriver, [
])

__freeze_rpythonic_struct( bConstraint, [
])

__freeze_rpythonic_struct( bPythonConstraint, [
])

__freeze_rpythonic_struct( bConstraintOb, [
])

__freeze_rpythonic_struct( bConstraintTarget, [
])

__freeze_rpythonic_struct( NodeBlurData, [
])

__freeze_rpythonic_struct( Render, [
])

__freeze_rpythonic_struct( RenderPass, [
	( "next", ctypes.POINTER(RenderPass) ),
	( "prev", ctypes.POINTER(RenderPass) ),
	( "passtype", ctypes.c_int ),
	( "channels", ctypes.c_int ),
	( "name", ( ctypes.c_char * 16 ) ),
	( "chan_id", ( ctypes.c_char * 8 ) ),
	( "rect", ctypes.POINTER(ctypes.c_float) ),
	( "rectx", ctypes.c_int ),
	( "recty", ctypes.c_int ),
])

__freeze_rpythonic_struct( RenderLayer, [
	( "next", ctypes.POINTER(RenderLayer) ),
	( "prev", ctypes.POINTER(RenderLayer) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "lay", ctypes.c_uint ),
	( "lay_zmask", ctypes.c_uint ),
	( "layflag", ctypes.c_int ),
	( "passflag", ctypes.c_int ),
	( "pass_xor", ctypes.c_int ),
	( "mat_override", ctypes.POINTER(Material) ),
	( "light_override", ctypes.POINTER(Group) ),
	( "rectf", ctypes.POINTER(ctypes.c_float) ),
	( "acolrect", ctypes.POINTER(ctypes.c_float) ),
	( "scolrect", ctypes.POINTER(ctypes.c_float) ),
	( "rectx", ctypes.c_int ),
	( "recty", ctypes.c_int ),
	( "passes", ListBase ),
])

__freeze_rpythonic_struct( RenderResult, [
	( "next", ctypes.POINTER(RenderResult) ),
	( "prev", ctypes.POINTER(RenderResult) ),
	( "rectx", ctypes.c_int ),
	( "recty", ctypes.c_int ),
	( "crop", ctypes.c_short ),
	( "sample_nr", ctypes.c_short ),
	( "rect32", ctypes.POINTER(ctypes.c_int) ),
	( "rectf", ctypes.POINTER(ctypes.c_float) ),
	( "rectz", ctypes.POINTER(ctypes.c_float) ),
	( "tilerect", rcti ),
	( "xof", ctypes.c_int ),
	( "yof", ctypes.c_int ),
	( "layers", ListBase ),
	( "renrect", rcti ),
	( "renlay", ctypes.POINTER(RenderLayer) ),
	( "exrhandle", ctypes.POINTER(ctypes.c_void_p) ),
	( "framenr", ctypes.c_int ),
	( "have_combined", ctypes.c_int ),
	( "text", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( RenderStats, [
	( "cfra", ctypes.c_int ),
	( "totface", ctypes.c_int ),
	( "totvert", ctypes.c_int ),
	( "totstrand", ctypes.c_int ),
	( "tothalo", ctypes.c_int ),
	( "totlamp", ctypes.c_int ),
	( "totpart", ctypes.c_int ),
	( "curfield", ctypes.c_short ),
	( "curblur", ctypes.c_short ),
	( "curpart", ctypes.c_short ),
	( "partsdone", ctypes.c_short ),
	( "convertdone", ctypes.c_short ),
	( "curfsa", ctypes.c_short ),
	( "starttime", ctypes.c_double ),
	( "lastframetime", ctypes.c_double ),
	( "infostr", ctypes.POINTER(ctypes.c_char) ),
	( "statstr", ctypes.POINTER(ctypes.c_char) ),
	( "scenename", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( TexResult, [
	( "tin", ctypes.c_float ),
	( "tr", ctypes.c_float ),
	( "tg", ctypes.c_float ),
	( "tb", ctypes.c_float ),
	( "ta", ctypes.c_float ),
	( "talpha", ctypes.c_int ),
	( "nor", ctypes.POINTER(ctypes.c_float) ),
])

__freeze_rpythonic_struct( ShadeResult, [
	( "combined", ( ctypes.c_float * 4 ) ),
	( "col", ( ctypes.c_float * 4 ) ),
	( "alpha", ctypes.c_float ),
	( "mist", ctypes.c_float ),
	( "z", ctypes.c_float ),
	( "emit", ( ctypes.c_float * 3 ) ),
	( "diff", ( ctypes.c_float * 3 ) ),
	( "spec", ( ctypes.c_float * 3 ) ),
	( "shad", ( ctypes.c_float * 4 ) ),
	( "ao", ( ctypes.c_float * 3 ) ),
	( "env", ( ctypes.c_float * 3 ) ),
	( "indirect", ( ctypes.c_float * 3 ) ),
	( "refl", ( ctypes.c_float * 3 ) ),
	( "refr", ( ctypes.c_float * 3 ) ),
	( "nor", ( ctypes.c_float * 3 ) ),
	( "winspeed", ( ctypes.c_float * 4 ) ),
	( "rayhits", ( ctypes.c_float * 4 ) ),
])

__freeze_rpythonic_struct( ShadeInputCopy, [
	( "mat", ctypes.POINTER(Material) ),
	( "vlr", ctypes.POINTER(VlakRen) ),
	( "strand", ctypes.POINTER(StrandRen) ),
	( "obi", ctypes.POINTER(ObjectInstanceRen) ),
	( "obr", ctypes.POINTER(ObjectRen) ),
	( "facenr", ctypes.c_int ),
	( "facenor", ( ctypes.c_float * 3 ) ),
	( "flippednor", ctypes.c_short ),
	( "v1", ctypes.POINTER(VertRen) ),
	( "v2", ctypes.POINTER(VertRen) ),
	( "v3", ctypes.POINTER(VertRen) ),
	( "i1", ctypes.c_short ),
	( "i2", ctypes.c_short ),
	( "i3", ctypes.c_short ),
	( "puno", ctypes.c_short ),
	( "osatex", ctypes.c_short ),
	( "vn", ( ctypes.c_float * 3 ) ),
	( "vno", ( ctypes.c_float * 3 ) ),
	( "n1", ( ctypes.c_float * 3 ) ),
	( "n2", ( ctypes.c_float * 3 ) ),
	( "n3", ( ctypes.c_float * 3 ) ),
	( "mode", ctypes.c_int ),
])

__freeze_rpythonic_struct( VlakRen, [
])

__freeze_rpythonic_struct( StrandRen, [
])

__freeze_rpythonic_struct( ObjectInstanceRen, [
])

__freeze_rpythonic_struct( ObjectRen, [
])

__freeze_rpythonic_struct( VertRen, [
])

__freeze_rpythonic_struct( ShadeInputUV, [
	( "dxuv", ( ctypes.c_float * 3 ) ),
	( "dyuv", ( ctypes.c_float * 3 ) ),
	( "uv", ( ctypes.c_float * 3 ) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( ShadeInputCol, [
	( "col", ( ctypes.c_float * 4 ) ),
	( "name", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( ShadeInput, [
	( "mat", ctypes.POINTER(Material) ),
	( "vlr", ctypes.POINTER(VlakRen) ),
	( "strand", ctypes.POINTER(StrandRen) ),
	( "obi", ctypes.POINTER(ObjectInstanceRen) ),
	( "obr", ctypes.POINTER(ObjectRen) ),
	( "facenr", ctypes.c_int ),
	( "facenor", ( ctypes.c_float * 3 ) ),
	( "flippednor", ctypes.c_short ),
	( "v1", ctypes.POINTER(VertRen) ),
	( "v2", ctypes.POINTER(VertRen) ),
	( "v3", ctypes.POINTER(VertRen) ),
	( "i1", ctypes.c_short ),
	( "i2", ctypes.c_short ),
	( "i3", ctypes.c_short ),
	( "puno", ctypes.c_short ),
	( "osatex", ctypes.c_short ),
	( "vn", ( ctypes.c_float * 3 ) ),
	( "vno", ( ctypes.c_float * 3 ) ),
	( "n1", ( ctypes.c_float * 3 ) ),
	( "n2", ( ctypes.c_float * 3 ) ),
	( "n3", ( ctypes.c_float * 3 ) ),
	( "mode", ctypes.c_int ),
	( "u", ctypes.c_float ),
	( "v", ctypes.c_float ),
	( "dx_u", ctypes.c_float ),
	( "dx_v", ctypes.c_float ),
	( "dy_u", ctypes.c_float ),
	( "dy_v", ctypes.c_float ),
	( "co", ( ctypes.c_float * 3 ) ),
	( "view", ( ctypes.c_float * 3 ) ),
	( "camera_co", ( ctypes.c_float * 3 ) ),
	( "r", ctypes.c_float ),
	( "g", ctypes.c_float ),
	( "b", ctypes.c_float ),
	( "specr", ctypes.c_float ),
	( "specg", ctypes.c_float ),
	( "specb", ctypes.c_float ),
	( "mirr", ctypes.c_float ),
	( "mirg", ctypes.c_float ),
	( "mirb", ctypes.c_float ),
	( "ambr", ctypes.c_float ),
	( "ambb", ctypes.c_float ),
	( "ambg", ctypes.c_float ),
	( "amb", ctypes.c_float ),
	( "emit", ctypes.c_float ),
	( "ang", ctypes.c_float ),
	( "spectra", ctypes.c_float ),
	( "ray_mirror", ctypes.c_float ),
	( "alpha", ctypes.c_float ),
	( "refl", ctypes.c_float ),
	( "spec", ctypes.c_float ),
	( "zoffs", ctypes.c_float ),
	( "add", ctypes.c_float ),
	( "translucency", ctypes.c_float ),
	( "har", ctypes.c_int ),
	( "lo", ( ctypes.c_float * 3 ) ),
	( "gl", ( ctypes.c_float * 3 ) ),
	( "ref", ( ctypes.c_float * 3 ) ),
	( "orn", ( ctypes.c_float * 3 ) ),
	( "winco", ( ctypes.c_float * 3 ) ),
	( "sticky", ( ctypes.c_float * 3 ) ),
	( "vcol", ( ctypes.c_float * 4 ) ),
	( "refcol", ( ctypes.c_float * 4 ) ),
	( "displace", ( ctypes.c_float * 3 ) ),
	( "strandco", ctypes.c_float ),
	( "tang", ( ctypes.c_float * 3 ) ),
	( "nmapnorm", ( ctypes.c_float * 3 ) ),
	( "nmaptang", ( ctypes.c_float * 4 ) ),
	( "stress", ctypes.c_float ),
	( "winspeed", ( ctypes.c_float * 4 ) ),
	( "duplilo", ( ctypes.c_float * 3 ) ),
	( "dupliuv", ( ctypes.c_float * 3 ) ),
	( "uv", ( ShadeInputUV * 8 ) ),
	( "col", ( ShadeInputCol * 8 ) ),
	( "totuv", ctypes.c_int ),
	( "totcol", ctypes.c_int ),
	( "actuv", ctypes.c_int ),
	( "actcol", ctypes.c_int ),
	( "dxco", ( ctypes.c_float * 3 ) ),
	( "dyco", ( ctypes.c_float * 3 ) ),
	( "dxlo", ( ctypes.c_float * 3 ) ),
	( "dylo", ( ctypes.c_float * 3 ) ),
	( "dxgl", ( ctypes.c_float * 3 ) ),
	( "dygl", ( ctypes.c_float * 3 ) ),
	( "dxref", ( ctypes.c_float * 3 ) ),
	( "dyref", ( ctypes.c_float * 3 ) ),
	( "dxorn", ( ctypes.c_float * 3 ) ),
	( "dyorn", ( ctypes.c_float * 3 ) ),
	( "dxno", ( ctypes.c_float * 3 ) ),
	( "dyno", ( ctypes.c_float * 3 ) ),
	( "dxview", ctypes.c_float ),
	( "dyview", ctypes.c_float ),
	( "dxlv", ( ctypes.c_float * 3 ) ),
	( "dylv", ( ctypes.c_float * 3 ) ),
	( "dxwin", ( ctypes.c_float * 3 ) ),
	( "dywin", ( ctypes.c_float * 3 ) ),
	( "dxsticky", ( ctypes.c_float * 3 ) ),
	( "dysticky", ( ctypes.c_float * 3 ) ),
	( "dxrefract", ( ctypes.c_float * 3 ) ),
	( "dyrefract", ( ctypes.c_float * 3 ) ),
	( "dxstrand", ctypes.c_float ),
	( "dystrand", ctypes.c_float ),
	( "ao", ( ctypes.c_float * 3 ) ),
	( "indirect", ( ctypes.c_float * 3 ) ),
	( "env", ( ctypes.c_float * 3 ) ),
	( "xs", ctypes.c_int ),
	( "ys", ctypes.c_int ),
	( "mask", ctypes.c_int ),
	( "scanco", ( ctypes.c_float * 3 ) ),
	( "samplenr", ctypes.c_int ),
	( "depth", ctypes.c_int ),
	( "volume_depth", ctypes.c_int ),
	( "surfnor", ( ctypes.c_float * 3 ) ),
	( "surfdist", ctypes.c_float ),
	( "do_preview", ctypes.c_short ),
	( "do_manage", ctypes.c_short ),
	( "thread", ctypes.c_short ),
	( "sample", ctypes.c_short ),
	( "nodes", ctypes.c_short ),
	( "lay", ctypes.c_uint ),
	( "layflag", ctypes.c_int ),
	( "passflag", ctypes.c_int ),
	( "combinedflag", ctypes.c_int ),
	( "light_override", ctypes.POINTER(Group) ),
	( "mat_override", ctypes.POINTER(Material) ),
])

__freeze_rpythonic_struct( RenderEngineType, [
	( "next", ctypes.POINTER(RenderEngineType) ),
	( "prev", ctypes.POINTER(RenderEngineType) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "name", ( ctypes.c_char * 64 ) ),
	( "flag", ctypes.c_int ),
	( "update", ctypes.c_void_p ),
	( "render", ctypes.c_void_p ),
	( "view_update", ctypes.c_void_p ),
	( "view_draw", ctypes.c_void_p ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( RenderEngine, [
	( "C_type", ctypes.POINTER(RenderEngineType) ),
	( "py_instance", ctypes.POINTER(ctypes.c_void_p) ),
	( "flag", ctypes.c_int ),
	( "re", ctypes.POINTER(Render) ),
	( "fullresult", ListBase ),
	( "text", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( bArmature, [
])

__freeze_rpythonic_struct( Bone, [
])

__freeze_rpythonic_struct( MeshDeformModifierData, [
])

__freeze_rpythonic_struct( SK_Sketch, [
])

__freeze_rpythonic_struct( ViewContext, [
])

__freeze_rpythonic_struct( EditBone, [
	( "next", ctypes.POINTER(EditBone) ),
	( "prev", ctypes.POINTER(EditBone) ),
	( "prop", ctypes.POINTER(IDProperty) ),
	( "parent", ctypes.POINTER(EditBone) ),
	( "temp", ctypes.POINTER(ctypes.c_void_p) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "roll", ctypes.c_float ),
	( "head", ( ctypes.c_float * 3 ) ),
	( "tail", ( ctypes.c_float * 3 ) ),
	( "flag", ctypes.c_int ),
	( "layer", ctypes.c_int ),
	( "dist", ctypes.c_float ),
	( "weight", ctypes.c_float ),
	( "xwidth", ctypes.c_float ),
	( "length", ctypes.c_float ),
	( "zwidth", ctypes.c_float ),
	( "ease1", ctypes.c_float ),
	( "ease2", ctypes.c_float ),
	( "rad_head", ctypes.c_float ),
	( "rad_tail", ctypes.c_float ),
	( "oldlength", ctypes.c_float ),
	( "segments", ctypes.c_short ),
])

__freeze_rpythonic_struct( KeyingSet, [
])

__freeze_rpythonic_struct( bAction, [
])

__freeze_rpythonic_struct( FCurve, [
])

__freeze_rpythonic_struct( BezTriple, [
])

__freeze_rpythonic_struct( KeyingSetInfo, [
	( "next", ctypes.POINTER(KeyingSetInfo) ),
	( "prev", ctypes.POINTER(KeyingSetInfo) ),
	( "name", ( ctypes.c_char * 64 ) ),
	( "idname", ( ctypes.c_char * 64 ) ),
	( "keyingflag", ctypes.c_short ),
	( "poll", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(KeyingSetInfo),ctypes.POINTER(bContext),) ),
	( "iter", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(KeyingSetInfo),ctypes.POINTER(bContext),ctypes.POINTER(KeyingSet),) ),
	( "generate", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(KeyingSetInfo),ctypes.POINTER(bContext),ctypes.POINTER(KeyingSet),ctypes.POINTER(PointerRNA),) ),
	( "ext", ExtensionRNA ),
])

__freeze_rpythonic_struct( RenderInfo, [
	( "pr_rectx", ctypes.c_int ),
	( "pr_recty", ctypes.c_int ),
	( "curtile", ctypes.c_short ),
	( "tottile", ctypes.c_short ),
	( "status", ctypes.c_short ),
	( "disprect", rcti ),
	( "rect", ctypes.POINTER(ctypes.c_uint) ),
	( "re", ctypes.POINTER(Render) ),
])

__freeze_rpythonic_struct( View2D, [
	( "tot", rctf ),
	( "cur", rctf ),
	( "vert", rcti ),
	( "hor", rcti ),
	( "mask", rcti ),
	( "min", ( ctypes.c_float * 2 ) ),
	( "max", ( ctypes.c_float * 2 ) ),
	( "minzoom", ctypes.c_float ),
	( "maxzoom", ctypes.c_float ),
	( "scroll", ctypes.c_short ),
	( "scroll_ui", ctypes.c_short ),
	( "keeptot", ctypes.c_short ),
	( "keepzoom", ctypes.c_short ),
	( "keepofs", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "align", ctypes.c_short ),
	( "winx", ctypes.c_short ),
	( "winy", ctypes.c_short ),
	( "oldwinx", ctypes.c_short ),
	( "oldwiny", ctypes.c_short ),
	( "around", ctypes.c_short ),
	( "tab_offset", ctypes.POINTER(ctypes.c_float) ),
	( "tab_num", ctypes.c_int ),
	( "tab_cur", ctypes.c_int ),
])

__freeze_rpythonic_struct( bScreen, [
	( "C_id", ID ),
	( "vertbase", ListBase ),
	( "edgebase", ListBase ),
	( "areabase", ListBase ),
	( "regionbase", ListBase ),
	( "scene", ctypes.POINTER(Scene) ),
	( "newscene", ctypes.POINTER(Scene) ),
	( "redraws_flag", ctypes.c_int ),
	( "pad1", ctypes.c_int ),
	( "full", ctypes.c_short ),
	( "temp", ctypes.c_short ),
	( "winid", ctypes.c_short ),
	( "do_draw", ctypes.c_short ),
	( "do_refresh", ctypes.c_short ),
	( "do_draw_gesture", ctypes.c_short ),
	( "do_draw_paintcursor", ctypes.c_short ),
	( "do_draw_drag", ctypes.c_short ),
	( "swap", ctypes.c_short ),
	( "mainwin", ctypes.c_short ),
	( "subwinactive", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "animtimer", ctypes.POINTER(wmTimer) ),
	( "context", ctypes.POINTER(ctypes.c_void_p) ),
	( "handler", ( ctypes.c_short * 8 ) ),
])

__freeze_rpythonic_struct( ScrVert, [
	( "next", ctypes.POINTER(ScrVert) ),
	( "prev", ctypes.POINTER(ScrVert) ),
	( "newv", ctypes.POINTER(ScrVert) ),
	( "vec", vec2s ),
	( "flag", ctypes.c_int ),
])

__freeze_rpythonic_struct( ScrEdge, [
	( "next", ctypes.POINTER(ScrEdge) ),
	( "prev", ctypes.POINTER(ScrEdge) ),
	( "v1", ctypes.POINTER(ScrVert) ),
	( "v2", ctypes.POINTER(ScrVert) ),
	( "border", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( Panel, [
	( "next", ctypes.POINTER(Panel) ),
	( "prev", ctypes.POINTER(Panel) ),
	( "C_type", ctypes.POINTER(PanelType) ),
	( "layout", ctypes.POINTER(uiLayout) ),
	( "panelname", ( ctypes.c_char * 64 ) ),
	( "tabname", ( ctypes.c_char * 64 ) ),
	( "drawname", ( ctypes.c_char * 64 ) ),
	( "ofsx", ctypes.c_short ),
	( "ofsy", ctypes.c_short ),
	( "sizex", ctypes.c_short ),
	( "sizey", ctypes.c_short ),
	( "labelofs", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "runtime_flag", ctypes.c_short ),
	( "control", ctypes.c_short ),
	( "snap", ctypes.c_short ),
	( "sortorder", ctypes.c_int ),
	( "paneltab", ctypes.POINTER(Panel) ),
	( "activedata", ctypes.POINTER(ctypes.c_void_p) ),
	( "list_scroll", ctypes.c_int ),
	( "list_size", ctypes.c_int ),
	( "list_last_len", ctypes.c_int ),
	( "list_grip_size", ctypes.c_int ),
	( "list_search", ( ctypes.c_char * 64 ) ),
])

__freeze_rpythonic_struct( ScrArea, [
	( "next", ctypes.POINTER(ScrArea) ),
	( "prev", ctypes.POINTER(ScrArea) ),
	( "v1", ctypes.POINTER(ScrVert) ),
	( "v2", ctypes.POINTER(ScrVert) ),
	( "v3", ctypes.POINTER(ScrVert) ),
	( "v4", ctypes.POINTER(ScrVert) ),
	( "full", ctypes.POINTER(bScreen) ),
	( "totrct", rcti ),
	( "spacetype", ctypes.c_char ),
	( "butspacetype", ctypes.c_char ),
	( "winx", ctypes.c_short ),
	( "winy", ctypes.c_short ),
	( "headertype", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "do_refresh", ctypes.c_short ),
	( "cursor", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "C_type", ctypes.POINTER(SpaceType) ),
	( "spacedata", ListBase ),
	( "regionbase", ListBase ),
	( "handlers", ListBase ),
	( "actionzones", ListBase ),
])

__freeze_rpythonic_struct( ARegion, [
	( "next", ctypes.POINTER(ARegion) ),
	( "prev", ctypes.POINTER(ARegion) ),
	( "v2d", View2D ),
	( "winrct", rcti ),
	( "drawrct", rcti ),
	( "winx", ctypes.c_short ),
	( "winy", ctypes.c_short ),
	( "swinid", ctypes.c_short ),
	( "regiontype", ctypes.c_short ),
	( "alignment", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "fsize", ctypes.c_float ),
	( "sizex", ctypes.c_short ),
	( "sizey", ctypes.c_short ),
	( "do_draw", ctypes.c_short ),
	( "do_draw_overlay", ctypes.c_short ),
	( "swap", ctypes.c_short ),
	( "pad", ( ctypes.c_short * 3 ) ),
	( "C_type", ctypes.POINTER(ARegionType) ),
	( "uiblocks", ListBase ),
	( "panels", ListBase ),
	( "handlers", ListBase ),
	( "headerstr", ctypes.POINTER(ctypes.c_char) ),
	( "regiondata", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( CurveMapPoint, [
	( "x", ctypes.c_float ),
	( "y", ctypes.c_float ),
	( "flag", ctypes.c_short ),
	( "shorty", ctypes.c_short ),
])

__freeze_rpythonic_struct( CurveMap, [
	( "totpoint", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "C_range", ctypes.c_float ),
	( "mintable", ctypes.c_float ),
	( "maxtable", ctypes.c_float ),
	( "ext_in", ( ctypes.c_float * 2 ) ),
	( "ext_out", ( ctypes.c_float * 2 ) ),
	( "curve", ctypes.POINTER(CurveMapPoint) ),
	( "table", ctypes.POINTER(CurveMapPoint) ),
	( "premultable", ctypes.POINTER(CurveMapPoint) ),
])

__freeze_rpythonic_struct( CurveMapping, [
	( "flag", ctypes.c_int ),
	( "cur", ctypes.c_int ),
	( "preset", ctypes.c_int ),
	( "changed_timestamp", ctypes.c_int ),
	( "curr", rctf ),
	( "clipr", rctf ),
	( "cm", ( CurveMap * 4 ) ),
	( "black", ( ctypes.c_float * 3 ) ),
	( "white", ( ctypes.c_float * 3 ) ),
	( "bwmul", ( ctypes.c_float * 3 ) ),
	( "sample", ( ctypes.c_float * 3 ) ),
])

__freeze_rpythonic_struct( Histogram, [
	( "channels", ctypes.c_int ),
	( "x_resolution", ctypes.c_int ),
	( "data_r", ( ctypes.c_float * 256 ) ),
	( "data_g", ( ctypes.c_float * 256 ) ),
	( "data_b", ( ctypes.c_float * 256 ) ),
	( "data_luma", ( ctypes.c_float * 256 ) ),
	( "xmax", ctypes.c_float ),
	( "ymax", ctypes.c_float ),
	( "mode", ctypes.c_int ),
	( "height", ctypes.c_int ),
])

__freeze_rpythonic_struct( Scopes, [
	( "ok", ctypes.c_int ),
	( "sample_full", ctypes.c_int ),
	( "sample_lines", ctypes.c_int ),
	( "accuracy", ctypes.c_float ),
	( "wavefrm_mode", ctypes.c_int ),
	( "wavefrm_alpha", ctypes.c_float ),
	( "wavefrm_yfac", ctypes.c_float ),
	( "wavefrm_height", ctypes.c_int ),
	( "vecscope_alpha", ctypes.c_float ),
	( "vecscope_height", ctypes.c_int ),
	( "minmax", ( ctypes.c_float * 3 ) ),
	( "hist", Histogram ),
	( "waveform_1", ctypes.POINTER(ctypes.c_float) ),
	( "waveform_2", ctypes.POINTER(ctypes.c_float) ),
	( "waveform_3", ctypes.POINTER(ctypes.c_float) ),
	( "vecscope", ctypes.POINTER(ctypes.c_float) ),
	( "waveform_tot", ctypes.c_int ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( TreeStoreElem, [
	( "C_type", ctypes.c_short ),
	( "nr", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "used", ctypes.c_short ),
	( "C_id", ctypes.POINTER(ID) ),
])

__freeze_rpythonic_struct( TreeStore, [
	( "totelem", ctypes.c_int ),
	( "usedelem", ctypes.c_int ),
	( "data", ctypes.POINTER(TreeStoreElem) ),
])

__freeze_rpythonic_struct( GPUTexture, [
])

__freeze_rpythonic_struct( ImageUser, [
	( "scene", ctypes.POINTER(Scene) ),
	( "framenr", ctypes.c_int ),
	( "frames", ctypes.c_int ),
	( "offset", ctypes.c_int ),
	( "sfra", ctypes.c_int ),
	( "fie_ima", ctypes.c_char ),
	( "cycl", ctypes.c_char ),
	( "ok", ctypes.c_char ),
	( "pad", ctypes.c_char ),
	( "multi_index", ctypes.c_short ),
	( "layer", ctypes.c_short ),
	( "pass", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "pad2", ctypes.c_int ),
])

__freeze_rpythonic_struct( Image, [
	( "C_id", ID ),
	( "name", ( ctypes.c_char * 240 ) ),
	( "ibufs", ListBase ),
	( "gputexture", ctypes.POINTER(GPUTexture) ),
	( "anim", ctypes.POINTER(anim) ),
	( "rr", ctypes.POINTER(RenderResult) ),
	( "renders", ctypes.POINTER(( RenderResult * 8 )) ),
	( "render_slot", ctypes.c_short ),
	( "last_render_slot", ctypes.c_short ),
	( "ok", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "source", ctypes.c_short ),
	( "C_type", ctypes.c_short ),
	( "lastframe", ctypes.c_int ),
	( "tpageflag", ctypes.c_short ),
	( "totbind", ctypes.c_short ),
	( "xrep", ctypes.c_short ),
	( "yrep", ctypes.c_short ),
	( "twsta", ctypes.c_short ),
	( "twend", ctypes.c_short ),
	( "bindcode", ctypes.c_uint ),
	( "repbind", ctypes.POINTER(ctypes.c_uint) ),
	( "packedfile", ctypes.POINTER(PackedFile) ),
	( "preview", ctypes.POINTER(PreviewImage) ),
	( "lastupdate", ctypes.c_float ),
	( "lastused", ctypes.c_int ),
	( "animspeed", ctypes.c_short ),
	( "gen_x", ctypes.c_short ),
	( "gen_y", ctypes.c_short ),
	( "gen_type", ctypes.c_char ),
	( "gen_flag", ctypes.c_char ),
	( "aspx", ctypes.c_float ),
	( "aspy", ctypes.c_float ),
])

__freeze_rpythonic_struct( MovieTrackingBundle, [
])

__freeze_rpythonic_struct( MovieReconstructedCamera, [
	( "framenr", ctypes.c_int ),
	( "error", ctypes.c_float ),
	( "mat", ( ctypes.c_float * 4 ) ),
])

__freeze_rpythonic_struct( MovieTrackingCamera, [
	( "intrinsics", ctypes.POINTER(ctypes.c_void_p) ),
	( "sensor_width", ctypes.c_float ),
	( "pixel_aspect", ctypes.c_float ),
	( "pad", ctypes.c_float ),
	( "focal", ctypes.c_float ),
	( "units", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "principal", ( ctypes.c_float * 2 ) ),
	( "k1", ctypes.c_float ),
	( "k2", ctypes.c_float ),
	( "k3", ctypes.c_float ),
])

__freeze_rpythonic_struct( MovieTrackingMarker, [
	( "pos", ( ctypes.c_float * 2 ) ),
	( "framenr", ctypes.c_int ),
	( "flag", ctypes.c_int ),
])

__freeze_rpythonic_struct( MovieTrackingTrack, [
	( "next", ctypes.POINTER(MovieTrackingTrack) ),
	( "prev", ctypes.POINTER(MovieTrackingTrack) ),
	( "name", ( ctypes.c_char * 24 ) ),
	( "pat_min", ( ctypes.c_float * 2 ) ),
	( "pat_max", ( ctypes.c_float * 2 ) ),
	( "search_min", ( ctypes.c_float * 2 ) ),
	( "search_max", ( ctypes.c_float * 2 ) ),
	( "offset", ( ctypes.c_float * 2 ) ),
	( "markersnr", ctypes.c_int ),
	( "last_marker", ctypes.c_int ),
	( "markers", ctypes.POINTER(MovieTrackingMarker) ),
	( "bundle_pos", ( ctypes.c_float * 3 ) ),
	( "error", ctypes.c_float ),
	( "pad", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "pat_flag", ctypes.c_int ),
	( "search_flag", ctypes.c_int ),
	( "transflag", ctypes.c_short ),
	( "pad3", ( ctypes.c_char * 2 ) ),
	( "color", ( ctypes.c_float * 3 ) ),
	( "frames_limit", ctypes.c_short ),
	( "margin", ctypes.c_short ),
	( "pattern_match", ctypes.c_short ),
	( "tracker", ctypes.c_short ),
	( "pyramid_levels", ctypes.c_short ),
	( "pad2", ctypes.c_short ),
	( "minimum_correlation", ctypes.c_float ),
])

__freeze_rpythonic_struct( MovieTrackingSettings, [
	( "flag", ctypes.c_int ),
	( "default_tracker", ctypes.c_short ),
	( "default_pyramid_levels", ctypes.c_short ),
	( "default_minimum_correlation", ctypes.c_float ),
	( "default_pattern_size", ctypes.c_short ),
	( "default_search_size", ctypes.c_short ),
	( "default_frames_limit", ctypes.c_short ),
	( "default_margin", ctypes.c_short ),
	( "default_pattern_match", ctypes.c_short ),
	( "speed", ctypes.c_short ),
	( "keyframe1", ctypes.c_int ),
	( "keyframe2", ctypes.c_int ),
	( "refine_camera_intrinsics", ctypes.c_short ),
	( "pad2", ctypes.c_short ),
	( "dist", ctypes.c_float ),
	( "clean_frames", ctypes.c_int ),
	( "clean_action", ctypes.c_int ),
	( "clean_error", ctypes.c_float ),
	( "pad", ctypes.c_float ),
])

__freeze_rpythonic_struct( MovieTrackingStabilization, [
	( "flag", ctypes.c_int ),
	( "tot_track", ctypes.c_int ),
	( "act_track", ctypes.c_int ),
	( "maxscale", ctypes.c_float ),
	( "rot_track", ctypes.POINTER(MovieTrackingTrack) ),
	( "locinf", ctypes.c_float ),
	( "scaleinf", ctypes.c_float ),
	( "rotinf", ctypes.c_float ),
	( "ok", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "scale", ctypes.c_float ),
	( "scaleibuf", ctypes.POINTER(ImBuf) ),
])

__freeze_rpythonic_struct( MovieTrackingReconstruction, [
	( "flag", ctypes.c_int ),
	( "error", ctypes.c_float ),
	( "last_camera", ctypes.c_int ),
	( "camnr", ctypes.c_int ),
	( "cameras", ctypes.POINTER(MovieReconstructedCamera) ),
])

__freeze_rpythonic_struct( MovieTrackingStats, [
	( "message", ( ctypes.c_char * 256 ) ),
])

__freeze_rpythonic_struct( MovieTracking, [
	( "settings", MovieTrackingSettings ),
	( "camera", MovieTrackingCamera ),
	( "tracks", ListBase ),
	( "reconstruction", MovieTrackingReconstruction ),
	( "stabilization", MovieTrackingStabilization ),
	( "act_track", ctypes.POINTER(MovieTrackingTrack) ),
	( "stats", ctypes.POINTER(MovieTrackingStats) ),
])

__freeze_rpythonic_struct( MovieClipUser, [
	( "framenr", ctypes.c_int ),
	( "render_size", ctypes.c_short ),
	( "render_flag", ctypes.c_short ),
])

__freeze_rpythonic_struct( MovieClipProxy, [
	( "dir", ( ctypes.c_char * 160 ) ),
	( "tc", ctypes.c_short ),
	( "quality", ctypes.c_short ),
	( "build_size_flag", ctypes.c_short ),
	( "build_tc_flag", ctypes.c_short ),
	( "build_flag", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "pad2", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( MovieClip, [
	( "C_id", ID ),
	( "name", ( ctypes.c_char * 240 ) ),
	( "source", ctypes.c_int ),
	( "lastframe", ctypes.c_int ),
	( "lastsize", ( ctypes.c_int * 2 ) ),
	( "aspx", ctypes.c_float ),
	( "aspy", ctypes.c_float ),
	( "anim", ctypes.POINTER(anim) ),
	( "cache", ctypes.POINTER(MovieClipCache) ),
	( "gpd", ctypes.POINTER(bGPdata) ),
	( "tracking", MovieTracking ),
	( "tracking_context", ctypes.POINTER(ctypes.c_void_p) ),
	( "proxy", MovieClipProxy ),
	( "flag", ctypes.c_int ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( MovieClipCache, [
])

__freeze_rpythonic_struct( MovieClipScopes, [
	( "ok", ctypes.c_int ),
	( "track_preview_height", ctypes.c_int ),
	( "track_preview", ctypes.POINTER(ImBuf) ),
	( "track_pos", ( ctypes.c_float * 2 ) ),
	( "track_disabled", ctypes.c_short ),
	( "pad", ( ctypes.c_char * 2 ) ),
	( "framenr", ctypes.c_int ),
	( "track", ctypes.POINTER(MovieTrackingTrack) ),
	( "marker", ctypes.POINTER(MovieTrackingMarker) ),
	( "slide_scale", ( ctypes.c_float * 2 ) ),
])

__freeze_rpythonic_struct( BlendHandle, [
])

__freeze_rpythonic_struct( FileList, [
])

__freeze_rpythonic_struct( bDopeSheet, [
])

__freeze_rpythonic_struct( FileLayout, [
])

__freeze_rpythonic_struct( SpaceLink, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
])

__freeze_rpythonic_struct( SpaceInfo, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "rpt_mask", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 7 ) ),
])

__freeze_rpythonic_struct( SpaceIpo, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "v2d", View2D ),
	( "ads", ctypes.POINTER(bDopeSheet) ),
	( "ghostCurves", ListBase ),
	( "mode", ctypes.c_short ),
	( "autosnap", ctypes.c_short ),
	( "flag", ctypes.c_int ),
	( "cursorVal", ctypes.c_float ),
	( "around", ctypes.c_int ),
])

__freeze_rpythonic_struct( SpaceButs, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "ri", ctypes.POINTER(RenderInfo) ),
	( "v2d", View2D ),
	( "mainb", ctypes.c_short ),
	( "mainbo", ctypes.c_short ),
	( "mainbuser", ctypes.c_short ),
	( "re_align", ctypes.c_short ),
	( "align", ctypes.c_short ),
	( "preview", ctypes.c_short ),
	( "texture_context", ctypes.c_short ),
	( "flag", ctypes.c_char ),
	( "pad", ctypes.c_char ),
	( "path", ctypes.POINTER(ctypes.c_void_p) ),
	( "pathflag", ctypes.c_int ),
	( "dataicon", ctypes.c_int ),
	( "pinid", ctypes.POINTER(ID) ),
	( "texuser", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( SpaceSeq, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "v2d", View2D ),
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "mainb", ctypes.c_short ),
	( "render_size", ctypes.c_short ),
	( "chanshown", ctypes.c_short ),
	( "zebra", ctypes.c_short ),
	( "flag", ctypes.c_int ),
	( "zoom", ctypes.c_float ),
	( "view", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "gpd", ctypes.POINTER(bGPdata) ),
])

__freeze_rpythonic_struct( FileSelectParams, [
	( "title", ( ctypes.c_char * 32 ) ),
	( "dir", ( ctypes.c_char * 240 ) ),
	( "file", ( ctypes.c_char * 80 ) ),
	( "renamefile", ( ctypes.c_char * 80 ) ),
	( "renameedit", ( ctypes.c_char * 80 ) ),
	( "filter_glob", ( ctypes.c_char * 64 ) ),
	( "active_file", ctypes.c_int ),
	( "sel_first", ctypes.c_int ),
	( "sel_last", ctypes.c_int ),
	( "C_type", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "sort", ctypes.c_short ),
	( "display", ctypes.c_short ),
	( "filter", ctypes.c_short ),
	( "f_fp", ctypes.c_short ),
	( "fp_str", ( ctypes.c_char * 8 ) ),
])

__freeze_rpythonic_struct( SpaceFile, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "scroll_offset", ctypes.c_int ),
	( "params", ctypes.POINTER(FileSelectParams) ),
	( "files", ctypes.POINTER(FileList) ),
	( "folders_prev", ctypes.POINTER(ListBase) ),
	( "folders_next", ctypes.POINTER(ListBase) ),
	( "op", ctypes.POINTER(wmOperator) ),
	( "smoothscroll_timer", ctypes.POINTER(wmTimer) ),
	( "layout", ctypes.POINTER(FileLayout) ),
	( "recentnr", ctypes.c_short ),
	( "bookmarknr", ctypes.c_short ),
	( "systemnr", ctypes.c_short ),
	( "pad2", ctypes.c_short ),
])

__freeze_rpythonic_struct( SpaceOops, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "v2d", View2D ),
	( "tree", ListBase ),
	( "treestore", ctypes.POINTER(TreeStore) ),
	( "search_string", ( ctypes.c_char * 32 ) ),
	( "search_tse", TreeStoreElem ),
	( "flag", ctypes.c_short ),
	( "outlinevis", ctypes.c_short ),
	( "storeflag", ctypes.c_short ),
	( "search_flags", ctypes.c_short ),
])

__freeze_rpythonic_struct( SpaceImage, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "image", ctypes.POINTER(Image) ),
	( "iuser", ImageUser ),
	( "cumap", ctypes.POINTER(CurveMapping) ),
	( "scopes", Scopes ),
	( "sample_line_hist", Histogram ),
	( "gpd", ctypes.POINTER(bGPdata) ),
	( "cursor", ( ctypes.c_float * 2 ) ),
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "zoom", ctypes.c_float ),
	( "centx", ctypes.c_float ),
	( "centy", ctypes.c_float ),
	( "curtile", ctypes.c_short ),
	( "pad", ctypes.c_short ),
	( "lock", ctypes.c_short ),
	( "pin", ctypes.c_short ),
	( "dt_uv", ctypes.c_char ),
	( "sticky", ctypes.c_char ),
	( "dt_uvstretch", ctypes.c_char ),
	( "around", ctypes.c_char ),
])

__freeze_rpythonic_struct( SpaceNla, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "autosnap", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_int ),
	( "ads", ctypes.POINTER(bDopeSheet) ),
	( "v2d", View2D ),
])

__freeze_rpythonic_struct( SpaceText, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "text", ctypes.POINTER(Text) ),
	( "top", ctypes.c_int ),
	( "viewlines", ctypes.c_int ),
	( "flags", ctypes.c_short ),
	( "menunr", ctypes.c_short ),
	( "lheight", ctypes.c_short ),
	( "cwidth", ctypes.c_char ),
	( "linenrs_tot", ctypes.c_char ),
	( "left", ctypes.c_int ),
	( "showlinenrs", ctypes.c_int ),
	( "tabnumber", ctypes.c_int ),
	( "showsyntax", ctypes.c_short ),
	( "line_hlight", ctypes.c_short ),
	( "overwrite", ctypes.c_short ),
	( "live_edit", ctypes.c_short ),
	( "pix_per_line", ctypes.c_float ),
	( "txtscroll", rcti ),
	( "txtbar", rcti ),
	( "wordwrap", ctypes.c_int ),
	( "doplugins", ctypes.c_int ),
	( "findstr", ( ctypes.c_char * 256 ) ),
	( "replacestr", ( ctypes.c_char * 256 ) ),
	( "margin_column", ctypes.c_short ),
	( "pad", ( ctypes.c_char * 6 ) ),
	( "drawcache", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( Script, [
	( "C_id", ID ),
	( "py_draw", ctypes.POINTER(ctypes.c_void_p) ),
	( "py_event", ctypes.POINTER(ctypes.c_void_p) ),
	( "py_button", ctypes.POINTER(ctypes.c_void_p) ),
	( "py_browsercallback", ctypes.POINTER(ctypes.c_void_p) ),
	( "py_globaldict", ctypes.POINTER(ctypes.c_void_p) ),
	( "flags", ctypes.c_int ),
	( "lastspace", ctypes.c_int ),
	( "scriptname", ( ctypes.c_char * 256 ) ),
	( "scriptarg", ( ctypes.c_char * 256 ) ),
])

__freeze_rpythonic_struct( SpaceScript, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "script", ctypes.POINTER(Script) ),
	( "flags", ctypes.c_short ),
	( "menunr", ctypes.c_short ),
	( "pad1", ctypes.c_int ),
	( "but_refs", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( SpaceTimeCache, [
	( "next", ctypes.POINTER(SpaceTimeCache) ),
	( "prev", ctypes.POINTER(SpaceTimeCache) ),
	( "array", ctypes.POINTER(ctypes.c_float) ),
])

__freeze_rpythonic_struct( SpaceTime, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "v2d", View2D ),
	( "caches", ListBase ),
	( "cache_display", ctypes.c_int ),
	( "flag", ctypes.c_int ),
])

__freeze_rpythonic_struct( SpaceNode, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "v2d", View2D ),
	( "C_id", ctypes.POINTER(ID) ),
	( "from", ctypes.POINTER(ID) ),
	( "flag", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "aspect", ctypes.c_float ),
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "zoom", ctypes.c_float ),
	( "padf", ctypes.c_float ),
	( "mx", ctypes.c_float ),
	( "my", ctypes.c_float ),
	( "nodetree", ctypes.POINTER(bNodeTree) ),
	( "edittree", ctypes.POINTER(bNodeTree) ),
	( "treetype", ctypes.c_int ),
	( "texfrom", ctypes.c_short ),
	( "shaderfrom", ctypes.c_short ),
	( "recalc", ctypes.c_short ),
	( "pad", ( ctypes.c_short * 3 ) ),
	( "linkdrag", ListBase ),
	( "gpd", ctypes.POINTER(bGPdata) ),
])

__freeze_rpythonic_struct( SpaceLogic, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "flag", ctypes.c_short ),
	( "scaflag", ctypes.c_short ),
	( "pad", ctypes.c_int ),
	( "gpd", ctypes.POINTER(bGPdata) ),
])

__freeze_rpythonic_struct( ConsoleLine, [
	( "next", ctypes.POINTER(ConsoleLine) ),
	( "prev", ctypes.POINTER(ConsoleLine) ),
	( "len_alloc", ctypes.c_int ),
	( "C_len", ctypes.c_int ),
	( "line", ctypes.POINTER(ctypes.c_char) ),
	( "cursor", ctypes.c_int ),
	( "C_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( SpaceConsole, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "lheight", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "scrollback", ListBase ),
	( "history", ListBase ),
	( "prompt", ( ctypes.c_char * 256 ) ),
	( "language", ( ctypes.c_char * 32 ) ),
	( "sel_start", ctypes.c_int ),
	( "sel_end", ctypes.c_int ),
])

__freeze_rpythonic_struct( SpaceUserPref, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "filter", ( ctypes.c_char * 64 ) ),
])

__freeze_rpythonic_struct( SpaceClip, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "xlockof", ctypes.c_float ),
	( "ylockof", ctypes.c_float ),
	( "zoom", ctypes.c_float ),
	( "user", MovieClipUser ),
	( "clip", ctypes.POINTER(MovieClip) ),
	( "scopes", MovieClipScopes ),
	( "flag", ctypes.c_int ),
	( "mode", ctypes.c_short ),
	( "view", ctypes.c_short ),
	( "path_length", ctypes.c_int ),
	( "loc", ( ctypes.c_float * 2 ) ),
	( "scale", ctypes.c_float ),
	( "angle", ctypes.c_float ),
	( "pad", ctypes.c_int ),
	( "stabmat", ( ctypes.c_float * 4 ) ),
	( "unistabmat", ( ctypes.c_float * 4 ) ),
])

__freeze_rpythonic_struct( ViewDepths, [
])

__freeze_rpythonic_struct( BoundBox, [
])

__freeze_rpythonic_struct( SmoothViewStore, [
])

__freeze_rpythonic_struct( BGpic, [
	( "next", ctypes.POINTER(BGpic) ),
	( "prev", ctypes.POINTER(BGpic) ),
	( "ima", ctypes.POINTER(Image) ),
	( "iuser", ImageUser ),
	( "clip", ctypes.POINTER(MovieClip) ),
	( "cuser", MovieClipUser ),
	( "xof", ctypes.c_float ),
	( "yof", ctypes.c_float ),
	( "size", ctypes.c_float ),
	( "blend", ctypes.c_float ),
	( "view", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "source", ctypes.c_short ),
	( "pad", ctypes.c_short ),
])

__freeze_rpythonic_struct( RegionView3D, [
	( "winmat", ( ctypes.c_float * 4 ) ),
	( "viewmat", ( ctypes.c_float * 4 ) ),
	( "viewinv", ( ctypes.c_float * 4 ) ),
	( "persmat", ( ctypes.c_float * 4 ) ),
	( "persinv", ( ctypes.c_float * 4 ) ),
	( "viewmatob", ( ctypes.c_float * 4 ) ),
	( "persmatob", ( ctypes.c_float * 4 ) ),
	( "twmat", ( ctypes.c_float * 4 ) ),
	( "viewquat", ( ctypes.c_float * 4 ) ),
	( "dist", ctypes.c_float ),
	( "zfac", ctypes.c_float ),
	( "camdx", ctypes.c_float ),
	( "camdy", ctypes.c_float ),
	( "pixsize", ctypes.c_float ),
	( "ofs", ( ctypes.c_float * 3 ) ),
	( "camzoom", ctypes.c_short ),
	( "twdrawflag", ctypes.c_short ),
	( "is_persp", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 3 ) ),
	( "rflag", ctypes.c_short ),
	( "viewlock", ctypes.c_short ),
	( "persp", ctypes.c_short ),
	( "view", ctypes.c_short ),
	( "clip", ( ctypes.c_float * 6 ) ),
	( "clip_local", ( ctypes.c_float * 6 ) ),
	( "clipbb", ctypes.POINTER(BoundBox) ),
	( "gpd", ctypes.POINTER(bGPdata) ),
	( "localvd", ctypes.POINTER(RegionView3D) ),
	( "ri", ctypes.POINTER(RenderInfo) ),
	( "render_engine", ctypes.POINTER(RenderEngine) ),
	( "depths", ctypes.POINTER(ViewDepths) ),
	( "sms", ctypes.POINTER(SmoothViewStore) ),
	( "smooth_timer", ctypes.POINTER(wmTimer) ),
	( "lviewquat", ( ctypes.c_float * 4 ) ),
	( "lpersp", ctypes.c_short ),
	( "lview", ctypes.c_short ),
	( "gridview", ctypes.c_float ),
	( "twangle", ( ctypes.c_float * 3 ) ),
	( "rot_angle", ctypes.c_float ),
	( "rot_axis", ( ctypes.c_float * 3 ) ),
	( "pad2", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( View3D, [
	( "next", ctypes.POINTER(SpaceLink) ),
	( "prev", ctypes.POINTER(SpaceLink) ),
	( "regionbase", ListBase ),
	( "spacetype", ctypes.c_int ),
	( "blockscale", ctypes.c_float ),
	( "blockhandler", ( ctypes.c_short * 8 ) ),
	( "viewquat", ( ctypes.c_float * 4 ) ),
	( "dist", ctypes.c_float ),
	( "bundle_size", ctypes.c_float ),
	( "bundle_drawtype", ctypes.c_short ),
	( "pad", ( ctypes.c_char * 6 ) ),
	( "lay_used", ctypes.c_uint ),
	( "persp", ctypes.c_short ),
	( "view", ctypes.c_short ),
	( "camera", ctypes.POINTER(Object) ),
	( "ob_centre", ctypes.POINTER(Object) ),
	( "bgpicbase", ListBase ),
	( "bgpic", ctypes.POINTER(BGpic) ),
	( "localvd", ctypes.POINTER(View3D) ),
	( "ob_centre_bone", ( ctypes.c_char * 32 ) ),
	( "lay", ctypes.c_uint ),
	( "layact", ctypes.c_int ),
	( "drawtype", ctypes.c_short ),
	( "ob_centre_cursor", ctypes.c_short ),
	( "scenelock", ctypes.c_short ),
	( "around", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "flag2", ctypes.c_short ),
	( "lens", ctypes.c_float ),
	( "grid", ctypes.c_float ),
	( "near", ctypes.c_float ),
	( "far", ctypes.c_float ),
	( "ofs", ( ctypes.c_float * 3 ) ),
	( "cursor", ( ctypes.c_float * 3 ) ),
	( "modeselect", ctypes.c_short ),
	( "gridlines", ctypes.c_short ),
	( "gridsubdiv", ctypes.c_short ),
	( "gridflag", ctypes.c_char ),
	( "twtype", ctypes.c_char ),
	( "twmode", ctypes.c_char ),
	( "twflag", ctypes.c_char ),
	( "pad2", ( ctypes.c_char * 2 ) ),
	( "afterdraw_transp", ListBase ),
	( "afterdraw_xray", ListBase ),
	( "afterdraw_xraytransp", ListBase ),
	( "zbuf", ctypes.c_short ),
	( "transp", ctypes.c_short ),
	( "xray", ctypes.c_short ),
	( "pad3", ( ctypes.c_char * 2 ) ),
	( "properties_storage", ctypes.POINTER(ctypes.c_void_p) ),
	( "gpd", ctypes.POINTER(bGPdata) ),
])

__freeze_rpythonic_struct( EditFace, [
])

__freeze_rpythonic_struct( wmJob, [
])

__freeze_rpythonic_struct( BCursor, [
	( "small_bm", ctypes.POINTER(ctypes.c_char) ),
	( "small_mask", ctypes.POINTER(ctypes.c_char) ),
	( "small_sizex", ctypes.c_char ),
	( "small_sizey", ctypes.c_char ),
	( "small_hotx", ctypes.c_char ),
	( "small_hoty", ctypes.c_char ),
	( "big_bm", ctypes.POINTER(ctypes.c_char) ),
	( "big_mask", ctypes.POINTER(ctypes.c_char) ),
	( "big_sizex", ctypes.c_char ),
	( "big_sizey", ctypes.c_char ),
	( "big_hotx", ctypes.c_char ),
	( "big_hoty", ctypes.c_char ),
	( "fg_color", ctypes.c_char ),
	( "bg_color", ctypes.c_char ),
])

__freeze_rpythonic_struct( wmNotifier, [
	( "next", ctypes.POINTER(wmNotifier) ),
	( "prev", ctypes.POINTER(wmNotifier) ),
	( "wm", ctypes.POINTER(wmWindowManager) ),
	( "window", ctypes.POINTER(wmWindow) ),
	( "swinid", ctypes.c_int ),
	( "category", ctypes.c_uint ),
	( "data", ctypes.c_uint ),
	( "subtype", ctypes.c_uint ),
	( "action", ctypes.c_uint ),
	( "reference", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( wmGesture, [
	( "next", ctypes.POINTER(wmGesture) ),
	( "prev", ctypes.POINTER(wmGesture) ),
	( "event_type", ctypes.c_int ),
	( "mode", ctypes.c_int ),
	( "C_type", ctypes.c_int ),
	( "swinid", ctypes.c_int ),
	( "points", ctypes.c_int ),
	( "size", ctypes.c_int ),
	( "customdata", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( wmEvent, [
	( "next", ctypes.POINTER(wmEvent) ),
	( "prev", ctypes.POINTER(wmEvent) ),
	( "C_type", ctypes.c_short ),
	( "val", ctypes.c_short ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "mval", ( ctypes.c_int * 2 ) ),
	( "utf8_buf", ( ctypes.c_char * 6 ) ),
	( "ascii", ctypes.c_char ),
	( "pad", ctypes.c_char ),
	( "prevtype", ctypes.c_short ),
	( "prevval", ctypes.c_short ),
	( "prevx", ctypes.c_int ),
	( "prevy", ctypes.c_int ),
	( "prevclicktime", ctypes.c_double ),
	( "prevclickx", ctypes.c_int ),
	( "prevclicky", ctypes.c_int ),
	( "shift", ctypes.c_short ),
	( "ctrl", ctypes.c_short ),
	( "alt", ctypes.c_short ),
	( "oskey", ctypes.c_short ),
	( "keymodifier", ctypes.c_short ),
	( "pad1", ctypes.c_short ),
	( "keymap_idname", ctypes.POINTER(ctypes.c_char) ),
	( "custom", ctypes.c_short ),
	( "customdatafree", ctypes.c_short ),
	( "pad2", ctypes.c_int ),
	( "customdata", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( wmTabletData, [
	( "Active", ctypes.c_int ),
	( "Pressure", ctypes.c_float ),
	( "Xtilt", ctypes.c_float ),
	( "Ytilt", ctypes.c_float ),
])

__freeze_rpythonic_struct( wmNDOFMotionData, [
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xcc78bec>
	#opaque-warning# <rpythonic.rpythonic.SomeThing object at 0xcc78e8c>
	( "dt", ctypes.c_float ),
	( "progress", ctypes.c_int ),
])

__freeze_rpythonic_struct( wmTimer, [
	( "next", ctypes.POINTER(wmTimer) ),
	( "prev", ctypes.POINTER(wmTimer) ),
	( "win", ctypes.POINTER(wmWindow) ),
	( "timestep", ctypes.c_double ),
	( "event_type", ctypes.c_int ),
	( "customdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "duration", ctypes.c_double ),
	( "delta", ctypes.c_double ),
	( "ltime", ctypes.c_double ),
	( "ntime", ctypes.c_double ),
	( "stime", ctypes.c_double ),
	( "sleep", ctypes.c_int ),
])

__freeze_rpythonic_struct( wmOperatorType, [
	( "name", ctypes.POINTER(ctypes.c_char) ),
	( "idname", ctypes.POINTER(ctypes.c_char) ),
	( "description", ctypes.POINTER(ctypes.c_char) ),
	( "C_exec", ctypes.c_void_p ),
	( "check", ctypes.c_void_p ),
	( "invoke", ctypes.c_void_p ),
	( "cancel", ctypes.c_void_p ),
	( "modal", ctypes.c_void_p ),
	( "poll", ctypes.c_void_p ),
	( "ui", ctypes.c_void_p ),
	( "srna", ctypes.POINTER(StructRNA) ),
	( "prop", ctypes.POINTER(PropertyRNA) ),
	( "macro", ListBase ),
	( "modalkeymap", ctypes.POINTER(wmKeyMap) ),
	( "pyop_data", ctypes.POINTER(ctypes.c_void_p) ),
	( "pyop_poll", ctypes.c_void_p ),
	( "ext", ExtensionRNA ),
	( "flag", ctypes.c_short ),
])

__freeze_rpythonic_struct( wmReport, [
	( "next", ctypes.POINTER(wmReport) ),
	( "prev", ctypes.POINTER(wmReport) ),
	( "typestr", ctypes.POINTER(ctypes.c_char) ),
	( "message", ctypes.POINTER(ctypes.c_char) ),
	( "C_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( wmDrag, [
	( "next", ctypes.POINTER(wmDrag) ),
	( "prev", ctypes.POINTER(wmDrag) ),
	( "icon", ctypes.c_int ),
	( "C_type", ctypes.c_int ),
	( "poin", ctypes.POINTER(ctypes.c_void_p) ),
	( "path", ( ctypes.c_char * 240 ) ),
	( "value", ctypes.c_double ),
	( "imb", ctypes.POINTER(ImBuf) ),
	( "scale", ctypes.c_float ),
	( "sx", ctypes.c_int ),
	( "sy", ctypes.c_int ),
	( "opname", ( ctypes.c_char * 240 ) ),
])

__freeze_rpythonic_struct( wmDropBox, [
	( "next", ctypes.POINTER(wmDropBox) ),
	( "prev", ctypes.POINTER(wmDropBox) ),
	( "poll", ctypes.c_void_p ),
	( "copy", ctypes.c_void_p ),
	( "ot", ctypes.POINTER(wmOperatorType) ),
	( "properties", ctypes.POINTER(IDProperty) ),
	( "ptr", ctypes.POINTER(PointerRNA) ),
	( "opcontext", ctypes.c_short ),
])

__freeze_rpythonic_struct( RecentFile, [
	( "next", ctypes.POINTER(RecentFile) ),
	( "prev", ctypes.POINTER(RecentFile) ),
	( "filepath", ctypes.POINTER(ctypes.c_char) ),
])

__freeze_rpythonic_struct( wmPaintCursor, [
	( "next", ctypes.POINTER(wmPaintCursor) ),
	( "prev", ctypes.POINTER(wmPaintCursor) ),
	( "customdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "poll", ctypes.c_void_p ),
	( "draw", ctypes.c_void_p ),
])

__freeze_rpythonic_struct( wmEventHandler, [
	( "next", ctypes.POINTER(wmEventHandler) ),
	( "prev", ctypes.POINTER(wmEventHandler) ),
	( "C_type", ctypes.c_int ),
	( "flag", ctypes.c_int ),
	( "keymap", ctypes.POINTER(wmKeyMap) ),
	( "bblocal", ctypes.POINTER(rcti) ),
	( "bbwin", ctypes.POINTER(rcti) ),
	( "op", ctypes.POINTER(wmOperator) ),
	( "op_area", ctypes.POINTER(ScrArea) ),
	( "op_region", ctypes.POINTER(ARegion) ),
	( "ui_handle", ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(bContext),ctypes.POINTER(wmEvent),ctypes.POINTER(ctypes.c_void_p),) ),
	( "ui_remove", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),) ),
	( "ui_userdata", ctypes.POINTER(ctypes.c_void_p) ),
	( "ui_area", ctypes.POINTER(ScrArea) ),
	( "ui_region", ctypes.POINTER(ARegion) ),
	( "ui_menu", ctypes.POINTER(ARegion) ),
	( "filescreen", ctypes.POINTER(bScreen) ),
	( "dropboxes", ctypes.POINTER(ListBase) ),
])

__freeze_rpythonic_struct( SmokeModifierData, [
])

__freeze_rpythonic_struct( GPUFrameBuffer, [
])

__freeze_rpythonic_struct( GPUOffScreen, [
])

__freeze_rpythonic_struct( GPUShader, [
])

__freeze_rpythonic_struct( GPUVertexAttribs, [
	( "layer", ( layer * 32 ) ),
	( "totlayer", ctypes.c_int ),
])

__freeze_rpythonic_struct( layer, [
	( "C_type", ( ctypes.c_int * 32 ) ),
	( "glindex", ( ctypes.c_int * 32 ) ),
	( "gltexco", ( ctypes.c_int * 32 ) ),
	( "attribid", ( ctypes.c_int * 32 ) ),
	( "name", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( GPUVertPointLink, [
])

__freeze_rpythonic_struct( GPUBuffer, [
	( "size", ctypes.c_int ),
	( "pointer", ctypes.POINTER(ctypes.c_void_p) ),
	( "C_id", ctypes.c_uint ),
])

__freeze_rpythonic_struct( GPUBufferMaterial, [
	( "start", ctypes.c_int ),
	( "totpoint", ctypes.c_int ),
	( "mat_nr", ctypes.c_short ),
])

__freeze_rpythonic_struct( GPUDrawObject, [
	( "points", ctypes.POINTER(GPUBuffer) ),
	( "normals", ctypes.POINTER(GPUBuffer) ),
	( "uv", ctypes.POINTER(GPUBuffer) ),
	( "colors", ctypes.POINTER(GPUBuffer) ),
	( "edges", ctypes.POINTER(GPUBuffer) ),
	( "uvedges", ctypes.POINTER(GPUBuffer) ),
	( "triangle_to_mface", ctypes.POINTER(ctypes.c_int) ),
	( "vert_points", ctypes.POINTER(GPUVertPointLink) ),
	( "vert_points_mem", ctypes.POINTER(GPUVertPointLink) ),
	( "vert_points_usage", ctypes.c_int ),
	( "colType", ctypes.c_int ),
	( "materials", ctypes.POINTER(GPUBufferMaterial) ),
	( "totmaterial", ctypes.c_int ),
	( "tot_triangle_point", ctypes.c_int ),
	( "tot_loose_point", ctypes.c_int ),
	( "totvert", ctypes.c_int ),
	( "totedge", ctypes.c_int ),
	( "legacy", ctypes.c_int ),
])

__freeze_rpythonic_struct( GPUAttrib, [
	( "index", ctypes.c_int ),
	( "size", ctypes.c_int ),
	( "C_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( GPU_Buffers, [
])

__freeze_rpythonic_struct( BHead, [
])

__freeze_rpythonic_struct( BlendFileData, [
	( "main", ctypes.POINTER(Main) ),
	( "user", ctypes.POINTER(UserDef) ),
	( "winpos", ctypes.c_int ),
	( "fileflags", ctypes.c_int ),
	( "displaymode", ctypes.c_int ),
	( "globalf", ctypes.c_int ),
	( "filename", ( ctypes.c_char * 240 ) ),
	( "curscreen", ctypes.POINTER(bScreen) ),
	( "curscene", ctypes.POINTER(Scene) ),
	( "C_type", ctypes.c_int ),
])

__freeze_rpythonic_struct( bPose, [
])

__freeze_rpythonic_struct( BIK_ParamValue, [
	( "C_type", ctypes.c_short ),
	( "length", ctypes.c_short ),
	( "value", value ),
])

__freeze_rpythonic_struct( value, [
	( "f", ( ctypes.c_float * 8 ) ),
	( "i", ( ctypes.c_int * 8 ) ),
	( "s", ( ctypes.c_char * 32 ) ),
])

__freeze_rpythonic_struct( GHOST_TabletData, [
	( "Active", ctypes.c_int ),
	( "Pressure", ctypes.c_float ),
	( "Xtilt", ctypes.c_float ),
	( "Ytilt", ctypes.c_float ),
])

__freeze_rpythonic_struct( GHOST_TEventCursorData, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TEventButtonData, [
	( "button", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TEventWheelData, [
	( "z", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TEventTrackpadData, [
	( "subtype", ctypes.c_int ),
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "deltaX", ctypes.c_int ),
	( "deltaY", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TEventDragnDropData, [
	( "x", ctypes.c_int ),
	( "y", ctypes.c_int ),
	( "dataType", ctypes.c_int ),
	( "data", ctypes.POINTER(ctypes.c_void_p) ),
])

__freeze_rpythonic_struct( GHOST_TStringArray, [
	( "count", ctypes.c_int ),
	( "strings", ctypes.POINTER(ctypes.POINTER(ctypes.c_ubyte)) ),
])

__freeze_rpythonic_struct( GHOST_TEventNDOFMotionData, [
	( "tx", ctypes.c_float ),
	( "ty", ctypes.c_float ),
	( "tz", ctypes.c_float ),
	( "rx", ctypes.c_float ),
	( "ry", ctypes.c_float ),
	( "rz", ctypes.c_float ),
	( "dt", ctypes.c_float ),
	( "progress", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TEventNDOFButtonData, [
	( "action", ctypes.c_int ),
	( "button", ctypes.c_short ),
])

__freeze_rpythonic_struct( GHOST_TEventKeyData, [
	( "key", ctypes.c_int ),
	( "ascii", ctypes.c_char ),
	( "utf8_buf", ( ctypes.c_char * 6 ) ),
])

__freeze_rpythonic_struct( GHOST_DisplaySetting, [
	( "xPixels", ctypes.c_uint ),
	( "yPixels", ctypes.c_uint ),
	( "bpp", ctypes.c_uint ),
	( "frequency", ctypes.c_uint ),
])

__freeze_rpythonic_struct( GHOST_SystemHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_TimerTaskHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_WindowHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_EventHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_RectangleHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_EventConsumerHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( GHOST_SystemPathsHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plPhysicsSdkHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plDynamicsWorldHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plRigidBodyHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plCollisionShapeHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plConstraintHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plMeshInterfaceHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plCollisionBroadphaseHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plBroadphaseProxyHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plCollisionWorldHandle__, [
	( "unused", ctypes.c_int ),
])

__freeze_rpythonic_struct( plRayCastResult, [
	( "m_body", ctypes.POINTER(plRigidBodyHandle__) ),
	( "m_shape", ctypes.POINTER(plCollisionShapeHandle__) ),
	( "m_positionWorld", ( ctypes.c_float * 3 ) ),
	( "m_normalWorld", ( ctypes.c_float * 3 ) ),
])

__freeze_rpythonic_struct( BulletSoftBody, [
])

__freeze_rpythonic_struct( Ipo, [
])

__freeze_rpythonic_struct( Ocean, [
])

__freeze_rpythonic_struct( MTex, [
	( "texco", ctypes.c_short ),
	( "mapto", ctypes.c_short ),
	( "maptoneg", ctypes.c_short ),
	( "blendtype", ctypes.c_short ),
	( "C_object", ctypes.POINTER(Object) ),
	( "tex", ctypes.POINTER(Tex) ),
	( "uvname", ( ctypes.c_char * 32 ) ),
	( "projx", ctypes.c_char ),
	( "projy", ctypes.c_char ),
	( "projz", ctypes.c_char ),
	( "mapping", ctypes.c_char ),
	( "ofs", ( ctypes.c_float * 3 ) ),
	( "size", ( ctypes.c_float * 3 ) ),
	( "rot", ctypes.c_float ),
	( "texflag", ctypes.c_short ),
	( "colormodel", ctypes.c_short ),
	( "pmapto", ctypes.c_short ),
	( "pmaptoneg", ctypes.c_short ),
	( "normapspace", ctypes.c_short ),
	( "which_output", ctypes.c_short ),
	( "brush_map_mode", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 7 ) ),
	( "r", ctypes.c_float ),
	( "g", ctypes.c_float ),
	( "b", ctypes.c_float ),
	( "k", ctypes.c_float ),
	( "def_var", ctypes.c_float ),
	( "rt", ctypes.c_float ),
	( "colfac", ctypes.c_float ),
	( "varfac", ctypes.c_float ),
	( "norfac", ctypes.c_float ),
	( "dispfac", ctypes.c_float ),
	( "warpfac", ctypes.c_float ),
	( "colspecfac", ctypes.c_float ),
	( "mirrfac", ctypes.c_float ),
	( "alphafac", ctypes.c_float ),
	( "difffac", ctypes.c_float ),
	( "specfac", ctypes.c_float ),
	( "emitfac", ctypes.c_float ),
	( "hardfac", ctypes.c_float ),
	( "raymirrfac", ctypes.c_float ),
	( "translfac", ctypes.c_float ),
	( "ambfac", ctypes.c_float ),
	( "colemitfac", ctypes.c_float ),
	( "colreflfac", ctypes.c_float ),
	( "coltransfac", ctypes.c_float ),
	( "densfac", ctypes.c_float ),
	( "scatterfac", ctypes.c_float ),
	( "reflfac", ctypes.c_float ),
	( "timefac", ctypes.c_float ),
	( "lengthfac", ctypes.c_float ),
	( "clumpfac", ctypes.c_float ),
	( "dampfac", ctypes.c_float ),
	( "kinkfac", ctypes.c_float ),
	( "roughfac", ctypes.c_float ),
	( "padensfac", ctypes.c_float ),
	( "gravityfac", ctypes.c_float ),
	( "lifefac", ctypes.c_float ),
	( "sizefac", ctypes.c_float ),
	( "ivelfac", ctypes.c_float ),
	( "fieldfac", ctypes.c_float ),
	( "shadowfac", ctypes.c_float ),
	( "zenupfac", ctypes.c_float ),
	( "zendownfac", ctypes.c_float ),
	( "blendfac", ctypes.c_float ),
])

__freeze_rpythonic_struct( PluginTex, [
	( "name", ( ctypes.c_char * 160 ) ),
	( "handle", ctypes.POINTER(ctypes.c_void_p) ),
	( "pname", ctypes.POINTER(ctypes.c_char) ),
	( "stnames", ctypes.POINTER(ctypes.c_char) ),
	( "stypes", ctypes.c_int ),
	( "vars", ctypes.c_int ),
	( "varstr", ctypes.POINTER(ctypes.c_void_p) ),
	( "result", ctypes.POINTER(ctypes.c_float) ),
	( "cfra", ctypes.POINTER(ctypes.c_float) ),
	( "data", ( ctypes.c_float * 32 ) ),
	( "doit", ctypes.c_void_p ),
	( "instance_init", ctypes.c_void_p ),
	( "callback", ctypes.c_void_p ),
	( "version", ctypes.c_int ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( CBData, [
	( "r", ctypes.c_float ),
	( "g", ctypes.c_float ),
	( "b", ctypes.c_float ),
	( "a", ctypes.c_float ),
	( "pos", ctypes.c_float ),
	( "cur", ctypes.c_int ),
])

__freeze_rpythonic_struct( ColorBand, [
	( "flag", ctypes.c_short ),
	( "tot", ctypes.c_short ),
	( "cur", ctypes.c_short ),
	( "ipotype", ctypes.c_short ),
	( "data", ( CBData * 32 ) ),
])

__freeze_rpythonic_struct( EnvMap, [
	( "C_object", ctypes.POINTER(Object) ),
	( "ima", ctypes.POINTER(Image) ),
	( "cube", ctypes.POINTER(( ImBuf * 6 )) ),
	( "imat", ( ctypes.c_float * 4 ) ),
	( "obimat", ( ctypes.c_float * 3 ) ),
	( "C_type", ctypes.c_short ),
	( "stype", ctypes.c_short ),
	( "clipsta", ctypes.c_float ),
	( "clipend", ctypes.c_float ),
	( "viewscale", ctypes.c_float ),
	( "notlay", ctypes.c_uint ),
	( "cuberes", ctypes.c_short ),
	( "depth", ctypes.c_short ),
	( "ok", ctypes.c_int ),
	( "lastframe", ctypes.c_int ),
	( "recalc", ctypes.c_short ),
	( "lastsize", ctypes.c_short ),
])

__freeze_rpythonic_struct( PointDensity, [
	( "flag", ctypes.c_short ),
	( "falloff_type", ctypes.c_short ),
	( "falloff_softness", ctypes.c_float ),
	( "radius", ctypes.c_float ),
	( "source", ctypes.c_short ),
	( "color_source", ctypes.c_short ),
	( "totpoints", ctypes.c_int ),
	( "pdpad", ctypes.c_int ),
	( "C_object", ctypes.POINTER(Object) ),
	( "psys", ctypes.c_int ),
	( "psys_cache_space", ctypes.c_short ),
	( "ob_cache_space", ctypes.c_short ),
	( "point_tree", ctypes.POINTER(ctypes.c_void_p) ),
	( "point_data", ctypes.POINTER(ctypes.c_float) ),
	( "noise_size", ctypes.c_float ),
	( "noise_depth", ctypes.c_short ),
	( "noise_influence", ctypes.c_short ),
	( "noise_basis", ctypes.c_short ),
	( "pdpad3", ( ctypes.c_short * 3 ) ),
	( "noise_fac", ctypes.c_float ),
	( "speed_scale", ctypes.c_float ),
	( "falloff_speed_scale", ctypes.c_float ),
	( "pdpad2", ctypes.c_float ),
	( "coba", ctypes.POINTER(ColorBand) ),
	( "falloff_curve", ctypes.POINTER(CurveMapping) ),
])

__freeze_rpythonic_struct( VoxelData, [
	( "resol", ( ctypes.c_int * 3 ) ),
	( "interp_type", ctypes.c_int ),
	( "file_format", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "extend", ctypes.c_short ),
	( "smoked_type", ctypes.c_short ),
	( "C_object", ctypes.POINTER(Object) ),
	( "int_multiplier", ctypes.c_float ),
	( "still_frame", ctypes.c_int ),
	( "source_path", ( ctypes.c_char * 240 ) ),
	( "dataset", ctypes.POINTER(ctypes.c_float) ),
	( "cachedframe", ctypes.c_int ),
	( "ok", ctypes.c_int ),
])

__freeze_rpythonic_struct( OceanTex, [
	( "C_object", ctypes.POINTER(Object) ),
	( "oceanmod", ( ctypes.c_char * 64 ) ),
	( "output", ctypes.c_int ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( Tex, [
	( "C_id", ID ),
	( "adt", ctypes.POINTER(AnimData) ),
	( "noisesize", ctypes.c_float ),
	( "turbul", ctypes.c_float ),
	( "bright", ctypes.c_float ),
	( "contrast", ctypes.c_float ),
	( "saturation", ctypes.c_float ),
	( "rfac", ctypes.c_float ),
	( "gfac", ctypes.c_float ),
	( "bfac", ctypes.c_float ),
	( "filtersize", ctypes.c_float ),
	( "pad2", ctypes.c_float ),
	( "mg_H", ctypes.c_float ),
	( "mg_lacunarity", ctypes.c_float ),
	( "mg_octaves", ctypes.c_float ),
	( "mg_offset", ctypes.c_float ),
	( "mg_gain", ctypes.c_float ),
	( "dist_amount", ctypes.c_float ),
	( "ns_outscale", ctypes.c_float ),
	( "vn_w1", ctypes.c_float ),
	( "vn_w2", ctypes.c_float ),
	( "vn_w3", ctypes.c_float ),
	( "vn_w4", ctypes.c_float ),
	( "vn_mexp", ctypes.c_float ),
	( "vn_distm", ctypes.c_short ),
	( "vn_coltype", ctypes.c_short ),
	( "noisedepth", ctypes.c_short ),
	( "noisetype", ctypes.c_short ),
	( "noisebasis", ctypes.c_short ),
	( "noisebasis2", ctypes.c_short ),
	( "imaflag", ctypes.c_short ),
	( "flag", ctypes.c_short ),
	( "C_type", ctypes.c_short ),
	( "stype", ctypes.c_short ),
	( "cropxmin", ctypes.c_float ),
	( "cropymin", ctypes.c_float ),
	( "cropxmax", ctypes.c_float ),
	( "cropymax", ctypes.c_float ),
	( "texfilter", ctypes.c_int ),
	( "afmax", ctypes.c_int ),
	( "xrepeat", ctypes.c_short ),
	( "yrepeat", ctypes.c_short ),
	( "extend", ctypes.c_short ),
	( "fie_ima", ctypes.c_short ),
	( "C_len", ctypes.c_int ),
	( "frames", ctypes.c_int ),
	( "offset", ctypes.c_int ),
	( "sfra", ctypes.c_int ),
	( "checkerdist", ctypes.c_float ),
	( "nabla", ctypes.c_float ),
	( "pad1", ctypes.c_float ),
	( "iuser", ImageUser ),
	( "nodetree", ctypes.POINTER(bNodeTree) ),
	( "ipo", ctypes.POINTER(Ipo) ),
	( "ima", ctypes.POINTER(Image) ),
	( "plugin", ctypes.POINTER(PluginTex) ),
	( "coba", ctypes.POINTER(ColorBand) ),
	( "env", ctypes.POINTER(EnvMap) ),
	( "preview", ctypes.POINTER(PreviewImage) ),
	( "pd", ctypes.POINTER(PointDensity) ),
	( "vd", ctypes.POINTER(VoxelData) ),
	( "ot", ctypes.POINTER(OceanTex) ),
	( "use_nodes", ctypes.c_char ),
	( "pad", ( ctypes.c_char * 7 ) ),
])

__freeze_rpythonic_struct( TexMapping, [
	( "loc", ( ctypes.c_float * 3 ) ),
	( "rot", ( ctypes.c_float * 3 ) ),
	( "size", ( ctypes.c_float * 3 ) ),
	( "flag", ctypes.c_int ),
	( "projx", ctypes.c_char ),
	( "projy", ctypes.c_char ),
	( "projz", ctypes.c_char ),
	( "mapping", ctypes.c_char ),
	( "pad", ctypes.c_int ),
	( "mat", ( ctypes.c_float * 4 ) ),
	( "min", ( ctypes.c_float * 3 ) ),
	( "max", ( ctypes.c_float * 3 ) ),
	( "ob", ctypes.POINTER(Object) ),
])

__freeze_rpythonic_struct( ColorMapping, [
	( "coba", ColorBand ),
	( "bright", ctypes.c_float ),
	( "contrast", ctypes.c_float ),
	( "saturation", ctypes.c_float ),
	( "flag", ctypes.c_int ),
	( "blend_color", ( ctypes.c_float * 3 ) ),
	( "blend_factor", ctypes.c_float ),
	( "blend_type", ctypes.c_int ),
	( "pad", ( ctypes.c_int * 3 ) ),
])

__freeze_rpythonic_struct( uiFont, [
	( "next", ctypes.POINTER(uiFont) ),
	( "prev", ctypes.POINTER(uiFont) ),
	( "filename", ( ctypes.c_char * 256 ) ),
	( "blf_id", ctypes.c_short ),
	( "uifont_id", ctypes.c_short ),
	( "r_to_l", ctypes.c_short ),
	( "pad", ctypes.c_short ),
])

__freeze_rpythonic_struct( uiFontStyle, [
	( "uifont_id", ctypes.c_short ),
	( "points", ctypes.c_short ),
	( "kerning", ctypes.c_short ),
	( "pad", ( ctypes.c_char * 6 ) ),
	( "italic", ctypes.c_short ),
	( "bold", ctypes.c_short ),
	( "shadow", ctypes.c_short ),
	( "shadx", ctypes.c_short ),
	( "shady", ctypes.c_short ),
	( "align", ctypes.c_short ),
	( "shadowalpha", ctypes.c_float ),
	( "shadowcolor", ctypes.c_float ),
])

__freeze_rpythonic_struct( uiStyle, [
	( "next", ctypes.POINTER(uiStyle) ),
	( "prev", ctypes.POINTER(uiStyle) ),
	( "name", ( ctypes.c_char * 64 ) ),
	( "paneltitle", uiFontStyle ),
	( "grouplabel", uiFontStyle ),
	( "widgetlabel", uiFontStyle ),
	( "widget", uiFontStyle ),
	( "panelzoom", ctypes.c_float ),
	( "minlabelchars", ctypes.c_short ),
	( "minwidgetchars", ctypes.c_short ),
	( "columnspace", ctypes.c_short ),
	( "templatespace", ctypes.c_short ),
	( "boxspace", ctypes.c_short ),
	( "buttonspacex", ctypes.c_short ),
	( "buttonspacey", ctypes.c_short ),
	( "panelspace", ctypes.c_short ),
	( "panelouter", ctypes.c_short ),
	( "pad", ctypes.c_short ),
])

__freeze_rpythonic_struct( uiWidgetColors, [
	( "outline", ( ctypes.c_char * 4 ) ),
	( "inner", ( ctypes.c_char * 4 ) ),
	( "inner_sel", ( ctypes.c_char * 4 ) ),
	( "item", ( ctypes.c_char * 4 ) ),
	( "text", ( ctypes.c_char * 4 ) ),
	( "text_sel", ( ctypes.c_char * 4 ) ),
	( "shaded", ctypes.c_short ),
	( "shadetop", ctypes.c_short ),
	( "shadedown", ctypes.c_short ),
	( "alpha_check", ctypes.c_short ),
])

__freeze_rpythonic_struct( uiWidgetStateColors, [
	( "inner_anim", ( ctypes.c_char * 4 ) ),
	( "inner_anim_sel", ( ctypes.c_char * 4 ) ),
	( "inner_key", ( ctypes.c_char * 4 ) ),
	( "inner_key_sel", ( ctypes.c_char * 4 ) ),
	( "inner_driven", ( ctypes.c_char * 4 ) ),
	( "inner_driven_sel", ( ctypes.c_char * 4 ) ),
	( "blend", ctypes.c_float ),
	( "pad", ctypes.c_float ),
])

__freeze_rpythonic_struct( uiPanelColors, [
	( "header", ( ctypes.c_char * 4 ) ),
	( "show_header", ctypes.c_short ),
	( "pad", ctypes.c_short ),
])

__freeze_rpythonic_struct( ThemeUI, [
	( "wcol_regular", uiWidgetColors ),
	( "wcol_tool", uiWidgetColors ),
	( "wcol_text", uiWidgetColors ),
	( "wcol_radio", uiWidgetColors ),
	( "wcol_option", uiWidgetColors ),
	( "wcol_toggle", uiWidgetColors ),
	( "wcol_num", uiWidgetColors ),
	( "wcol_numslider", uiWidgetColors ),
	( "wcol_menu", uiWidgetColors ),
	( "wcol_pulldown", uiWidgetColors ),
	( "wcol_menu_back", uiWidgetColors ),
	( "wcol_menu_item", uiWidgetColors ),
	( "wcol_box", uiWidgetColors ),
	( "wcol_scroll", uiWidgetColors ),
	( "wcol_progress", uiWidgetColors ),
	( "wcol_list_item", uiWidgetColors ),
	( "wcol_state", uiWidgetStateColors ),
	( "panel", uiPanelColors ),
	( "iconfile", ( ctypes.c_char * 80 ) ),
	( "icon_alpha", ctypes.c_float ),
	( "pad", ctypes.c_float ),
])

__freeze_rpythonic_struct( ThemeSpace, [
	( "back", ( ctypes.c_char * 4 ) ),
	( "title", ( ctypes.c_char * 4 ) ),
	( "text", ( ctypes.c_char * 4 ) ),
	( "text_hi", ( ctypes.c_char * 4 ) ),
	( "header", ( ctypes.c_char * 4 ) ),
	( "header_title", ( ctypes.c_char * 4 ) ),
	( "header_text", ( ctypes.c_char * 4 ) ),
	( "header_text_hi", ( ctypes.c_char * 4 ) ),
	( "button", ( ctypes.c_char * 4 ) ),
	( "button_title", ( ctypes.c_char * 4 ) ),
	( "button_text", ( ctypes.c_char * 4 ) ),
	( "button_text_hi", ( ctypes.c_char * 4 ) ),
	( "C_list", ( ctypes.c_char * 4 ) ),
	( "list_title", ( ctypes.c_char * 4 ) ),
	( "list_text", ( ctypes.c_char * 4 ) ),
	( "list_text_hi", ( ctypes.c_char * 4 ) ),
	( "panel", ( ctypes.c_char * 4 ) ),
	( "panel_title", ( ctypes.c_char * 4 ) ),
	( "panel_text", ( ctypes.c_char * 4 ) ),
	( "panel_text_hi", ( ctypes.c_char * 4 ) ),
	( "shade1", ( ctypes.c_char * 4 ) ),
	( "shade2", ( ctypes.c_char * 4 ) ),
	( "hilite", ( ctypes.c_char * 4 ) ),
	( "grid", ( ctypes.c_char * 4 ) ),
	( "wire", ( ctypes.c_char * 4 ) ),
	( "select", ( ctypes.c_char * 4 ) ),
	( "lamp", ( ctypes.c_char * 4 ) ),
	( "speaker", ( ctypes.c_char * 4 ) ),
	( "pad2", ( ctypes.c_char * 4 ) ),
	( "active", ( ctypes.c_char * 4 ) ),
	( "group", ( ctypes.c_char * 4 ) ),
	( "group_active", ( ctypes.c_char * 4 ) ),
	( "transform", ( ctypes.c_char * 4 ) ),
	( "vertex", ( ctypes.c_char * 4 ) ),
	( "vertex_select", ( ctypes.c_char * 4 ) ),
	( "edge", ( ctypes.c_char * 4 ) ),
	( "edge_select", ( ctypes.c_char * 4 ) ),
	( "edge_seam", ( ctypes.c_char * 4 ) ),
	( "edge_sharp", ( ctypes.c_char * 4 ) ),
	( "edge_facesel", ( ctypes.c_char * 4 ) ),
	( "edge_crease", ( ctypes.c_char * 4 ) ),
	( "face", ( ctypes.c_char * 4 ) ),
	( "face_select", ( ctypes.c_char * 4 ) ),
	( "face_dot", ( ctypes.c_char * 4 ) ),
	( "extra_edge_len", ( ctypes.c_char * 4 ) ),
	( "extra_face_angle", ( ctypes.c_char * 4 ) ),
	( "extra_face_area", ( ctypes.c_char * 4 ) ),
	( "pad3", ( ctypes.c_char * 4 ) ),
	( "normal", ( ctypes.c_char * 4 ) ),
	( "vertex_normal", ( ctypes.c_char * 4 ) ),
	( "bone_solid", ( ctypes.c_char * 4 ) ),
	( "bone_pose", ( ctypes.c_char * 4 ) ),
	( "strip", ( ctypes.c_char * 4 ) ),
	( "strip_select", ( ctypes.c_char * 4 ) ),
	( "cframe", ( ctypes.c_char * 4 ) ),
	( "nurb_uline", ( ctypes.c_char * 4 ) ),
	( "nurb_vline", ( ctypes.c_char * 4 ) ),
	( "act_spline", ( ctypes.c_char * 4 ) ),
	( "nurb_sel_uline", ( ctypes.c_char * 4 ) ),
	( "nurb_sel_vline", ( ctypes.c_char * 4 ) ),
	( "lastsel_point", ( ctypes.c_char * 4 ) ),
	( "handle_free", ( ctypes.c_char * 4 ) ),
	( "handle_auto", ( ctypes.c_char * 4 ) ),
	( "handle_vect", ( ctypes.c_char * 4 ) ),
	( "handle_align", ( ctypes.c_char * 4 ) ),
	( "handle_auto_clamped", ( ctypes.c_char * 4 ) ),
	( "handle_sel_free", ( ctypes.c_char * 4 ) ),
	( "handle_sel_auto", ( ctypes.c_char * 4 ) ),
	( "handle_sel_vect", ( ctypes.c_char * 4 ) ),
	( "handle_sel_align", ( ctypes.c_char * 4 ) ),
	( "handle_sel_auto_clamped", ( ctypes.c_char * 4 ) ),
	( "ds_channel", ( ctypes.c_char * 4 ) ),
	( "ds_subchannel", ( ctypes.c_char * 4 ) ),
	( "console_output", ( ctypes.c_char * 4 ) ),
	( "console_input", ( ctypes.c_char * 4 ) ),
	( "console_info", ( ctypes.c_char * 4 ) ),
	( "console_error", ( ctypes.c_char * 4 ) ),
	( "console_cursor", ( ctypes.c_char * 4 ) ),
	( "vertex_size", ctypes.c_char ),
	( "outline_width", ctypes.c_char ),
	( "facedot_size", ctypes.c_char ),
	( "noodle_curving", ctypes.c_char ),
	( "syntaxl", ( ctypes.c_char * 4 ) ),
	( "syntaxn", ( ctypes.c_char * 4 ) ),
	( "syntaxb", ( ctypes.c_char * 4 ) ),
	( "syntaxv", ( ctypes.c_char * 4 ) ),
	( "syntaxc", ( ctypes.c_char * 4 ) ),
	( "movie", ( ctypes.c_char * 4 ) ),
	( "image", ( ctypes.c_char * 4 ) ),
	( "scene", ( ctypes.c_char * 4 ) ),
	( "audio", ( ctypes.c_char * 4 ) ),
	( "effect", ( ctypes.c_char * 4 ) ),
	( "plugin", ( ctypes.c_char * 4 ) ),
	( "transition", ( ctypes.c_char * 4 ) ),
	( "meta", ( ctypes.c_char * 4 ) ),
	( "editmesh_active", ( ctypes.c_char * 4 ) ),
	( "handle_vertex", ( ctypes.c_char * 4 ) ),
	( "handle_vertex_select", ( ctypes.c_char * 4 ) ),
	( "handle_vertex_size", ctypes.c_char ),
	( "marker_outline", ( ctypes.c_char * 4 ) ),
	( "marker", ( ctypes.c_char * 4 ) ),
	( "act_marker", ( ctypes.c_char * 4 ) ),
	( "sel_marker", ( ctypes.c_char * 4 ) ),
	( "dis_marker", ( ctypes.c_char * 4 ) ),
	( "lock_marker", ( ctypes.c_char * 4 ) ),
	( "bundle_solid", ( ctypes.c_char * 4 ) ),
	( "path_before", ( ctypes.c_char * 4 ) ),
	( "path_after", ( ctypes.c_char * 4 ) ),
	( "camera_path", ( ctypes.c_char * 4 ) ),
	( "hpad", ( ctypes.c_char * 7 ) ),
	( "preview_back", ( ctypes.c_char * 4 ) ),
])

__freeze_rpythonic_struct( ThemeWireColor, [
	( "solid", ( ctypes.c_char * 4 ) ),
	( "select", ( ctypes.c_char * 4 ) ),
	( "active", ( ctypes.c_char * 4 ) ),
	( "flag", ctypes.c_short ),
	( "pad", ctypes.c_short ),
])

__freeze_rpythonic_struct( bTheme, [
	( "next", ctypes.POINTER(bTheme) ),
	( "prev", ctypes.POINTER(bTheme) ),
	( "name", ( ctypes.c_char * 32 ) ),
	( "tui", ThemeUI ),
	( "tbuts", ThemeSpace ),
	( "tv3d", ThemeSpace ),
	( "tfile", ThemeSpace ),
	( "tipo", ThemeSpace ),
	( "tinfo", ThemeSpace ),
	( "tact", ThemeSpace ),
	( "tnla", ThemeSpace ),
	( "tseq", ThemeSpace ),
	( "tima", ThemeSpace ),
	( "text", ThemeSpace ),
	( "toops", ThemeSpace ),
	( "ttime", ThemeSpace ),
	( "tnode", ThemeSpace ),
	( "tlogic", ThemeSpace ),
	( "tuserpref", ThemeSpace ),
	( "tconsole", ThemeSpace ),
	( "tclip", ThemeSpace ),
	( "tarm", ( ThemeWireColor * 20 ) ),
	( "active_theme_area", ctypes.c_int ),
	( "pad", ctypes.c_int ),
])

__freeze_rpythonic_struct( bAddon, [
	( "next", ctypes.POINTER(bAddon) ),
	( "prev", ctypes.POINTER(bAddon) ),
	( "module", ( ctypes.c_char * 64 ) ),
])

__freeze_rpythonic_struct( SolidLight, [
	( "flag", ctypes.c_int ),
	( "pad", ctypes.c_int ),
	( "col", ( ctypes.c_float * 4 ) ),
	( "spec", ( ctypes.c_float * 4 ) ),
	( "vec", ( ctypes.c_float * 4 ) ),
])

__freeze_rpythonic_struct( UserDef, [
	( "flag", ctypes.c_int ),
	( "dupflag", ctypes.c_int ),
	( "savetime", ctypes.c_int ),
	( "tempdir", ( ctypes.c_char * 160 ) ),
	( "fontdir", ( ctypes.c_char * 160 ) ),
	( "renderdir", ( ctypes.c_char * 240 ) ),
	( "textudir", ( ctypes.c_char * 160 ) ),
	( "plugtexdir", ( ctypes.c_char * 160 ) ),
	( "plugseqdir", ( ctypes.c_char * 160 ) ),
	( "pythondir", ( ctypes.c_char * 160 ) ),
	( "sounddir", ( ctypes.c_char * 160 ) ),
	( "image_editor", ( ctypes.c_char * 240 ) ),
	( "anim_player", ( ctypes.c_char * 240 ) ),
	( "anim_player_preset", ctypes.c_int ),
	( "v2d_min_gridsize", ctypes.c_short ),
	( "timecode_style", ctypes.c_short ),
	( "versions", ctypes.c_short ),
	( "dbl_click_time", ctypes.c_short ),
	( "gameflags", ctypes.c_int ),
	( "wheellinescroll", ctypes.c_int ),
	( "uiflag", ctypes.c_int ),
	( "language", ctypes.c_int ),
	( "userpref", ctypes.c_short ),
	( "viewzoom", ctypes.c_short ),
	( "mixbufsize", ctypes.c_int ),
	( "audiodevice", ctypes.c_int ),
	( "audiorate", ctypes.c_int ),
	( "audioformat", ctypes.c_int ),
	( "audiochannels", ctypes.c_int ),
	( "scrollback", ctypes.c_int ),
	( "dpi", ctypes.c_int ),
	( "encoding", ctypes.c_short ),
	( "transopts", ctypes.c_short ),
	( "menuthreshold1", ctypes.c_short ),
	( "menuthreshold2", ctypes.c_short ),
	( "themes", ListBase ),
	( "uifonts", ListBase ),
	( "uistyles", ListBase ),
	( "keymaps", ListBase ),
	( "user_keymaps", ListBase ),
	( "addons", ListBase ),
	( "keyconfigstr", ( ctypes.c_char * 64 ) ),
	( "undosteps", ctypes.c_short ),
	( "undomemory", ctypes.c_short ),
	( "gp_manhattendist", ctypes.c_short ),
	( "gp_euclideandist", ctypes.c_short ),
	( "gp_eraser", ctypes.c_short ),
	( "gp_settings", ctypes.c_short ),
	( "tb_leftmouse", ctypes.c_short ),
	( "tb_rightmouse", ctypes.c_short ),
	( "light", ( SolidLight * 3 ) ),
	( "tw_hotspot", ctypes.c_short ),
	( "tw_flag", ctypes.c_short ),
	( "tw_handlesize", ctypes.c_short ),
	( "tw_size", ctypes.c_short ),
	( "textimeout", ctypes.c_short ),
	( "texcollectrate", ctypes.c_short ),
	( "wmdrawmethod", ctypes.c_short ),
	( "dragthreshold", ctypes.c_short ),
	( "memcachelimit", ctypes.c_int ),
	( "prefetchframes", ctypes.c_int ),
	( "frameserverport", ctypes.c_short ),
	( "pad_rot_angle", ctypes.c_short ),
	( "obcenter_dia", ctypes.c_short ),
	( "rvisize", ctypes.c_short ),
	( "rvibright", ctypes.c_short ),
	( "recent_files", ctypes.c_short ),
	( "smooth_viewtx", ctypes.c_short ),
	( "glreslimit", ctypes.c_short ),
	( "curssize", ctypes.c_short ),
	( "color_picker_type", ctypes.c_short ),
	( "ipo_new", ctypes.c_short ),
	( "keyhandles_new", ctypes.c_short ),
	( "scrcastfps", ctypes.c_short ),
	( "scrcastwait", ctypes.c_short ),
	( "widget_unit", ctypes.c_short ),
	( "anisotropic_filter", ctypes.c_short ),
	( "ndof_sensitivity", ctypes.c_float ),
	( "ndof_flag", ctypes.c_int ),
	( "versemaster", ( ctypes.c_char * 160 ) ),
	( "verseuser", ( ctypes.c_char * 160 ) ),
	( "glalphaclip", ctypes.c_float ),
	( "autokey_mode", ctypes.c_short ),
	( "autokey_flag", ctypes.c_short ),
	( "text_render", ctypes.c_short ),
	( "pad9", ( ctypes.c_short * 3 ) ),
	( "coba_weight", ColorBand ),
	( "sculpt_paint_overlay_col", ( ctypes.c_float * 3 ) ),
	( "tweak_threshold", ctypes.c_short ),
	( "pad3", ctypes.c_short ),
	( "author", ( ctypes.c_char * 80 ) ),
])

__freeze_rpythonic_struct( AutoComplete, [
])

__freeze_rpythonic_struct( uiBut, [
])

__freeze_rpythonic_struct( uiPopupBlockHandle, [
])

__freeze_rpythonic_struct( uiSearchItems, [
])

__freeze_rpythonic_struct( uiPopupMenu, [
])

## wrapper functions ##
object_add_material_slot = _rpythonic_function_(		"object_add_material_slot", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),] )

feclearexcept = _rpythonic_function_(		"feclearexcept", ctypes.c_int, [
	("__excepts",		ctypes.c_int),] )

fegetexceptflag = _rpythonic_function_(		"fegetexceptflag", ctypes.c_int, [
	("__flagp",		ctypes.POINTER(ctypes.c_uint16)),
	("__excepts",		ctypes.c_int),] )

feraiseexcept = _rpythonic_function_(		"feraiseexcept", ctypes.c_int, [
	("__excepts",		ctypes.c_int),] )

fesetexceptflag = _rpythonic_function_(		"fesetexceptflag", ctypes.c_int, [
	("__flagp",		ctypes.POINTER(ctypes.c_uint16)),
	("__excepts",		ctypes.c_int),] )

fetestexcept = _rpythonic_function_(		"fetestexcept", ctypes.c_int, [
	("__excepts",		ctypes.c_int),] )

fegetround = _rpythonic_function_(		"fegetround", ctypes.c_int, [] )

fesetround = _rpythonic_function_(		"fesetround", ctypes.c_int, [
	("__rounding_direction",		ctypes.c_int),] )

fegetenv = _rpythonic_function_(		"fegetenv", ctypes.c_int, [
	("__envp",		ctypes.POINTER(fenv_t)),] )

feholdexcept = _rpythonic_function_(		"feholdexcept", ctypes.c_int, [
	("__envp",		ctypes.POINTER(fenv_t)),] )

fesetenv = _rpythonic_function_(		"fesetenv", ctypes.c_int, [
	("__envp",		ctypes.POINTER(fenv_t)),] )

feupdateenv = _rpythonic_function_(		"feupdateenv", ctypes.c_int, [
	("__envp",		ctypes.POINTER(fenv_t)),] )

feenableexcept = _rpythonic_function_(		"feenableexcept", ctypes.c_int, [
	("__excepts",		ctypes.c_int),] )

fedisableexcept = _rpythonic_function_(		"fedisableexcept", ctypes.c_int, [
	("__excepts",		ctypes.c_int),] )

fegetexcept = _rpythonic_function_(		"fegetexcept", ctypes.c_int, [] )

atof = _rpythonic_function_(		"atof", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoi = _rpythonic_function_(		"atoi", ctypes.c_int, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atol = _rpythonic_function_(		"atol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

atoll = _rpythonic_function_(		"atoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),] )

strtod = _rpythonic_function_(		"strtod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtof = _rpythonic_function_(		"strtof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtold = _rpythonic_function_(		"strtold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strtol = _rpythonic_function_(		"strtol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoul = _rpythonic_function_(		"strtoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoq = _rpythonic_function_(		"strtoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtouq = _rpythonic_function_(		"strtouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoll = _rpythonic_function_(		"strtoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtoull = _rpythonic_function_(		"strtoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),] )

strtol_l = _rpythonic_function_(		"strtol_l", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtoul_l = _rpythonic_function_(		"strtoul_l", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtoll_l = _rpythonic_function_(		"strtoll_l", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtoull_l = _rpythonic_function_(		"strtoull_l", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtod_l = _rpythonic_function_(		"strtod_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtof_l = _rpythonic_function_(		"strtof_l", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strtold_l = _rpythonic_function_(		"strtold_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_char)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

l64a = _rpythonic_function_(		"l64a", ctypes.POINTER(ctypes.c_char), [
	("__n",		ctypes.c_int64),] )

a64l = _rpythonic_function_(		"a64l", ctypes.c_int64, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

select = _rpythonic_function_(		"select", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timeval)),] )

pselect = _rpythonic_function_(		"pselect", ctypes.c_int, [
	("__nfds",		ctypes.c_int),
	("__readfds",		ctypes.POINTER(fd_set)),
	("__writefds",		ctypes.POINTER(fd_set)),
	("__exceptfds",		ctypes.POINTER(fd_set)),
	("__timeout",		ctypes.POINTER(timespec)),
	("__sigmask",		ctypes.POINTER(__sigset_t)),] )

gnu_dev_major = _rpythonic_function_(		"gnu_dev_major", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_minor = _rpythonic_function_(		"gnu_dev_minor", ctypes.c_uint, [
	("__dev",		ctypes.c_ulonglong),] )

gnu_dev_makedev = _rpythonic_function_(		"gnu_dev_makedev", ctypes.c_ulonglong, [
	("__major",		ctypes.c_uint),
	("__minor",		ctypes.c_uint),] )

random = _rpythonic_function_(		"random", ctypes.c_int64, [] )

srandom = _rpythonic_function_(		"srandom", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

initstate = _rpythonic_function_(		"initstate", ctypes.POINTER(ctypes.c_char), [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),] )

setstate = _rpythonic_function_(		"setstate", ctypes.POINTER(ctypes.c_char), [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),] )

random_r = _rpythonic_function_(		"random_r", ctypes.c_int, [
	("__buf",		ctypes.POINTER(random_data)),
	("__result",		ctypes.POINTER(ctypes.c_int32)),] )

srandom_r = _rpythonic_function_(		"srandom_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

initstate_r = _rpythonic_function_(		"initstate_r", ctypes.c_int, [
	("__seed",		ctypes.c_uint),
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__statelen",		ctypes.c_uint),
	("__buf",		ctypes.POINTER(random_data)),] )

setstate_r = _rpythonic_function_(		"setstate_r", ctypes.c_int, [
	("__statebuf",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(random_data)),] )

rand = _rpythonic_function_(		"rand", ctypes.c_int, [] )

srand = _rpythonic_function_(		"srand", ctypes.c_void_p, [
	("__seed",		ctypes.c_uint),] )

rand_r = _rpythonic_function_(		"rand_r", ctypes.c_int, [
	("__seed",		ctypes.POINTER(ctypes.c_uint)),] )

drand48 = _rpythonic_function_(		"drand48", ctypes.c_double, [] )

erand48 = _rpythonic_function_(		"erand48", ctypes.c_double, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

lrand48 = _rpythonic_function_(		"lrand48", ctypes.c_int64, [] )

nrand48 = _rpythonic_function_(		"nrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

mrand48 = _rpythonic_function_(		"mrand48", ctypes.c_int64, [] )

jrand48 = _rpythonic_function_(		"jrand48", ctypes.c_int64, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),] )

srand48 = _rpythonic_function_(		"srand48", ctypes.c_void_p, [
	("__seedval",		ctypes.c_int64),] )

seed48 = _rpythonic_function_(		"seed48", ctypes.POINTER(ctypes.c_uint16), [
	("__seed16v",		( ctypes.c_uint16 * 3 )),] )

lcong48 = _rpythonic_function_(		"lcong48", ctypes.c_void_p, [
	("__param",		( ctypes.c_uint16 * 7 )),] )

drand48_r = _rpythonic_function_(		"drand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

erand48_r = _rpythonic_function_(		"erand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_double)),] )

lrand48_r = _rpythonic_function_(		"lrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

nrand48_r = _rpythonic_function_(		"nrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

mrand48_r = _rpythonic_function_(		"mrand48_r", ctypes.c_int, [
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

jrand48_r = _rpythonic_function_(		"jrand48_r", ctypes.c_int, [
	("__xsubi",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),
	("__result",		ctypes.POINTER(ctypes.c_int64)),] )

srand48_r = _rpythonic_function_(		"srand48_r", ctypes.c_int, [
	("__seedval",		ctypes.c_int64),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

seed48_r = _rpythonic_function_(		"seed48_r", ctypes.c_int, [
	("__seed16v",		( ctypes.c_uint16 * 3 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

lcong48_r = _rpythonic_function_(		"lcong48_r", ctypes.c_int, [
	("__param",		( ctypes.c_uint16 * 7 )),
	("__buffer",		ctypes.POINTER(drand48_data)),] )

malloc = _rpythonic_function_(		"malloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

calloc = _rpythonic_function_(		"calloc", ctypes.POINTER(ctypes.c_void_p), [
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

realloc = _rpythonic_function_(		"realloc", ctypes.POINTER(ctypes.c_void_p), [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),] )

free = _rpythonic_function_(		"free", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

cfree = _rpythonic_function_(		"cfree", ctypes.c_void_p, [("__ptr",		ctypes.c_void_p)] )

alloca = _rpythonic_function_(		"alloca", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

valloc = _rpythonic_function_(		"valloc", ctypes.POINTER(ctypes.c_void_p), [
	("__size",		ctypes.c_uint),] )

posix_memalign = _rpythonic_function_(		"posix_memalign", ctypes.c_int, [
	("__memptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__alignment",		ctypes.c_uint),
	("__size",		ctypes.c_uint),] )

abort = _rpythonic_function_(		"abort", ctypes.c_void_p, [] )

atexit = _rpythonic_function_(		"atexit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

at_quick_exit = _rpythonic_function_(		"at_quick_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),] )

on_exit = _rpythonic_function_(		"on_exit", ctypes.c_int, [
	("__func",		ctypes.c_void_p),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

exit = _rpythonic_function_(		"exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

quick_exit = _rpythonic_function_(		"quick_exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

_Exit = _rpythonic_function_(		"_Exit", ctypes.c_void_p, [
	("__status",		ctypes.c_int),] )

getenv = _rpythonic_function_(		"getenv", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

putenv = _rpythonic_function_(		"putenv", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

setenv = _rpythonic_function_(		"setenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__value",		ctypes.POINTER(ctypes.c_char)),
	("__replace",		ctypes.c_int),] )

unsetenv = _rpythonic_function_(		"unsetenv", ctypes.c_int, [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

clearenv = _rpythonic_function_(		"clearenv", ctypes.c_int, [] )

mktemp = _rpythonic_function_(		"mktemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp = _rpythonic_function_(		"mkstemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemp64 = _rpythonic_function_(		"mkstemp64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkstemps = _rpythonic_function_(		"mkstemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

mkstemps64 = _rpythonic_function_(		"mkstemps64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),] )

mkdtemp = _rpythonic_function_(		"mkdtemp", ctypes.POINTER(ctypes.c_char), [
	("__template",		ctypes.POINTER(ctypes.c_char)),] )

mkostemp = _rpythonic_function_(		"mkostemp", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__flags",		ctypes.c_int),] )

mkostemp64 = _rpythonic_function_(		"mkostemp64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__flags",		ctypes.c_int),] )

mkostemps = _rpythonic_function_(		"mkostemps", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),
	("__flags",		ctypes.c_int),] )

mkostemps64 = _rpythonic_function_(		"mkostemps64", ctypes.c_int, [
	("__template",		ctypes.POINTER(ctypes.c_char)),
	("__suffixlen",		ctypes.c_int),
	("__flags",		ctypes.c_int),] )

system = _rpythonic_function_(		"system", ctypes.c_int, [
	("__command",		ctypes.POINTER(ctypes.c_char)),] )

canonicalize_file_name = _rpythonic_function_(		"canonicalize_file_name", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

realpath = _rpythonic_function_(		"realpath", ctypes.POINTER(ctypes.c_char), [
	("__name",		ctypes.POINTER(ctypes.c_char)),
	("__resolved",		ctypes.POINTER(ctypes.c_char)),] )

bsearch = _rpythonic_function_(		"bsearch", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.POINTER(ctypes.c_void_p)),
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort = _rpythonic_function_(		"qsort", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

qsort_r = _rpythonic_function_(		"qsort_r", ctypes.c_void_p, [
	("__base",		ctypes.POINTER(ctypes.c_void_p)),
	("__nmemb",		ctypes.c_uint),
	("__size",		ctypes.c_uint),
	("__compar",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

abs = _rpythonic_function_(		"abs", ctypes.c_int, [
	("__x",		ctypes.c_int),] )

labs = _rpythonic_function_(		"labs", ctypes.c_int64, [
	("__x",		ctypes.c_int64),] )

llabs = _rpythonic_function_(		"llabs", ctypes.c_longlong, [
	("__x",		ctypes.c_longlong),] )

div = _rpythonic_function_(		"div", div_t, [
	("__numer",		ctypes.c_int),
	("__denom",		ctypes.c_int),] )

ldiv = _rpythonic_function_(		"ldiv", ldiv_t, [
	("__numer",		ctypes.c_int64),
	("__denom",		ctypes.c_int64),] )

lldiv = _rpythonic_function_(		"lldiv", lldiv_t, [
	("__numer",		ctypes.c_longlong),
	("__denom",		ctypes.c_longlong),] )

ecvt = _rpythonic_function_(		"ecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

fcvt = _rpythonic_function_(		"fcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

gcvt = _rpythonic_function_(		"gcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

qecvt = _rpythonic_function_(		"qecvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qfcvt = _rpythonic_function_(		"qfcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),] )

qgcvt = _rpythonic_function_(		"qgcvt", ctypes.POINTER(ctypes.c_char), [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ecvt_r = _rpythonic_function_(		"ecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

fcvt_r = _rpythonic_function_(		"fcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qecvt_r = _rpythonic_function_(		"qecvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

qfcvt_r = _rpythonic_function_(		"qfcvt_r", ctypes.c_int, [
	("__value",		ctypes.c_double),
	("__ndigit",		ctypes.c_int),
	("__decpt",		ctypes.POINTER(ctypes.c_int)),
	("__sign",		ctypes.POINTER(ctypes.c_int)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__len",		ctypes.c_uint),] )

mblen = _rpythonic_function_(		"mblen", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

mbtowc = _rpythonic_function_(		"mbtowc", ctypes.c_int, [
	("__pwc",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wctomb = _rpythonic_function_(		"wctomb", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wchar",		ctypes.c_int),] )

mbstowcs = _rpythonic_function_(		"mbstowcs", ctypes.c_uint, [
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

wcstombs = _rpythonic_function_(		"wcstombs", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__pwcs",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

rpmatch = _rpythonic_function_(		"rpmatch", ctypes.c_int, [
	("__response",		ctypes.POINTER(ctypes.c_char)),] )

getsubopt = _rpythonic_function_(		"getsubopt", ctypes.c_int, [
	("__optionp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__tokens",		ctypes.POINTER(ctypes.c_char)),
	("__valuep",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

setkey = _rpythonic_function_(		"setkey", ctypes.c_void_p, [
	("__key",		ctypes.POINTER(ctypes.c_char)),] )

posix_openpt = _rpythonic_function_(		"posix_openpt", ctypes.c_int, [
	("__oflag",		ctypes.c_int),] )

grantpt = _rpythonic_function_(		"grantpt", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

unlockpt = _rpythonic_function_(		"unlockpt", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

ptsname = _rpythonic_function_(		"ptsname", ctypes.POINTER(ctypes.c_char), [
	("__fd",		ctypes.c_int),] )

ptsname_r = _rpythonic_function_(		"ptsname_r", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

getpt = _rpythonic_function_(		"getpt", ctypes.c_int, [] )

getloadavg = _rpythonic_function_(		"getloadavg", ctypes.c_int, [
	("__loadavg",		ctypes.c_double),
	("__nelem",		ctypes.c_int),] )

memcpy = _rpythonic_function_(		"memcpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memmove = _rpythonic_function_(		"memmove", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memccpy = _rpythonic_function_(		"memccpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memset = _rpythonic_function_(		"memset", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

memcmp = _rpythonic_function_(		"memcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

memchr = _rpythonic_function_(		"memchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

rawmemchr = _rpythonic_function_(		"rawmemchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),] )

memrchr = _rpythonic_function_(		"memrchr", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

strcpy = _rpythonic_function_(		"strcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncpy = _rpythonic_function_(		"strncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcat = _rpythonic_function_(		"strcat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

strncat = _rpythonic_function_(		"strncat", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcmp = _rpythonic_function_(		"strcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncmp = _rpythonic_function_(		"strncmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll = _rpythonic_function_(		"strcoll", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strxfrm = _rpythonic_function_(		"strxfrm", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcoll_l = _rpythonic_function_(		"strcoll_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strxfrm_l = _rpythonic_function_(		"strxfrm_l", ctypes.c_uint, [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__l",		ctypes.POINTER(__locale_struct)),] )

strdup = _rpythonic_function_(		"strdup", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strndup = _rpythonic_function_(		"strndup", ctypes.POINTER(ctypes.c_char), [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strchr = _rpythonic_function_(		"strchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strrchr = _rpythonic_function_(		"strrchr", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strchrnul = _rpythonic_function_(		"strchrnul", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

strcspn = _rpythonic_function_(		"strcspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__reject",		ctypes.POINTER(ctypes.c_char)),] )

strspn = _rpythonic_function_(		"strspn", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strpbrk = _rpythonic_function_(		"strpbrk", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__accept",		ctypes.POINTER(ctypes.c_char)),] )

strstr = _rpythonic_function_(		"strstr", ctypes.POINTER(ctypes.c_char), [
	("__haystack",		ctypes.POINTER(ctypes.c_char)),
	("__needle",		ctypes.POINTER(ctypes.c_char)),] )

strtok = _rpythonic_function_(		"strtok", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strtok_r = _rpythonic_function_(		"strtok_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__delim",		ctypes.POINTER(ctypes.c_char)),
	("__save_ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

strcasestr = _rpythonic_function_(		"strcasestr", ctypes.POINTER(ctypes.c_char), [
	("__haystack",		ctypes.POINTER(ctypes.c_char)),
	("__needle",		ctypes.POINTER(ctypes.c_char)),] )

memmem = _rpythonic_function_(		"memmem", ctypes.POINTER(ctypes.c_void_p), [
	("__haystack",		ctypes.POINTER(ctypes.c_void_p)),
	("__haystacklen",		ctypes.c_uint),
	("__needle",		ctypes.POINTER(ctypes.c_void_p)),
	("__needlelen",		ctypes.c_uint),] )

mempcpy = _rpythonic_function_(		"mempcpy", ctypes.POINTER(ctypes.c_void_p), [
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

strlen = _rpythonic_function_(		"strlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

strnlen = _rpythonic_function_(		"strnlen", ctypes.c_uint, [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),] )

strerror = _rpythonic_function_(		"strerror", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),] )

strerror_r = _rpythonic_function_(		"strerror_r", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

strerror_l = _rpythonic_function_(		"strerror_l", ctypes.POINTER(ctypes.c_char), [
	("__errnum",		ctypes.c_int),
	("__l",		ctypes.POINTER(__locale_struct)),] )

bcopy = _rpythonic_function_(		"bcopy", ctypes.c_void_p, [
	("__src",		ctypes.POINTER(ctypes.c_void_p)),
	("__dest",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bzero = _rpythonic_function_(		"bzero", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

bcmp = _rpythonic_function_(		"bcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_void_p)),
	("__s2",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

index = _rpythonic_function_(		"index", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

rindex = _rpythonic_function_(		"rindex", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__c",		ctypes.c_int),] )

ffs = _rpythonic_function_(		"ffs", ctypes.c_int, [
	("__i",		ctypes.c_int),] )

ffsl = _rpythonic_function_(		"ffsl", ctypes.c_int, [
	("__l",		ctypes.c_int64),] )

ffsll = _rpythonic_function_(		"ffsll", ctypes.c_int, [
	("__ll",		ctypes.c_longlong),] )

strcasecmp = _rpythonic_function_(		"strcasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strncasecmp = _rpythonic_function_(		"strncasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strcasecmp_l = _rpythonic_function_(		"strcasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strncasecmp_l = _rpythonic_function_(		"strncasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strsep = _rpythonic_function_(		"strsep", ctypes.POINTER(ctypes.c_char), [
	("__stringp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__delim",		ctypes.POINTER(ctypes.c_char)),] )

strsignal = _rpythonic_function_(		"strsignal", ctypes.POINTER(ctypes.c_char), [
	("__sig",		ctypes.c_int),] )

stpcpy = _rpythonic_function_(		"stpcpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),] )

stpncpy = _rpythonic_function_(		"stpncpy", ctypes.POINTER(ctypes.c_char), [
	("__dest",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),] )

strverscmp = _rpythonic_function_(		"strverscmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_char)),
	("__s2",		ctypes.POINTER(ctypes.c_char)),] )

strfry = _rpythonic_function_(		"strfry", ctypes.POINTER(ctypes.c_char), [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

memfrob = _rpythonic_function_(		"memfrob", ctypes.POINTER(ctypes.c_void_p), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),] )

basename = _rpythonic_function_(		"basename", ctypes.POINTER(ctypes.c_char), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

_function = _rpythonic_function_(		"_function", ctypes.c_void_p, [
	("none",		ctypes.c_void_p),] )

sysv_signal = _rpythonic_function_(		"sysv_signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

signal = _rpythonic_function_(		"signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

bsd_signal = _rpythonic_function_(		"bsd_signal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

kill = _rpythonic_function_(		"kill", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

killpg = _rpythonic_function_(		"killpg", ctypes.c_int, [
	("__pgrp",		ctypes.c_int),
	("__sig",		ctypes.c_int),] )

C_raise = _rpythonic_function_(		"C_raise", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

ssignal = _rpythonic_function_(		"ssignal", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__handler",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

gsignal = _rpythonic_function_(		"gsignal", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

psignal = _rpythonic_function_(		"psignal", ctypes.c_void_p, [
	("__sig",		ctypes.c_int),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

psiginfo = _rpythonic_function_(		"psiginfo", ctypes.c_void_p, [
	("__pinfo",		ctypes.POINTER(siginfo)),
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

sigpause = _rpythonic_function_(		"sigpause", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigblock = _rpythonic_function_(		"sigblock", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

sigsetmask = _rpythonic_function_(		"sigsetmask", ctypes.c_int, [
	("__mask",		ctypes.c_int),] )

siggetmask = _rpythonic_function_(		"siggetmask", ctypes.c_int, [] )

sigemptyset = _rpythonic_function_(		"sigemptyset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigfillset = _rpythonic_function_(		"sigfillset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigaddset = _rpythonic_function_(		"sigaddset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigdelset = _rpythonic_function_(		"sigdelset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigismember = _rpythonic_function_(		"sigismember", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__signo",		ctypes.c_int),] )

sigisemptyset = _rpythonic_function_(		"sigisemptyset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigandset = _rpythonic_function_(		"sigandset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__left",		ctypes.POINTER(__sigset_t)),
	("__right",		ctypes.POINTER(__sigset_t)),] )

sigorset = _rpythonic_function_(		"sigorset", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__left",		ctypes.POINTER(__sigset_t)),
	("__right",		ctypes.POINTER(__sigset_t)),] )

sa_sigaction = _rpythonic_function_(		"sa_sigaction", ctypes.c_void_p, [
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

sigprocmask = _rpythonic_function_(		"sigprocmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__set",		ctypes.POINTER(__sigset_t)),
	("__oset",		ctypes.POINTER(__sigset_t)),] )

sa_restorer = _rpythonic_function_(		"sa_restorer", ctypes.c_void_p, [] )

sigsuspend = _rpythonic_function_(		"sigsuspend", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigpending = _rpythonic_function_(		"sigpending", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),] )

sigwait = _rpythonic_function_(		"sigwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__sig",		ctypes.POINTER(ctypes.c_int)),] )

sigwaitinfo = _rpythonic_function_(		"sigwaitinfo", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),] )

sigtimedwait = _rpythonic_function_(		"sigtimedwait", ctypes.c_int, [
	("__set",		ctypes.POINTER(__sigset_t)),
	("__info",		ctypes.POINTER(siginfo)),
	("__timeout",		ctypes.POINTER(timespec)),] )

sigqueue = _rpythonic_function_(		"sigqueue", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__sig",		ctypes.c_int),
	("__val",		sigval),] )

sigreturn = _rpythonic_function_(		"sigreturn", ctypes.c_int, [
	("__scp",		ctypes.POINTER(sigcontext)),] )

siginterrupt = _rpythonic_function_(		"siginterrupt", ctypes.c_int, [
	("__sig",		ctypes.c_int),
	("__interrupt",		ctypes.c_int),] )

sighold = _rpythonic_function_(		"sighold", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigrelse = _rpythonic_function_(		"sigrelse", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigignore = _rpythonic_function_(		"sigignore", ctypes.c_int, [
	("__sig",		ctypes.c_int),] )

sigset = _rpythonic_function_(		"sigset", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,), [
	("__sig",		ctypes.c_int),
	("__disp",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.c_int,)),] )

pthread_sigmask = _rpythonic_function_(		"pthread_sigmask", ctypes.c_int, [
	("__how",		ctypes.c_int),
	("__newmask",		ctypes.POINTER(__sigset_t)),
	("__oldmask",		ctypes.POINTER(__sigset_t)),] )

pthread_kill = _rpythonic_function_(		"pthread_kill", ctypes.c_int, [
	("__threadid",		ctypes.c_uint64),
	("__signo",		ctypes.c_int),] )

pthread_sigqueue = _rpythonic_function_(		"pthread_sigqueue", ctypes.c_int, [
	("__threadid",		ctypes.c_uint64),
	("__signo",		ctypes.c_int),
	("__value",		sigval),] )

_IO_cookie_init = _rpythonic_function_(		"_IO_cookie_init", ctypes.c_void_p, [
	("__cfile",		ctypes.POINTER(_IO_cookie_file)),
	("__read_write",		ctypes.c_int),
	("__cookie",		ctypes.POINTER(ctypes.c_void_p)),
	("__fns",		_IO_cookie_io_functions_t),] )

_IO_getc = _rpythonic_function_(		"_IO_getc", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_putc = _rpythonic_function_(		"_IO_putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_feof = _rpythonic_function_(		"_IO_feof", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_ferror = _rpythonic_function_(		"_IO_ferror", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_peekc_locked = _rpythonic_function_(		"_IO_peekc_locked", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),] )

_IO_flockfile = _rpythonic_function_(		"_IO_flockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_funlockfile = _rpythonic_function_(		"_IO_funlockfile", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_ftrylockfile = _rpythonic_function_(		"_IO_ftrylockfile", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

_IO_vfscanf = _rpythonic_function_(		"_IO_vfscanf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),
	("__restrict",		ctypes.POINTER(ctypes.c_int)),] )

_IO_vfprintf = _rpythonic_function_(		"_IO_vfprintf", ctypes.c_int, [
	("__restrict",		ctypes.POINTER(_IO_FILE)),
	("__restrict",		ctypes.POINTER(ctypes.c_char)),
	("none",		ctypes.c_char),] )

_IO_padn = _rpythonic_function_(		"_IO_padn", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_sgetn = _rpythonic_function_(		"_IO_sgetn", ctypes.c_uint, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_uint),] )

_IO_seekoff = _rpythonic_function_(		"_IO_seekoff", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

_IO_seekpos = _rpythonic_function_(		"_IO_seekpos", ctypes.c_longlong, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_longlong),
	("none",		ctypes.c_int),] )

_IO_free_backup_area = _rpythonic_function_(		"_IO_free_backup_area", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

remove = _rpythonic_function_(		"remove", ctypes.c_int, [
	("__filename",		ctypes.POINTER(ctypes.c_char)),] )

rename = _rpythonic_function_(		"rename", ctypes.c_int, [
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

renameat = _rpythonic_function_(		"renameat", ctypes.c_int, [
	("__oldfd",		ctypes.c_int),
	("__old",		ctypes.POINTER(ctypes.c_char)),
	("__newfd",		ctypes.c_int),
	("__new",		ctypes.POINTER(ctypes.c_char)),] )

tmpfile = _rpythonic_function_(		"tmpfile", ctypes.POINTER(_IO_FILE), [] )

tmpfile64 = _rpythonic_function_(		"tmpfile64", ctypes.POINTER(_IO_FILE), [] )

tmpnam = _rpythonic_function_(		"tmpnam", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tmpnam_r = _rpythonic_function_(		"tmpnam_r", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

tempnam = _rpythonic_function_(		"tempnam", ctypes.POINTER(ctypes.c_char), [
	("__dir",		ctypes.POINTER(ctypes.c_char)),
	("__pfx",		ctypes.POINTER(ctypes.c_char)),] )

fclose = _rpythonic_function_(		"fclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush = _rpythonic_function_(		"fflush", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fflush_unlocked = _rpythonic_function_(		"fflush_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fcloseall = _rpythonic_function_(		"fcloseall", ctypes.c_int, [] )

fopen = _rpythonic_function_(		"fopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen = _rpythonic_function_(		"freopen", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fopen64 = _rpythonic_function_(		"fopen64", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

freopen64 = _rpythonic_function_(		"freopen64", ctypes.POINTER(_IO_FILE), [
	("__filename",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fdopen = _rpythonic_function_(		"fdopen", ctypes.POINTER(_IO_FILE), [
	("__fd",		ctypes.c_int),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

fopencookie = _rpythonic_function_(		"fopencookie", ctypes.POINTER(_IO_FILE), [
	("__magic_cookie",		ctypes.POINTER(ctypes.c_void_p)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),
	("__io_funcs",		_IO_cookie_io_functions_t),] )

fmemopen = _rpythonic_function_(		"fmemopen", ctypes.POINTER(_IO_FILE), [
	("__s",		ctypes.POINTER(ctypes.c_void_p)),
	("__len",		ctypes.c_uint),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

open_memstream = _rpythonic_function_(		"open_memstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

setbuf = _rpythonic_function_(		"setbuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

setvbuf = _rpythonic_function_(		"setvbuf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

setbuffer = _rpythonic_function_(		"setbuffer", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__size",		ctypes.c_uint),] )

setlinebuf = _rpythonic_function_(		"setlinebuf", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fprintf = _rpythonic_function_(		"fprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

printf = _rpythonic_function_(		"printf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sprintf = _rpythonic_function_(		"sprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfprintf = _rpythonic_function_(		"vfprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vprintf = _rpythonic_function_(		"vprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsprintf = _rpythonic_function_(		"vsprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

snprintf = _rpythonic_function_(		"snprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vsnprintf = _rpythonic_function_(		"vsnprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxlen",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vasprintf = _rpythonic_function_(		"vasprintf", ctypes.c_int, [
	("__ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__f",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

asprintf = _rpythonic_function_(		"asprintf", ctypes.c_int, [
	("__ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

vdprintf = _rpythonic_function_(		"vdprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

dprintf = _rpythonic_function_(		"dprintf", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),] )

fscanf = _rpythonic_function_(		"fscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

scanf = _rpythonic_function_(		"scanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

sscanf = _rpythonic_function_(		"sscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

vfscanf = _rpythonic_function_(		"vfscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vscanf = _rpythonic_function_(		"vscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

vsscanf = _rpythonic_function_(		"vsscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__arg",		ctypes.c_char),] )

fgetc = _rpythonic_function_(		"fgetc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getc = _rpythonic_function_(		"getc", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar = _rpythonic_function_(		"getchar", ctypes.c_int, [] )

getc_unlocked = _rpythonic_function_(		"getc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getchar_unlocked = _rpythonic_function_(		"getchar_unlocked", ctypes.c_int, [] )

fgetc_unlocked = _rpythonic_function_(		"fgetc_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputc = _rpythonic_function_(		"fputc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc = _rpythonic_function_(		"putc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar = _rpythonic_function_(		"putchar", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

fputc_unlocked = _rpythonic_function_(		"fputc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putc_unlocked = _rpythonic_function_(		"putc_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putchar_unlocked = _rpythonic_function_(		"putchar_unlocked", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

getw = _rpythonic_function_(		"getw", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putw = _rpythonic_function_(		"putw", ctypes.c_int, [
	("__w",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgets = _rpythonic_function_(		"fgets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

gets = _rpythonic_function_(		"gets", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fgets_unlocked = _rpythonic_function_(		"fgets_unlocked", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getdelim = _rpythonic_function_(		"getdelim", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__delimiter",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getline = _rpythonic_function_(		"getline", ctypes.c_int, [
	("__lineptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__n",		ctypes.POINTER(ctypes.c_uint)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputs = _rpythonic_function_(		"fputs", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

puts = _rpythonic_function_(		"puts", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

ungetc = _rpythonic_function_(		"ungetc", ctypes.c_int, [
	("__c",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread = _rpythonic_function_(		"fread", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite = _rpythonic_function_(		"fwrite", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__s",		ctypes.POINTER(_IO_FILE)),] )

fputs_unlocked = _rpythonic_function_(		"fputs_unlocked", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fread_unlocked = _rpythonic_function_(		"fread_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fwrite_unlocked = _rpythonic_function_(		"fwrite_unlocked", ctypes.c_uint, [
	("__ptr",		ctypes.POINTER(ctypes.c_void_p)),
	("__size",		ctypes.c_uint),
	("__n",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseek = _rpythonic_function_(		"fseek", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftell = _rpythonic_function_(		"ftell", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

rewind = _rpythonic_function_(		"rewind", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fseeko = _rpythonic_function_(		"fseeko", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_int64),
	("__whence",		ctypes.c_int),] )

ftello = _rpythonic_function_(		"ftello", ctypes.c_int64, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos = _rpythonic_function_(		"fgetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fsetpos = _rpythonic_function_(		"fsetpos", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos_t)),] )

fseeko64 = _rpythonic_function_(		"fseeko64", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__off",		ctypes.c_longlong),
	("__whence",		ctypes.c_int),] )

ftello64 = _rpythonic_function_(		"ftello64", ctypes.c_longlong, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fgetpos64 = _rpythonic_function_(		"fgetpos64", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos64_t)),] )

fsetpos64 = _rpythonic_function_(		"fsetpos64", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__pos",		ctypes.POINTER(_G_fpos64_t)),] )

clearerr = _rpythonic_function_(		"clearerr", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof = _rpythonic_function_(		"feof", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror = _rpythonic_function_(		"ferror", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

clearerr_unlocked = _rpythonic_function_(		"clearerr_unlocked", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

feof_unlocked = _rpythonic_function_(		"feof_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ferror_unlocked = _rpythonic_function_(		"ferror_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

perror = _rpythonic_function_(		"perror", ctypes.c_void_p, [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

fileno = _rpythonic_function_(		"fileno", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fileno_unlocked = _rpythonic_function_(		"fileno_unlocked", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

popen = _rpythonic_function_(		"popen", ctypes.POINTER(_IO_FILE), [
	("__command",		ctypes.POINTER(ctypes.c_char)),
	("__modes",		ctypes.POINTER(ctypes.c_char)),] )

pclose = _rpythonic_function_(		"pclose", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ctermid = _rpythonic_function_(		"ctermid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

cuserid = _rpythonic_function_(		"cuserid", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),] )

obstack_printf = _rpythonic_function_(		"obstack_printf", ctypes.c_int, [
	("__obstack",		ctypes.POINTER(obstack)),
	("__format",		ctypes.POINTER(ctypes.c_char)),] )

obstack_vprintf = _rpythonic_function_(		"obstack_vprintf", ctypes.c_int, [
	("__obstack",		ctypes.POINTER(obstack)),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__args",		ctypes.c_char),] )

flockfile = _rpythonic_function_(		"flockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ftrylockfile = _rpythonic_function_(		"ftrylockfile", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

funlockfile = _rpythonic_function_(		"funlockfile", ctypes.c_void_p, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

readv = _rpythonic_function_(		"readv", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),] )

writev = _rpythonic_function_(		"writev", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),] )

preadv = _rpythonic_function_(		"preadv", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),
	("__offset",		ctypes.c_int64),] )

pwritev = _rpythonic_function_(		"pwritev", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),
	("__offset",		ctypes.c_int64),] )

preadv64 = _rpythonic_function_(		"preadv64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),
	("__offset",		ctypes.c_longlong),] )

pwritev64 = _rpythonic_function_(		"pwritev64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__iovec",		ctypes.POINTER(iovec)),
	("__count",		ctypes.c_int),
	("__offset",		ctypes.c_longlong),] )

recvmmsg = _rpythonic_function_(		"recvmmsg", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__vmessages",		ctypes.POINTER(mmsghdr)),
	("__vlen",		ctypes.c_uint),
	("__flags",		ctypes.c_int),
	("__tmo",		ctypes.POINTER(timespec)),] )

socket = _rpythonic_function_(		"socket", ctypes.c_int, [
	("__domain",		ctypes.c_int),
	("__type",		ctypes.c_int),
	("__protocol",		ctypes.c_int),] )

socketpair = _rpythonic_function_(		"socketpair", ctypes.c_int, [
	("__domain",		ctypes.c_int),
	("__type",		ctypes.c_int),
	("__protocol",		ctypes.c_int),
	("__fds",		( ctypes.c_int * 2 )),] )

bind = _rpythonic_function_(		"bind", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__CONST_SOCKADDR_ARG),
	("__len",		ctypes.c_uint),] )

getsockname = _rpythonic_function_(		"getsockname", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__SOCKADDR_ARG),
	("__len",		ctypes.POINTER(ctypes.c_uint)),] )

connect = _rpythonic_function_(		"connect", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__CONST_SOCKADDR_ARG),
	("__len",		ctypes.c_uint),] )

getpeername = _rpythonic_function_(		"getpeername", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__SOCKADDR_ARG),
	("__len",		ctypes.POINTER(ctypes.c_uint)),] )

send = _rpythonic_function_(		"send", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),
	("__flags",		ctypes.c_int),] )

recv = _rpythonic_function_(		"recv", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),
	("__flags",		ctypes.c_int),] )

sendto = _rpythonic_function_(		"sendto", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),
	("__flags",		ctypes.c_int),
	("__addr",		__CONST_SOCKADDR_ARG),
	("__addr_len",		ctypes.c_uint),] )

recvfrom = _rpythonic_function_(		"recvfrom", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(ctypes.c_void_p)),
	("__n",		ctypes.c_uint),
	("__flags",		ctypes.c_int),
	("__addr",		__SOCKADDR_ARG),
	("__addr_len",		ctypes.POINTER(ctypes.c_uint)),] )

sendmsg = _rpythonic_function_(		"sendmsg", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__message",		ctypes.POINTER(msghdr)),
	("__flags",		ctypes.c_int),] )

recvmsg = _rpythonic_function_(		"recvmsg", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__message",		ctypes.POINTER(msghdr)),
	("__flags",		ctypes.c_int),] )

getsockopt = _rpythonic_function_(		"getsockopt", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__level",		ctypes.c_int),
	("__optname",		ctypes.c_int),
	("__optval",		ctypes.POINTER(ctypes.c_void_p)),
	("__optlen",		ctypes.POINTER(ctypes.c_uint)),] )

setsockopt = _rpythonic_function_(		"setsockopt", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__level",		ctypes.c_int),
	("__optname",		ctypes.c_int),
	("__optval",		ctypes.POINTER(ctypes.c_void_p)),
	("__optlen",		ctypes.c_uint),] )

listen = _rpythonic_function_(		"listen", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__n",		ctypes.c_int),] )

accept = _rpythonic_function_(		"accept", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__SOCKADDR_ARG),
	("__addr_len",		ctypes.POINTER(ctypes.c_uint)),] )

accept4 = _rpythonic_function_(		"accept4", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__addr",		__SOCKADDR_ARG),
	("__addr_len",		ctypes.POINTER(ctypes.c_uint)),
	("__flags",		ctypes.c_int),] )

shutdown = _rpythonic_function_(		"shutdown", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__how",		ctypes.c_int),] )

sockatmark = _rpythonic_function_(		"sockatmark", ctypes.c_int, [
	("__fd",		ctypes.c_int),] )

isfdtype = _rpythonic_function_(		"isfdtype", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__fdtype",		ctypes.c_int),] )

ntohl = _rpythonic_function_(		"ntohl", ctypes.c_uint32, [
	("__netlong",		ctypes.c_uint32),] )

ntohs = _rpythonic_function_(		"ntohs", ctypes.c_uint16, [
	("__netshort",		ctypes.c_uint16),] )

htonl = _rpythonic_function_(		"htonl", ctypes.c_uint32, [
	("__hostlong",		ctypes.c_uint32),] )

htons = _rpythonic_function_(		"htons", ctypes.c_uint16, [
	("__hostshort",		ctypes.c_uint16),] )

bindresvport = _rpythonic_function_(		"bindresvport", ctypes.c_int, [
	("__sockfd",		ctypes.c_int),
	("__sock_in",		ctypes.POINTER(sockaddr_in)),] )

bindresvport6 = _rpythonic_function_(		"bindresvport6", ctypes.c_int, [
	("__sockfd",		ctypes.c_int),
	("__sock_in",		ctypes.POINTER(sockaddr_in6)),] )

inet6_option_space = _rpythonic_function_(		"inet6_option_space", ctypes.c_int, [
	("__nbytes",		ctypes.c_int),] )

inet6_option_init = _rpythonic_function_(		"inet6_option_init", ctypes.c_int, [
	("__bp",		ctypes.POINTER(ctypes.c_void_p)),
	("__cmsgp",		ctypes.POINTER(ctypes.POINTER(cmsghdr))),
	("__type",		ctypes.c_int),] )

inet6_option_append = _rpythonic_function_(		"inet6_option_append", ctypes.c_int, [
	("__cmsg",		ctypes.POINTER(cmsghdr)),
	("__typep",		ctypes.POINTER(ctypes.c_uint8)),
	("__multx",		ctypes.c_int),
	("__plusy",		ctypes.c_int),] )

inet6_option_alloc = _rpythonic_function_(		"inet6_option_alloc", ctypes.POINTER(ctypes.c_uint8), [
	("__cmsg",		ctypes.POINTER(cmsghdr)),
	("__datalen",		ctypes.c_int),
	("__multx",		ctypes.c_int),
	("__plusy",		ctypes.c_int),] )

inet6_option_next = _rpythonic_function_(		"inet6_option_next", ctypes.c_int, [
	("__cmsg",		ctypes.POINTER(cmsghdr)),
	("__tptrp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),] )

inet6_option_find = _rpythonic_function_(		"inet6_option_find", ctypes.c_int, [
	("__cmsg",		ctypes.POINTER(cmsghdr)),
	("__tptrp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8))),
	("__type",		ctypes.c_int),] )

inet6_opt_init = _rpythonic_function_(		"inet6_opt_init", ctypes.c_int, [
	("__extbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__extlen",		ctypes.c_uint),] )

inet6_opt_append = _rpythonic_function_(		"inet6_opt_append", ctypes.c_int, [
	("__extbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__extlen",		ctypes.c_uint),
	("__offset",		ctypes.c_int),
	("__type",		ctypes.c_uint8),
	("__len",		ctypes.c_uint),
	("__align",		ctypes.c_uint8),
	("__databufp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

inet6_opt_finish = _rpythonic_function_(		"inet6_opt_finish", ctypes.c_int, [
	("__extbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__extlen",		ctypes.c_uint),
	("__offset",		ctypes.c_int),] )

inet6_opt_set_val = _rpythonic_function_(		"inet6_opt_set_val", ctypes.c_int, [
	("__databuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__offset",		ctypes.c_int),
	("__val",		ctypes.POINTER(ctypes.c_void_p)),
	("__vallen",		ctypes.c_uint),] )

inet6_opt_next = _rpythonic_function_(		"inet6_opt_next", ctypes.c_int, [
	("__extbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__extlen",		ctypes.c_uint),
	("__offset",		ctypes.c_int),
	("__typep",		ctypes.POINTER(ctypes.c_uint8)),
	("__lenp",		ctypes.POINTER(ctypes.c_uint)),
	("__databufp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

inet6_opt_find = _rpythonic_function_(		"inet6_opt_find", ctypes.c_int, [
	("__extbuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__extlen",		ctypes.c_uint),
	("__offset",		ctypes.c_int),
	("__type",		ctypes.c_uint8),
	("__lenp",		ctypes.POINTER(ctypes.c_uint)),
	("__databufp",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

inet6_opt_get_val = _rpythonic_function_(		"inet6_opt_get_val", ctypes.c_int, [
	("__databuf",		ctypes.POINTER(ctypes.c_void_p)),
	("__offset",		ctypes.c_int),
	("__val",		ctypes.POINTER(ctypes.c_void_p)),
	("__vallen",		ctypes.c_uint),] )

inet6_rth_space = _rpythonic_function_(		"inet6_rth_space", ctypes.c_uint, [
	("__type",		ctypes.c_int),
	("__segments",		ctypes.c_int),] )

inet6_rth_init = _rpythonic_function_(		"inet6_rth_init", ctypes.POINTER(ctypes.c_void_p), [
	("__bp",		ctypes.POINTER(ctypes.c_void_p)),
	("__bp_len",		ctypes.c_uint),
	("__type",		ctypes.c_int),
	("__segments",		ctypes.c_int),] )

inet6_rth_add = _rpythonic_function_(		"inet6_rth_add", ctypes.c_int, [
	("__bp",		ctypes.POINTER(ctypes.c_void_p)),
	("__addr",		ctypes.POINTER(in6_addr)),] )

inet6_rth_reverse = _rpythonic_function_(		"inet6_rth_reverse", ctypes.c_int, [
	("__in",		ctypes.POINTER(ctypes.c_void_p)),
	("__out",		ctypes.POINTER(ctypes.c_void_p)),] )

inet6_rth_segments = _rpythonic_function_(		"inet6_rth_segments", ctypes.c_int, [("__bp",		ctypes.c_void_p)] )

inet6_rth_getaddr = _rpythonic_function_(		"inet6_rth_getaddr", ctypes.POINTER(in6_addr), [
	("__bp",		ctypes.POINTER(ctypes.c_void_p)),
	("__index",		ctypes.c_int),] )

getipv4sourcefilter = _rpythonic_function_(		"getipv4sourcefilter", ctypes.c_int, [
	("__s",		ctypes.c_int),
	("__interface_addr",		in_addr),
	("__group",		in_addr),
	("__fmode",		ctypes.POINTER(ctypes.c_uint32)),
	("__numsrc",		ctypes.POINTER(ctypes.c_uint32)),
	("__slist",		ctypes.POINTER(in_addr)),] )

setipv4sourcefilter = _rpythonic_function_(		"setipv4sourcefilter", ctypes.c_int, [
	("__s",		ctypes.c_int),
	("__interface_addr",		in_addr),
	("__group",		in_addr),
	("__fmode",		ctypes.c_uint32),
	("__numsrc",		ctypes.c_uint32),
	("__slist",		ctypes.POINTER(in_addr)),] )

getsourcefilter = _rpythonic_function_(		"getsourcefilter", ctypes.c_int, [
	("__s",		ctypes.c_int),
	("__interface_addr",		ctypes.c_uint32),
	("__group",		ctypes.POINTER(sockaddr)),
	("__grouplen",		ctypes.c_uint),
	("__fmode",		ctypes.POINTER(ctypes.c_uint32)),
	("__numsrc",		ctypes.POINTER(ctypes.c_uint32)),
	("__slist",		ctypes.POINTER(sockaddr_storage)),] )

setsourcefilter = _rpythonic_function_(		"setsourcefilter", ctypes.c_int, [
	("__s",		ctypes.c_int),
	("__interface_addr",		ctypes.c_uint32),
	("__group",		ctypes.POINTER(sockaddr)),
	("__grouplen",		ctypes.c_uint),
	("__fmode",		ctypes.c_uint32),
	("__numsrc",		ctypes.c_uint32),
	("__slist",		ctypes.POINTER(sockaddr_storage)),] )

MEM_allocN_len = _rpythonic_function_(		"MEM_allocN_len", ctypes.c_uint, [("vmemh",		ctypes.c_void_p)] )

MEM_freeN = _rpythonic_function_(		"MEM_freeN", ctypes.c_short, [("vmemh",		ctypes.c_void_p)] )

MEM_testN = _rpythonic_function_(		"MEM_testN", ctypes.c_short, [("vmemh",		ctypes.c_void_p)] )

MEM_dupallocN = _rpythonic_function_(		"MEM_dupallocN", ctypes.POINTER(ctypes.c_void_p), [("vmemh",		ctypes.c_void_p)] )

MEM_reallocN = _rpythonic_function_(		"MEM_reallocN", ctypes.POINTER(ctypes.c_void_p), [
	("vmemh",		ctypes.POINTER(ctypes.c_void_p)),
	("C_len",		ctypes.c_uint),] )

MEM_callocN = _rpythonic_function_(		"MEM_callocN", ctypes.POINTER(ctypes.c_void_p), [
	("C_len",		ctypes.c_uint),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

MEM_mallocN = _rpythonic_function_(		"MEM_mallocN", ctypes.POINTER(ctypes.c_void_p), [
	("C_len",		ctypes.c_uint),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

MEM_mapallocN = _rpythonic_function_(		"MEM_mapallocN", ctypes.POINTER(ctypes.c_void_p), [
	("C_len",		ctypes.c_uint),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

MEM_printmemlist_pydict = _rpythonic_function_(		"MEM_printmemlist_pydict", ctypes.c_void_p, [] )

MEM_printmemlist = _rpythonic_function_(		"MEM_printmemlist", ctypes.c_void_p, [] )

MEM_callbackmemlist = _rpythonic_function_(		"MEM_callbackmemlist", ctypes.c_void_p, [
	("func",		ctypes.c_void_p),] )

func = _rpythonic_function_(		"func", ctypes.c_void_p, [] )

MEM_printmemlist_stats = _rpythonic_function_(		"MEM_printmemlist_stats", ctypes.c_void_p, [] )

MEM_set_error_callback = _rpythonic_function_(		"MEM_set_error_callback", ctypes.c_void_p, [
	("func",		ctypes.c_void_p),] )

MEM_check_memory_integrity = _rpythonic_function_(		"MEM_check_memory_integrity", ctypes.c_int, [] )

MEM_set_lock_callback = _rpythonic_function_(		"MEM_set_lock_callback", ctypes.c_void_p, [
	("lock",		ctypes.c_void_p),
	("unlock",		ctypes.c_void_p),] )

lock = _rpythonic_function_(		"lock", ctypes.c_void_p, [] )

unlock = _rpythonic_function_(		"unlock", ctypes.c_void_p, [] )

MEM_set_memory_debug = _rpythonic_function_(		"MEM_set_memory_debug", ctypes.c_void_p, [] )

MEM_get_memory_in_use = _rpythonic_function_(		"MEM_get_memory_in_use", ctypes.c_uint, [] )

MEM_get_mapped_memory_in_use = _rpythonic_function_(		"MEM_get_mapped_memory_in_use", ctypes.c_uint, [] )

MEM_get_memory_blocks_in_use = _rpythonic_function_(		"MEM_get_memory_blocks_in_use", ctypes.c_int, [] )

MEM_reset_peak_memory = _rpythonic_function_(		"MEM_reset_peak_memory", ctypes.c_void_p, [] )

MEM_get_peak_memory = _rpythonic_function_(		"MEM_get_peak_memory", ctypes.c_uint, [] )

MEM_name_ptr = _rpythonic_function_(		"MEM_name_ptr", ctypes.POINTER(ctypes.c_char), [("vmemh",		ctypes.c_void_p)] )

BLF_init = _rpythonic_function_(		"BLF_init", ctypes.c_int, [
	("points",		ctypes.c_int),
	("dpi",		ctypes.c_int),] )

BLF_exit = _rpythonic_function_(		"BLF_exit", ctypes.c_void_p, [] )

BLF_cache_clear = _rpythonic_function_(		"BLF_cache_clear", ctypes.c_void_p, [] )

BLF_load = _rpythonic_function_(		"BLF_load", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BLF_load_mem = _rpythonic_function_(		"BLF_load_mem", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("mem",		ctypes.POINTER(ctypes.c_ubyte)),
	("mem_size",		ctypes.c_int),] )

BLF_load_unique = _rpythonic_function_(		"BLF_load_unique", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BLF_load_mem_unique = _rpythonic_function_(		"BLF_load_mem_unique", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("mem",		ctypes.POINTER(ctypes.c_ubyte)),
	("mem_size",		ctypes.c_int),] )

BLF_unload = _rpythonic_function_(		"BLF_unload", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BLF_metrics_attach = _rpythonic_function_(		"BLF_metrics_attach", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("mem",		ctypes.POINTER(ctypes.c_ubyte)),
	("mem_size",		ctypes.c_int),] )

BLF_aspect = _rpythonic_function_(		"BLF_aspect", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

BLF_position = _rpythonic_function_(		"BLF_position", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

BLF_size = _rpythonic_function_(		"BLF_size", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("size",		ctypes.c_int),
	("dpi",		ctypes.c_int),] )

BLF_matrix = _rpythonic_function_(		"BLF_matrix", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("m",		( ctypes.c_double * 16 )),] )

BLF_draw_default = _rpythonic_function_(		"BLF_draw_default", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLF_draw_default_ascii = _rpythonic_function_(		"BLF_draw_default_ascii", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLF_draw = _rpythonic_function_(		"BLF_draw", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLF_draw_ascii = _rpythonic_function_(		"BLF_draw_ascii", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLF_boundbox = _rpythonic_function_(		"BLF_boundbox", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("box",		ctypes.POINTER(rctf)),] )

BLF_width = _rpythonic_function_(		"BLF_width", ctypes.c_float, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_height = _rpythonic_function_(		"BLF_height", ctypes.c_float, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_height_max = _rpythonic_function_(		"BLF_height_max", ctypes.c_float, [
	("fontid",		ctypes.c_int),] )

BLF_width_max = _rpythonic_function_(		"BLF_width_max", ctypes.c_float, [
	("fontid",		ctypes.c_int),] )

BLF_descender = _rpythonic_function_(		"BLF_descender", ctypes.c_float, [
	("fontid",		ctypes.c_int),] )

BLF_ascender = _rpythonic_function_(		"BLF_ascender", ctypes.c_float, [
	("fontid",		ctypes.c_int),] )

BLF_width_and_height = _rpythonic_function_(		"BLF_width_and_height", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.POINTER(ctypes.c_float)),
	("height",		ctypes.POINTER(ctypes.c_float)),] )

BLF_fixed_width = _rpythonic_function_(		"BLF_fixed_width", ctypes.c_float, [
	("fontid",		ctypes.c_int),] )

BLF_width_default = _rpythonic_function_(		"BLF_width_default", ctypes.c_float, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_height_default = _rpythonic_function_(		"BLF_height_default", ctypes.c_float, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_rotation_default = _rpythonic_function_(		"BLF_rotation_default", ctypes.c_void_p, [
	("angle",		ctypes.c_float),] )

BLF_enable_default = _rpythonic_function_(		"BLF_enable_default", ctypes.c_void_p, [
	("option",		ctypes.c_int),] )

BLF_disable_default = _rpythonic_function_(		"BLF_disable_default", ctypes.c_void_p, [
	("option",		ctypes.c_int),] )

BLF_rotation = _rpythonic_function_(		"BLF_rotation", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("angle",		ctypes.c_float),] )

BLF_clipping = _rpythonic_function_(		"BLF_clipping", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("xmin",		ctypes.c_float),
	("ymin",		ctypes.c_float),
	("xmax",		ctypes.c_float),
	("ymax",		ctypes.c_float),] )

BLF_clipping_default = _rpythonic_function_(		"BLF_clipping_default", ctypes.c_void_p, [
	("xmin",		ctypes.c_float),
	("ymin",		ctypes.c_float),
	("xmax",		ctypes.c_float),
	("ymax",		ctypes.c_float),] )

BLF_blur = _rpythonic_function_(		"BLF_blur", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("size",		ctypes.c_int),] )

BLF_enable = _rpythonic_function_(		"BLF_enable", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("option",		ctypes.c_int),] )

BLF_disable = _rpythonic_function_(		"BLF_disable", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("option",		ctypes.c_int),] )

BLF_shadow = _rpythonic_function_(		"BLF_shadow", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("level",		ctypes.c_int),
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("a",		ctypes.c_float),] )

BLF_shadow_offset = _rpythonic_function_(		"BLF_shadow_offset", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

BLF_buffer = _rpythonic_function_(		"BLF_buffer", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("fbuf",		ctypes.POINTER(ctypes.c_float)),
	("cbuf",		ctypes.POINTER(ctypes.c_ubyte)),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("nch",		ctypes.c_int),] )

BLF_buffer_col = _rpythonic_function_(		"BLF_buffer_col", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("a",		ctypes.c_float),] )

BLF_draw_buffer = _rpythonic_function_(		"BLF_draw_buffer", ctypes.c_void_p, [
	("fontid",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLF_dir_add = _rpythonic_function_(		"BLF_dir_add", ctypes.c_void_p, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLF_dir_rem = _rpythonic_function_(		"BLF_dir_rem", ctypes.c_void_p, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLF_dir_get = _rpythonic_function_(		"BLF_dir_get", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("ndir",		ctypes.POINTER(ctypes.c_int)),] )

BLF_dir_free = _rpythonic_function_(		"BLF_dir_free", ctypes.c_void_p, [
	("dirs",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("count",		ctypes.c_int),] )

BA_ArgCallback = _rpythonic_function_(		"BA_ArgCallback", ctypes.c_int, [
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_argsInit = _rpythonic_function_(		"BLI_argsInit", ctypes.POINTER(bArgs), [
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

BLI_argsFree = _rpythonic_function_(		"BLI_argsFree", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),] )

BLI_argsAdd = _rpythonic_function_(		"BLI_argsAdd", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),
	("pass",		ctypes.c_int),
	("short_arg",		ctypes.POINTER(ctypes.c_char)),
	("long_arg",		ctypes.POINTER(ctypes.c_char)),
	("doc",		ctypes.POINTER(ctypes.c_char)),
	("cb",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_argsAddCase = _rpythonic_function_(		"BLI_argsAddCase", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),
	("pass",		ctypes.c_int),
	("short_arg",		ctypes.POINTER(ctypes.c_char)),
	("short_case",		ctypes.c_int),
	("long_arg",		ctypes.POINTER(ctypes.c_char)),
	("long_case",		ctypes.c_int),
	("doc",		ctypes.POINTER(ctypes.c_char)),
	("cb",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_argsParse = _rpythonic_function_(		"BLI_argsParse", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),
	("pass",		ctypes.c_int),
	("default_cb",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int,ctypes.POINTER(ctypes.POINTER(ctypes.c_char)),ctypes.POINTER(ctypes.c_void_p),)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_argsPrintArgDoc = _rpythonic_function_(		"BLI_argsPrintArgDoc", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),
	("arg",		ctypes.POINTER(ctypes.c_char)),] )

BLI_argsPrintOtherDoc = _rpythonic_function_(		"BLI_argsPrintOtherDoc", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),] )

BLI_argsPrint = _rpythonic_function_(		"BLI_argsPrint", ctypes.c_void_p, [
	("ba",		ctypes.POINTER(bArgs)),] )

clone = _rpythonic_function_(		"clone", ctypes.c_int, [
	("__fn",		ctypes.c_void_p),
	("__child_stack",		ctypes.POINTER(ctypes.c_void_p)),
	("__flags",		ctypes.c_int),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_argsArgv = _rpythonic_function_(		"BLI_argsArgv", ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), [
	("ba",		ctypes.POINTER(bArgs)),] )

unshare = _rpythonic_function_(		"unshare", ctypes.c_int, [
	("__flags",		ctypes.c_int),] )

sched_getcpu = _rpythonic_function_(		"sched_getcpu", ctypes.c_int, [] )

sched_setparam = _rpythonic_function_(		"sched_setparam", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_getparam = _rpythonic_function_(		"sched_getparam", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_setscheduler = _rpythonic_function_(		"sched_setscheduler", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__policy",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

sched_getscheduler = _rpythonic_function_(		"sched_getscheduler", ctypes.c_int, [
	("__pid",		ctypes.c_int),] )

sched_yield = _rpythonic_function_(		"sched_yield", ctypes.c_int, [] )

sched_get_priority_max = _rpythonic_function_(		"sched_get_priority_max", ctypes.c_int, [
	("__algorithm",		ctypes.c_int),] )

sched_get_priority_min = _rpythonic_function_(		"sched_get_priority_min", ctypes.c_int, [
	("__algorithm",		ctypes.c_int),] )

sched_rr_get_interval = _rpythonic_function_(		"sched_rr_get_interval", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__t",		ctypes.POINTER(timespec)),] )

sched_setaffinity = _rpythonic_function_(		"sched_setaffinity", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

sched_getaffinity = _rpythonic_function_(		"sched_getaffinity", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

clock = _rpythonic_function_(		"clock", ctypes.c_int64, [] )

time = _rpythonic_function_(		"time", ctypes.c_int64, [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

difftime = _rpythonic_function_(		"difftime", ctypes.c_double, [
	("__time1",		ctypes.c_int64),
	("__time0",		ctypes.c_int64),] )

mktime = _rpythonic_function_(		"mktime", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

strftime = _rpythonic_function_(		"strftime", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strptime = _rpythonic_function_(		"strptime", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),] )

strftime_l = _rpythonic_function_(		"strftime_l", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

strptime_l = _rpythonic_function_(		"strptime_l", ctypes.POINTER(ctypes.c_char), [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__fmt",		ctypes.POINTER(ctypes.c_char)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

gmtime = _rpythonic_function_(		"gmtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

localtime = _rpythonic_function_(		"localtime", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

gmtime_r = _rpythonic_function_(		"gmtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

localtime_r = _rpythonic_function_(		"localtime_r", ctypes.POINTER(tm), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__tp",		ctypes.POINTER(tm)),] )

asctime = _rpythonic_function_(		"asctime", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),] )

ctime = _rpythonic_function_(		"ctime", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),] )

asctime_r = _rpythonic_function_(		"asctime_r", ctypes.POINTER(ctypes.c_char), [
	("__tp",		ctypes.POINTER(tm)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

ctime_r = _rpythonic_function_(		"ctime_r", ctypes.POINTER(ctypes.c_char), [
	("__timer",		ctypes.POINTER(ctypes.c_int64)),
	("__buf",		ctypes.POINTER(ctypes.c_char)),] )

tzset = _rpythonic_function_(		"tzset", ctypes.c_void_p, [] )

stime = _rpythonic_function_(		"stime", ctypes.c_int, [
	("__when",		ctypes.POINTER(ctypes.c_int64)),] )

timegm = _rpythonic_function_(		"timegm", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

timelocal = _rpythonic_function_(		"timelocal", ctypes.c_int64, [
	("__tp",		ctypes.POINTER(tm)),] )

dysize = _rpythonic_function_(		"dysize", ctypes.c_int, [
	("__year",		ctypes.c_int),] )

nanosleep = _rpythonic_function_(		"nanosleep", ctypes.c_int, [
	("__requested_time",		ctypes.POINTER(timespec)),
	("__remaining",		ctypes.POINTER(timespec)),] )

clock_getres = _rpythonic_function_(		"clock_getres", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__res",		ctypes.POINTER(timespec)),] )

clock_gettime = _rpythonic_function_(		"clock_gettime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_settime = _rpythonic_function_(		"clock_settime", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__tp",		ctypes.POINTER(timespec)),] )

clock_nanosleep = _rpythonic_function_(		"clock_nanosleep", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__flags",		ctypes.c_int),
	("__req",		ctypes.POINTER(timespec)),
	("__rem",		ctypes.POINTER(timespec)),] )

clock_getcpuclockid = _rpythonic_function_(		"clock_getcpuclockid", ctypes.c_int, [
	("__pid",		ctypes.c_int),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

timer_create = _rpythonic_function_(		"timer_create", ctypes.c_int, [
	("__clock_id",		ctypes.c_int),
	("__evp",		ctypes.POINTER(sigevent)),
	("__timerid",		ctypes.POINTER(ctypes.c_void_p)),] )

timer_delete = _rpythonic_function_(		"timer_delete", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

timer_settime = _rpythonic_function_(		"timer_settime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__flags",		ctypes.c_int),
	("__value",		ctypes.POINTER(itimerspec)),
	("__ovalue",		ctypes.POINTER(itimerspec)),] )

timer_gettime = _rpythonic_function_(		"timer_gettime", ctypes.c_int, [
	("__timerid",		ctypes.c_void_p),
	("__value",		ctypes.POINTER(itimerspec)),] )

timer_getoverrun = _rpythonic_function_(		"timer_getoverrun", ctypes.c_int, [("__timerid",		ctypes.c_void_p)] )

getdate = _rpythonic_function_(		"getdate", ctypes.POINTER(tm), [
	("__string",		ctypes.POINTER(ctypes.c_char)),] )

getdate_r = _rpythonic_function_(		"getdate_r", ctypes.c_int, [
	("__string",		ctypes.POINTER(ctypes.c_char)),
	("__resbufp",		ctypes.POINTER(tm)),] )

pthread_create = _rpythonic_function_(		"pthread_create", ctypes.c_int, [
	("__newthread",		ctypes.POINTER(ctypes.c_uint64)),
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__start_routine",		ctypes.POINTER(ctypes.c_void_p)),
	("__arg",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_exit = _rpythonic_function_(		"pthread_exit", ctypes.c_void_p, [("__retval",		ctypes.c_void_p)] )

pthread_join = _rpythonic_function_(		"pthread_join", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__thread_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_tryjoin_np = _rpythonic_function_(		"pthread_tryjoin_np", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__thread_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_timedjoin_np = _rpythonic_function_(		"pthread_timedjoin_np", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__thread_return",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_detach = _rpythonic_function_(		"pthread_detach", ctypes.c_int, [
	("__th",		ctypes.c_uint64),] )

pthread_self = _rpythonic_function_(		"pthread_self", ctypes.c_uint64, [] )

pthread_equal = _rpythonic_function_(		"pthread_equal", ctypes.c_int, [
	("__thread1",		ctypes.c_uint64),
	("__thread2",		ctypes.c_uint64),] )

pthread_attr_init = _rpythonic_function_(		"pthread_attr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_attr_destroy = _rpythonic_function_(		"pthread_attr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_attr_getdetachstate = _rpythonic_function_(		"pthread_attr_getdetachstate", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__detachstate",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setdetachstate = _rpythonic_function_(		"pthread_attr_setdetachstate", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__detachstate",		ctypes.c_int),] )

pthread_attr_getguardsize = _rpythonic_function_(		"pthread_attr_getguardsize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__guardsize",		ctypes.POINTER(ctypes.c_uint)),] )

pthread_attr_setguardsize = _rpythonic_function_(		"pthread_attr_setguardsize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__guardsize",		ctypes.c_uint),] )

pthread_attr_getschedparam = _rpythonic_function_(		"pthread_attr_getschedparam", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_attr_setschedparam = _rpythonic_function_(		"pthread_attr_setschedparam", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_attr_getschedpolicy = _rpythonic_function_(		"pthread_attr_getschedpolicy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__policy",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setschedpolicy = _rpythonic_function_(		"pthread_attr_setschedpolicy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__policy",		ctypes.c_int),] )

pthread_attr_getinheritsched = _rpythonic_function_(		"pthread_attr_getinheritsched", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__inherit",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setinheritsched = _rpythonic_function_(		"pthread_attr_setinheritsched", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__inherit",		ctypes.c_int),] )

pthread_attr_getscope = _rpythonic_function_(		"pthread_attr_getscope", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__scope",		ctypes.POINTER(ctypes.c_int)),] )

pthread_attr_setscope = _rpythonic_function_(		"pthread_attr_setscope", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__scope",		ctypes.c_int),] )

pthread_attr_getstackaddr = _rpythonic_function_(		"pthread_attr_getstackaddr", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pthread_attr_setstackaddr = _rpythonic_function_(		"pthread_attr_setstackaddr", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_attr_getstacksize = _rpythonic_function_(		"pthread_attr_getstacksize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stacksize",		ctypes.POINTER(ctypes.c_uint)),] )

pthread_attr_setstacksize = _rpythonic_function_(		"pthread_attr_setstacksize", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stacksize",		ctypes.c_uint),] )

pthread_attr_getstack = _rpythonic_function_(		"pthread_attr_getstack", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("__stacksize",		ctypes.POINTER(ctypes.c_uint)),] )

pthread_attr_setstack = _rpythonic_function_(		"pthread_attr_setstack", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__stackaddr",		ctypes.POINTER(ctypes.c_void_p)),
	("__stacksize",		ctypes.c_uint),] )

pthread_attr_setaffinity_np = _rpythonic_function_(		"pthread_attr_setaffinity_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

pthread_attr_getaffinity_np = _rpythonic_function_(		"pthread_attr_getaffinity_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_attr_t)),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

pthread_getattr_np = _rpythonic_function_(		"pthread_getattr_np", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__attr",		ctypes.POINTER(pthread_attr_t)),] )

pthread_setschedparam = _rpythonic_function_(		"pthread_setschedparam", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__policy",		ctypes.c_int),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_getschedparam = _rpythonic_function_(		"pthread_getschedparam", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__policy",		ctypes.POINTER(ctypes.c_int)),
	("__param",		ctypes.POINTER(sched_param)),] )

pthread_setschedprio = _rpythonic_function_(		"pthread_setschedprio", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__prio",		ctypes.c_int),] )

pthread_getname_np = _rpythonic_function_(		"pthread_getname_np", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__buf",		ctypes.POINTER(ctypes.c_char)),
	("__buflen",		ctypes.c_uint),] )

pthread_setname_np = _rpythonic_function_(		"pthread_setname_np", ctypes.c_int, [
	("__target_thread",		ctypes.c_uint64),
	("__name",		ctypes.POINTER(ctypes.c_char)),] )

pthread_getconcurrency = _rpythonic_function_(		"pthread_getconcurrency", ctypes.c_int, [] )

pthread_setconcurrency = _rpythonic_function_(		"pthread_setconcurrency", ctypes.c_int, [
	("__level",		ctypes.c_int),] )

pthread_yield = _rpythonic_function_(		"pthread_yield", ctypes.c_int, [] )

pthread_setaffinity_np = _rpythonic_function_(		"pthread_setaffinity_np", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

pthread_getaffinity_np = _rpythonic_function_(		"pthread_getaffinity_np", ctypes.c_int, [
	("__th",		ctypes.c_uint64),
	("__cpusetsize",		ctypes.c_uint),
	("__cpuset",		ctypes.POINTER(cpu_set_t)),] )

pthread_once = _rpythonic_function_(		"pthread_once", ctypes.c_int, [
	("__once_control",		ctypes.POINTER(ctypes.c_int)),
	("__init_routine",		ctypes.c_void_p),] )

pthread_setcancelstate = _rpythonic_function_(		"pthread_setcancelstate", ctypes.c_int, [
	("__state",		ctypes.c_int),
	("__oldstate",		ctypes.POINTER(ctypes.c_int)),] )

pthread_setcanceltype = _rpythonic_function_(		"pthread_setcanceltype", ctypes.c_int, [
	("__type",		ctypes.c_int),
	("__oldtype",		ctypes.POINTER(ctypes.c_int)),] )

pthread_cancel = _rpythonic_function_(		"pthread_cancel", ctypes.c_int, [
	("__th",		ctypes.c_uint64),] )

pthread_testcancel = _rpythonic_function_(		"pthread_testcancel", ctypes.c_void_p, [] )

pthread_mutex_init = _rpythonic_function_(		"pthread_mutex_init", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__mutexattr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutex_destroy = _rpythonic_function_(		"pthread_mutex_destroy", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_trylock = _rpythonic_function_(		"pthread_mutex_trylock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_lock = _rpythonic_function_(		"pthread_mutex_lock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_timedlock = _rpythonic_function_(		"pthread_mutex_timedlock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_mutex_unlock = _rpythonic_function_(		"pthread_mutex_unlock", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_getprioceiling = _rpythonic_function_(		"pthread_mutex_getprioceiling", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__prioceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutex_setprioceiling = _rpythonic_function_(		"pthread_mutex_setprioceiling", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__prioceiling",		ctypes.c_int),
	("__old_ceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutex_consistent = _rpythonic_function_(		"pthread_mutex_consistent", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutex_consistent_np = _rpythonic_function_(		"pthread_mutex_consistent_np", ctypes.c_int, [
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_mutexattr_init = _rpythonic_function_(		"pthread_mutexattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutexattr_destroy = _rpythonic_function_(		"pthread_mutexattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),] )

pthread_mutexattr_getpshared = _rpythonic_function_(		"pthread_mutexattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setpshared = _rpythonic_function_(		"pthread_mutexattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_mutexattr_gettype = _rpythonic_function_(		"pthread_mutexattr_gettype", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__kind",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_settype = _rpythonic_function_(		"pthread_mutexattr_settype", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__kind",		ctypes.c_int),] )

pthread_mutexattr_getprotocol = _rpythonic_function_(		"pthread_mutexattr_getprotocol", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__protocol",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setprotocol = _rpythonic_function_(		"pthread_mutexattr_setprotocol", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__protocol",		ctypes.c_int),] )

pthread_mutexattr_getprioceiling = _rpythonic_function_(		"pthread_mutexattr_getprioceiling", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__prioceiling",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setprioceiling = _rpythonic_function_(		"pthread_mutexattr_setprioceiling", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__prioceiling",		ctypes.c_int),] )

pthread_mutexattr_getrobust = _rpythonic_function_(		"pthread_mutexattr_getrobust", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_getrobust_np = _rpythonic_function_(		"pthread_mutexattr_getrobust_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.POINTER(ctypes.c_int)),] )

pthread_mutexattr_setrobust = _rpythonic_function_(		"pthread_mutexattr_setrobust", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.c_int),] )

pthread_mutexattr_setrobust_np = _rpythonic_function_(		"pthread_mutexattr_setrobust_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_mutexattr_t)),
	("__robustness",		ctypes.c_int),] )

pthread_rwlock_init = _rpythonic_function_(		"pthread_rwlock_init", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlock_destroy = _rpythonic_function_(		"pthread_rwlock_destroy", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_rdlock = _rpythonic_function_(		"pthread_rwlock_rdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_tryrdlock = _rpythonic_function_(		"pthread_rwlock_tryrdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_timedrdlock = _rpythonic_function_(		"pthread_rwlock_timedrdlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_rwlock_wrlock = _rpythonic_function_(		"pthread_rwlock_wrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_trywrlock = _rpythonic_function_(		"pthread_rwlock_trywrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlock_timedwrlock = _rpythonic_function_(		"pthread_rwlock_timedwrlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_rwlock_unlock = _rpythonic_function_(		"pthread_rwlock_unlock", ctypes.c_int, [
	("__rwlock",		ctypes.POINTER(pthread_rwlock_t)),] )

pthread_rwlockattr_init = _rpythonic_function_(		"pthread_rwlockattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlockattr_destroy = _rpythonic_function_(		"pthread_rwlockattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),] )

pthread_rwlockattr_getpshared = _rpythonic_function_(		"pthread_rwlockattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_rwlockattr_setpshared = _rpythonic_function_(		"pthread_rwlockattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_rwlockattr_getkind_np = _rpythonic_function_(		"pthread_rwlockattr_getkind_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pref",		ctypes.POINTER(ctypes.c_int)),] )

pthread_rwlockattr_setkind_np = _rpythonic_function_(		"pthread_rwlockattr_setkind_np", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_rwlockattr_t)),
	("__pref",		ctypes.c_int),] )

pthread_cond_init = _rpythonic_function_(		"pthread_cond_init", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__cond_attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_cond_destroy = _rpythonic_function_(		"pthread_cond_destroy", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_signal = _rpythonic_function_(		"pthread_cond_signal", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_broadcast = _rpythonic_function_(		"pthread_cond_broadcast", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),] )

pthread_cond_wait = _rpythonic_function_(		"pthread_cond_wait", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),] )

pthread_cond_timedwait = _rpythonic_function_(		"pthread_cond_timedwait", ctypes.c_int, [
	("__cond",		ctypes.POINTER(pthread_cond_t)),
	("__mutex",		ctypes.POINTER(pthread_mutex_t)),
	("__abstime",		ctypes.POINTER(timespec)),] )

pthread_condattr_init = _rpythonic_function_(		"pthread_condattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_condattr_destroy = _rpythonic_function_(		"pthread_condattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),] )

pthread_condattr_getpshared = _rpythonic_function_(		"pthread_condattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_condattr_setpshared = _rpythonic_function_(		"pthread_condattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_condattr_getclock = _rpythonic_function_(		"pthread_condattr_getclock", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

pthread_condattr_setclock = _rpythonic_function_(		"pthread_condattr_setclock", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_condattr_t)),
	("__clock_id",		ctypes.c_int),] )

pthread_spin_init = _rpythonic_function_(		"pthread_spin_init", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),
	("__pshared",		ctypes.c_int),] )

pthread_spin_destroy = _rpythonic_function_(		"pthread_spin_destroy", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_lock = _rpythonic_function_(		"pthread_spin_lock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_trylock = _rpythonic_function_(		"pthread_spin_trylock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_spin_unlock = _rpythonic_function_(		"pthread_spin_unlock", ctypes.c_int, [
	("__lock",		ctypes.POINTER(ctypes.c_int)),] )

pthread_barrier_init = _rpythonic_function_(		"pthread_barrier_init", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__count",		ctypes.c_uint),] )

pthread_barrier_destroy = _rpythonic_function_(		"pthread_barrier_destroy", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),] )

pthread_barrier_wait = _rpythonic_function_(		"pthread_barrier_wait", ctypes.c_int, [
	("__barrier",		ctypes.POINTER(pthread_barrier_t)),] )

pthread_barrierattr_init = _rpythonic_function_(		"pthread_barrierattr_init", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),] )

pthread_barrierattr_destroy = _rpythonic_function_(		"pthread_barrierattr_destroy", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),] )

pthread_barrierattr_getpshared = _rpythonic_function_(		"pthread_barrierattr_getpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__pshared",		ctypes.POINTER(ctypes.c_int)),] )

pthread_barrierattr_setpshared = _rpythonic_function_(		"pthread_barrierattr_setpshared", ctypes.c_int, [
	("__attr",		ctypes.POINTER(pthread_barrierattr_t)),
	("__pshared",		ctypes.c_int),] )

pthread_key_create = _rpythonic_function_(		"pthread_key_create", ctypes.c_int, [
	("__key",		ctypes.POINTER(ctypes.c_uint)),
	("__destr_function",		ctypes.c_void_p),] )

pthread_key_delete = _rpythonic_function_(		"pthread_key_delete", ctypes.c_int, [
	("__key",		ctypes.c_uint),] )

pthread_getspecific = _rpythonic_function_(		"pthread_getspecific", ctypes.POINTER(ctypes.c_void_p), [
	("__key",		ctypes.c_uint),] )

pthread_setspecific = _rpythonic_function_(		"pthread_setspecific", ctypes.c_int, [
	("__key",		ctypes.c_uint),
	("__pointer",		ctypes.POINTER(ctypes.c_void_p)),] )

pthread_getcpuclockid = _rpythonic_function_(		"pthread_getcpuclockid", ctypes.c_int, [
	("__thread_id",		ctypes.c_uint64),
	("__clock_id",		ctypes.POINTER(ctypes.c_int)),] )

pthread_atfork = _rpythonic_function_(		"pthread_atfork", ctypes.c_int, [
	("__prepare",		ctypes.c_void_p),
	("__parent",		ctypes.c_void_p),
	("__child",		ctypes.c_void_p),] )

BLI_threadapi_init = _rpythonic_function_(		"BLI_threadapi_init", ctypes.c_void_p, [] )

BLI_init_threads = _rpythonic_function_(		"BLI_init_threads", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),
	("do_thread",		ctypes.POINTER(ctypes.c_void_p)),
	("tot",		ctypes.c_int),] )

do_thread = _rpythonic_function_(		"do_thread", ctypes.POINTER(ctypes.c_void_p), [] )

BLI_available_threads = _rpythonic_function_(		"BLI_available_threads", ctypes.c_int, [
	("threadbase",		ctypes.POINTER(ListBase)),] )

BLI_available_thread_index = _rpythonic_function_(		"BLI_available_thread_index", ctypes.c_int, [
	("threadbase",		ctypes.POINTER(ListBase)),] )

BLI_insert_thread = _rpythonic_function_(		"BLI_insert_thread", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),
	("callerdata",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_remove_thread = _rpythonic_function_(		"BLI_remove_thread", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),
	("callerdata",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_remove_thread_index = _rpythonic_function_(		"BLI_remove_thread_index", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),
	("index",		ctypes.c_int),] )

BLI_remove_threads = _rpythonic_function_(		"BLI_remove_threads", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),] )

BLI_end_threads = _rpythonic_function_(		"BLI_end_threads", ctypes.c_void_p, [
	("threadbase",		ctypes.POINTER(ListBase)),] )

BLI_thread_is_main = _rpythonic_function_(		"BLI_thread_is_main", ctypes.c_int, [] )

BLI_begin_threaded_malloc = _rpythonic_function_(		"BLI_begin_threaded_malloc", ctypes.c_void_p, [] )

BLI_end_threaded_malloc = _rpythonic_function_(		"BLI_end_threaded_malloc", ctypes.c_void_p, [] )

BLI_system_thread_count = _rpythonic_function_(		"BLI_system_thread_count", ctypes.c_int, [] )

BLI_lock_thread = _rpythonic_function_(		"BLI_lock_thread", ctypes.c_void_p, [
	("C_type",		ctypes.c_int),] )

BLI_unlock_thread = _rpythonic_function_(		"BLI_unlock_thread", ctypes.c_void_p, [
	("C_type",		ctypes.c_int),] )

BLI_mutex_init = _rpythonic_function_(		"BLI_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_mutex_t)),] )

BLI_mutex_lock = _rpythonic_function_(		"BLI_mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_mutex_t)),] )

BLI_mutex_unlock = _rpythonic_function_(		"BLI_mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_mutex_t)),] )

BLI_mutex_end = _rpythonic_function_(		"BLI_mutex_end", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_mutex_t)),] )

BLI_rw_mutex_init = _rpythonic_function_(		"BLI_rw_mutex_init", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_rwlock_t)),] )

BLI_rw_mutex_lock = _rpythonic_function_(		"BLI_rw_mutex_lock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_rwlock_t)),
	("mode",		ctypes.c_int),] )

BLI_rw_mutex_unlock = _rpythonic_function_(		"BLI_rw_mutex_unlock", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_rwlock_t)),] )

BLI_rw_mutex_end = _rpythonic_function_(		"BLI_rw_mutex_end", ctypes.c_void_p, [
	("mutex",		ctypes.POINTER(pthread_rwlock_t)),] )

BLI_create_worker = _rpythonic_function_(		"BLI_create_worker", ctypes.POINTER(ThreadedWorker), [
	("do_thread",		ctypes.POINTER(ctypes.c_void_p)),
	("tot",		ctypes.c_int),
	("sleep_time",		ctypes.c_int),] )

BLI_end_worker = _rpythonic_function_(		"BLI_end_worker", ctypes.c_void_p, [
	("worker",		ctypes.POINTER(ThreadedWorker)),] )

BLI_destroy_worker = _rpythonic_function_(		"BLI_destroy_worker", ctypes.c_void_p, [
	("worker",		ctypes.POINTER(ThreadedWorker)),] )

BLI_insert_work = _rpythonic_function_(		"BLI_insert_work", ctypes.c_void_p, [
	("worker",		ctypes.POINTER(ThreadedWorker)),
	("param",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_thread_queue_init = _rpythonic_function_(		"BLI_thread_queue_init", ctypes.POINTER(ThreadQueue), [] )

BLI_thread_queue_free = _rpythonic_function_(		"BLI_thread_queue_free", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(ThreadQueue)),] )

BLI_thread_queue_push = _rpythonic_function_(		"BLI_thread_queue_push", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(ThreadQueue)),
	("work",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_thread_queue_pop = _rpythonic_function_(		"BLI_thread_queue_pop", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(ThreadQueue)),] )

BLI_thread_queue_pop_timeout = _rpythonic_function_(		"BLI_thread_queue_pop_timeout", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(ThreadQueue)),
	("ms",		ctypes.c_int),] )

BLI_thread_queue_size = _rpythonic_function_(		"BLI_thread_queue_size", ctypes.c_int, [
	("queue",		ctypes.POINTER(ThreadQueue)),] )

BLI_thread_queue_nowait = _rpythonic_function_(		"BLI_thread_queue_nowait", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(ThreadQueue)),] )

BLI_addfillvert = _rpythonic_function_(		"BLI_addfillvert", ctypes.POINTER(EditVert), [
	("vec",		ctypes.POINTER(ctypes.c_float)),] )

BLI_addfilledge = _rpythonic_function_(		"BLI_addfilledge", ctypes.POINTER(EditEdge), [
	("v1",		ctypes.POINTER(EditVert)),
	("v2",		ctypes.POINTER(EditVert)),] )

BLI_edgefill = _rpythonic_function_(		"BLI_edgefill", ctypes.c_int, [
	("mat_nr",		ctypes.c_short),] )

BLI_end_edgefill = _rpythonic_function_(		"BLI_end_edgefill", ctypes.c_void_p, [] )

BLI_setErrorCallBack = _rpythonic_function_(		"BLI_setErrorCallBack", ctypes.c_void_p, [
	("f",		ctypes.c_void_p),] )

f = _rpythonic_function_(		"f", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_char)),] )

BLI_setInterruptCallBack = _rpythonic_function_(		"BLI_setInterruptCallBack", ctypes.c_void_p, [
	("f",		ctypes.c_void_p),] )

BLI_insertlink = _rpythonic_function_(		"BLI_insertlink", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vprevlink",		ctypes.POINTER(ctypes.c_void_p)),
	("vnewlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_findlink = _rpythonic_function_(		"BLI_findlink", ctypes.POINTER(ctypes.c_void_p), [
	("listbase",		ctypes.POINTER(ListBase)),
	("number",		ctypes.c_int),] )

BLI_findindex = _rpythonic_function_(		"BLI_findindex", ctypes.c_int, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_findstringindex = _rpythonic_function_(		"BLI_findstringindex", ctypes.c_int, [
	("listbase",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_int),] )

BLI_findstring = _rpythonic_function_(		"BLI_findstring", ctypes.POINTER(ctypes.c_void_p), [
	("listbase",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_int),] )

BLI_findstring_ptr = _rpythonic_function_(		"BLI_findstring_ptr", ctypes.POINTER(ctypes.c_void_p), [
	("listbase",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_int),] )

BLI_rfindstring = _rpythonic_function_(		"BLI_rfindstring", ctypes.POINTER(ctypes.c_void_p), [
	("listbase",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_int),] )

BLI_rfindstring_ptr = _rpythonic_function_(		"BLI_rfindstring_ptr", ctypes.POINTER(ctypes.c_void_p), [
	("listbase",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ctypes.c_char)),
	("offset",		ctypes.c_int),] )

BLI_freelistN = _rpythonic_function_(		"BLI_freelistN", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),] )

BLI_addtail = _rpythonic_function_(		"BLI_addtail", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_remlink = _rpythonic_function_(		"BLI_remlink", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_remlink_safe = _rpythonic_function_(		"BLI_remlink_safe", ctypes.c_int, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_addhead = _rpythonic_function_(		"BLI_addhead", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_insertlinkbefore = _rpythonic_function_(		"BLI_insertlinkbefore", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vnextlink",		ctypes.POINTER(ctypes.c_void_p)),
	("vnewlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_insertlinkafter = _rpythonic_function_(		"BLI_insertlinkafter", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vprevlink",		ctypes.POINTER(ctypes.c_void_p)),
	("vnewlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_sortlist = _rpythonic_function_(		"BLI_sortlist", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("cmp",		ctypes.c_void_p),] )

cmp = _rpythonic_function_(		"cmp", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_freelist = _rpythonic_function_(		"BLI_freelist", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),] )

BLI_countlist = _rpythonic_function_(		"BLI_countlist", ctypes.c_int, [
	("listbase",		ctypes.POINTER(ListBase)),] )

BLI_freelinkN = _rpythonic_function_(		"BLI_freelinkN", ctypes.c_void_p, [
	("listbase",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_movelisttolist = _rpythonic_function_(		"BLI_movelisttolist", ctypes.c_void_p, [
	("dst",		ctypes.POINTER(ListBase)),
	("src",		ctypes.POINTER(ListBase)),] )

BLI_duplicatelist = _rpythonic_function_(		"BLI_duplicatelist", ctypes.c_void_p, [
	("dst",		ctypes.POINTER(ListBase)),
	("src",		ctypes.POINTER(ListBase)),] )

BLI_genericNodeN = _rpythonic_function_(		"BLI_genericNodeN", ctypes.POINTER(LinkData), [("data",		ctypes.c_void_p)] )

BLI_strdup = _rpythonic_function_(		"BLI_strdup", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strdupn = _rpythonic_function_(		"BLI_strdupn", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLI_strdupcat = _rpythonic_function_(		"BLI_strdupcat", ctypes.POINTER(ctypes.c_char), [
	("str1",		ctypes.POINTER(ctypes.c_char)),
	("str2",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strncpy = _rpythonic_function_(		"BLI_strncpy", ctypes.POINTER(ctypes.c_char), [
	("dst",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("maxncpy",		ctypes.c_uint),] )

BLI_getQuotedStr = _rpythonic_function_(		"BLI_getQuotedStr", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("prefix",		ctypes.POINTER(ctypes.c_char)),] )

BLI_replacestr = _rpythonic_function_(		"BLI_replacestr", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("oldText",		ctypes.POINTER(ctypes.c_char)),
	("newText",		ctypes.POINTER(ctypes.c_char)),] )

BLI_snprintf = _rpythonic_function_(		"BLI_snprintf", ctypes.c_uint, [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

BLI_sprintfN = _rpythonic_function_(		"BLI_sprintfN", ctypes.POINTER(ctypes.c_char), [
	("format",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strescape = _rpythonic_function_(		"BLI_strescape", ctypes.c_uint, [
	("dst",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),] )

BLI_strcaseeq = _rpythonic_function_(		"BLI_strcaseeq", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_char)),
	("b",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strcasestr = _rpythonic_function_(		"BLI_strcasestr", ctypes.POINTER(ctypes.c_char), [
	("s",		ctypes.POINTER(ctypes.c_char)),
	("find",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strcasecmp = _rpythonic_function_(		"BLI_strcasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strncasecmp = _rpythonic_function_(		"BLI_strncasecmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_uint),] )

BLI_natstrcmp = _rpythonic_function_(		"BLI_natstrcmp", ctypes.c_int, [
	("s1",		ctypes.POINTER(ctypes.c_char)),
	("s2",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strnlen = _rpythonic_function_(		"BLI_strnlen", ctypes.c_uint, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),] )

BLI_timestr = _rpythonic_function_(		"BLI_timestr", ctypes.c_void_p, [
	("_time",		ctypes.c_double),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLI_ascii_strtolower = _rpythonic_function_(		"BLI_ascii_strtolower", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

BLI_ascii_strtoupper = _rpythonic_function_(		"BLI_ascii_strtoupper", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

BLI_strncpy_utf8 = _rpythonic_function_(		"BLI_strncpy_utf8", ctypes.POINTER(ctypes.c_char), [
	("dst",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("maxncpy",		ctypes.c_uint),] )

BLI_strncat_utf8 = _rpythonic_function_(		"BLI_strncat_utf8", ctypes.POINTER(ctypes.c_char), [
	("dst",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("maxncpy",		ctypes.c_uint),] )

BLI_utf8_invalid_byte = _rpythonic_function_(		"BLI_utf8_invalid_byte", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

BLI_utf8_invalid_strip = _rpythonic_function_(		"BLI_utf8_invalid_strip", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("length",		ctypes.c_int),] )

BLI_str_utf8_size = _rpythonic_function_(		"BLI_str_utf8_size", ctypes.c_int, [
	("p",		ctypes.POINTER(ctypes.c_char)),] )

BLI_str_utf8_as_unicode = _rpythonic_function_(		"BLI_str_utf8_as_unicode", ctypes.c_uint, [
	("p",		ctypes.POINTER(ctypes.c_char)),] )

BLI_str_utf8_as_unicode_and_size = _rpythonic_function_(		"BLI_str_utf8_as_unicode_and_size", ctypes.c_uint, [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.POINTER(ctypes.c_uint)),] )

BLI_str_utf8_as_unicode_step = _rpythonic_function_(		"BLI_str_utf8_as_unicode_step", ctypes.c_uint, [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.POINTER(ctypes.c_uint)),] )

BLI_str_utf8_from_unicode = _rpythonic_function_(		"BLI_str_utf8_from_unicode", ctypes.c_uint, [
	("c",		ctypes.c_uint),
	("outbuf",		ctypes.POINTER(ctypes.c_char)),] )

BLI_str_find_prev_char_utf8 = _rpythonic_function_(		"BLI_str_find_prev_char_utf8", ctypes.POINTER(ctypes.c_char), [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("p",		ctypes.POINTER(ctypes.c_char)),] )

BLI_str_find_next_char_utf8 = _rpythonic_function_(		"BLI_str_find_next_char_utf8", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),
	("end",		ctypes.POINTER(ctypes.c_char)),] )

BLI_str_prev_char_utf8 = _rpythonic_function_(		"BLI_str_prev_char_utf8", ctypes.POINTER(ctypes.c_char), [
	("p",		ctypes.POINTER(ctypes.c_char)),] )

BLI_wstrlen_utf8 = _rpythonic_function_(		"BLI_wstrlen_utf8", ctypes.c_uint, [
	("src",		ctypes.POINTER(ctypes.c_int)),] )

BLI_strlen_utf8 = _rpythonic_function_(		"BLI_strlen_utf8", ctypes.c_uint, [
	("strc",		ctypes.POINTER(ctypes.c_char)),] )

BLI_strncpy_wchar_as_utf8 = _rpythonic_function_(		"BLI_strncpy_wchar_as_utf8", ctypes.c_uint, [
	("dst",		ctypes.POINTER(ctypes.c_char)),
	("src",		ctypes.POINTER(ctypes.c_int)),
	("maxcpy",		ctypes.c_uint),] )

BLI_strncpy_wchar_from_utf8 = _rpythonic_function_(		"BLI_strncpy_wchar_from_utf8", ctypes.c_uint, [
	("dst",		ctypes.POINTER(ctypes.c_int)),
	("src",		ctypes.POINTER(ctypes.c_char)),
	("maxcpy",		ctypes.c_uint),] )

BLI_getDefaultDocumentFolder = _rpythonic_function_(		"BLI_getDefaultDocumentFolder", ctypes.POINTER(ctypes.c_char), [] )

BLI_get_folder = _rpythonic_function_(		"BLI_get_folder", ctypes.POINTER(ctypes.c_char), [
	("folder_id",		ctypes.c_int),
	("subfolder",		ctypes.POINTER(ctypes.c_char)),] )

BLI_get_folder_create = _rpythonic_function_(		"BLI_get_folder_create", ctypes.POINTER(ctypes.c_char), [
	("folder_id",		ctypes.c_int),
	("subfolder",		ctypes.POINTER(ctypes.c_char)),] )

BLI_get_user_folder_notest = _rpythonic_function_(		"BLI_get_user_folder_notest", ctypes.POINTER(ctypes.c_char), [
	("folder_id",		ctypes.c_int),
	("subfolder",		ctypes.POINTER(ctypes.c_char)),] )

BLI_get_folder_version = _rpythonic_function_(		"BLI_get_folder_version", ctypes.POINTER(ctypes.c_char), [
	("C_id",		ctypes.c_int),
	("ver",		ctypes.c_int),
	("do_check",		ctypes.c_int),] )

BLI_setenv = _rpythonic_function_(		"BLI_setenv", ctypes.c_void_p, [
	("env",		ctypes.POINTER(ctypes.c_char)),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

BLI_setenv_if_new = _rpythonic_function_(		"BLI_setenv_if_new", ctypes.c_void_p, [
	("env",		ctypes.POINTER(ctypes.c_char)),
	("val",		ctypes.POINTER(ctypes.c_char)),] )

BLI_make_file_string = _rpythonic_function_(		"BLI_make_file_string", ctypes.c_void_p, [
	("relabase",		ctypes.POINTER(ctypes.c_char)),
	("string",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_make_exist = _rpythonic_function_(		"BLI_make_exist", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_make_existing_file = _rpythonic_function_(		"BLI_make_existing_file", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BLI_split_dirfile = _rpythonic_function_(		"BLI_split_dirfile", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("dirlen",		ctypes.c_uint),
	("filelen",		ctypes.c_uint),] )

BLI_split_dir_part = _rpythonic_function_(		"BLI_split_dir_part", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("dirlen",		ctypes.c_uint),] )

BLI_split_file_part = _rpythonic_function_(		"BLI_split_file_part", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("filelen",		ctypes.c_uint),] )

BLI_join_dirfile = _rpythonic_function_(		"BLI_join_dirfile", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_path_basename = _rpythonic_function_(		"BLI_path_basename", ctypes.POINTER(ctypes.c_char), [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BKE_rebase_path = _rpythonic_function_(		"BKE_rebase_path", ctypes.c_int, [
	("abs",		ctypes.POINTER(ctypes.c_char)),
	("abs_len",		ctypes.c_uint),
	("rel",		ctypes.POINTER(ctypes.c_char)),
	("rel_len",		ctypes.c_uint),
	("base_dir",		ctypes.POINTER(ctypes.c_char)),
	("src_dir",		ctypes.POINTER(ctypes.c_char)),
	("dest_dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_last_slash = _rpythonic_function_(		"BLI_last_slash", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

BLI_add_slash = _rpythonic_function_(		"BLI_add_slash", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

BLI_del_slash = _rpythonic_function_(		"BLI_del_slash", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

BLI_first_slash = _rpythonic_function_(		"BLI_first_slash", ctypes.POINTER(ctypes.c_char), [
	("string",		ctypes.POINTER(ctypes.c_char)),] )

BLI_getlastdir = _rpythonic_function_(		"BLI_getlastdir", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("last",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),] )

BLI_testextensie = _rpythonic_function_(		"BLI_testextensie", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("ext",		ctypes.POINTER(ctypes.c_char)),] )

BLI_testextensie_array = _rpythonic_function_(		"BLI_testextensie_array", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("ext_array",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

BLI_testextensie_glob = _rpythonic_function_(		"BLI_testextensie_glob", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("ext_fnmatch",		ctypes.POINTER(ctypes.c_char)),] )

BLI_replace_extension = _rpythonic_function_(		"BLI_replace_extension", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),
	("ext",		ctypes.POINTER(ctypes.c_char)),] )

BLI_ensure_extension = _rpythonic_function_(		"BLI_ensure_extension", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),
	("ext",		ctypes.POINTER(ctypes.c_char)),] )

BLI_uniquename = _rpythonic_function_(		"BLI_uniquename", ctypes.c_void_p, [
	("C_list",		ctypes.POINTER(ListBase)),
	("vlink",		ctypes.POINTER(ctypes.c_void_p)),
	("defname",		ctypes.c_char),
	("delim",		ctypes.c_char),
	("name_offs",		ctypes.c_short),
	("C_len",		ctypes.c_short),] )

BLI_uniquename_cb = _rpythonic_function_(		"BLI_uniquename_cb", ctypes.c_int, [
	("unique_check",		ctypes.c_void_p),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("defname",		ctypes.c_char),
	("delim",		ctypes.c_char),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("name_len",		ctypes.c_short),] )

unique_check = _rpythonic_function_(		"unique_check", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_char)),] )

BLI_newname = _rpythonic_function_(		"BLI_newname", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("add",		ctypes.c_int),] )

BLI_stringdec = _rpythonic_function_(		"BLI_stringdec", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("head",		ctypes.POINTER(ctypes.c_char)),
	("start",		ctypes.POINTER(ctypes.c_char)),
	("numlen",		ctypes.POINTER(ctypes.c_ushort)),] )

BLI_stringenc = _rpythonic_function_(		"BLI_stringenc", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("head",		ctypes.POINTER(ctypes.c_char)),
	("tail",		ctypes.POINTER(ctypes.c_char)),
	("numlen",		ctypes.c_ushort),
	("pic",		ctypes.c_int),] )

BLI_split_name_num = _rpythonic_function_(		"BLI_split_name_num", ctypes.c_int, [
	("left",		ctypes.POINTER(ctypes.c_char)),
	("nr",		ctypes.POINTER(ctypes.c_int)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("delim",		ctypes.c_char),] )

BLI_splitdirstring = _rpythonic_function_(		"BLI_splitdirstring", ctypes.c_void_p, [
	("di",		ctypes.POINTER(ctypes.c_char)),
	("fi",		ctypes.POINTER(ctypes.c_char)),] )

BLI_clean = _rpythonic_function_(		"BLI_clean", ctypes.c_void_p, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_cleanup_file = _rpythonic_function_(		"BLI_cleanup_file", ctypes.c_void_p, [
	("relabase",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_cleanup_dir = _rpythonic_function_(		"BLI_cleanup_dir", ctypes.c_void_p, [
	("relabase",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_cleanup_path = _rpythonic_function_(		"BLI_cleanup_path", ctypes.c_void_p, [
	("relabase",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_parent_dir = _rpythonic_function_(		"BLI_parent_dir", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_has_parent = _rpythonic_function_(		"BLI_has_parent", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_path_abs = _rpythonic_function_(		"BLI_path_abs", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("basepath",		ctypes.POINTER(ctypes.c_char)),] )

BLI_path_frame = _rpythonic_function_(		"BLI_path_frame", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("frame",		ctypes.c_int),
	("digits",		ctypes.c_int),] )

BLI_path_frame_range = _rpythonic_function_(		"BLI_path_frame_range", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("sta",		ctypes.c_int),
	("end",		ctypes.c_int),
	("digits",		ctypes.c_int),] )

BLI_path_cwd = _rpythonic_function_(		"BLI_path_cwd", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_path_rel = _rpythonic_function_(		"BLI_path_rel", ctypes.c_void_p, [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("relfile",		ctypes.POINTER(ctypes.c_char)),] )

BLI_char_switch = _rpythonic_function_(		"BLI_char_switch", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("from",		ctypes.c_char),
	("to",		ctypes.c_char),] )

BLI_init_program_path = _rpythonic_function_(		"BLI_init_program_path", ctypes.c_void_p, [
	("argv0",		ctypes.POINTER(ctypes.c_char)),] )

BLI_init_temporary_dir = _rpythonic_function_(		"BLI_init_temporary_dir", ctypes.c_void_p, [
	("userdir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_program_path = _rpythonic_function_(		"BLI_program_path", ctypes.POINTER(ctypes.c_char), [] )

BLI_program_dir = _rpythonic_function_(		"BLI_program_dir", ctypes.POINTER(ctypes.c_char), [] )

BLI_temporary_dir = _rpythonic_function_(		"BLI_temporary_dir", ctypes.POINTER(ctypes.c_char), [] )

BLI_system_temporary_dir = _rpythonic_function_(		"BLI_system_temporary_dir", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

fstat = _rpythonic_function_(		"fstat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(stat)),] )

fstat64 = _rpythonic_function_(		"fstat64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__buf",		ctypes.POINTER(stat64)),] )

fstatat = _rpythonic_function_(		"fstatat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(stat)),
	("__flag",		ctypes.c_int),] )

fstatat64 = _rpythonic_function_(		"fstatat64", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(stat64)),
	("__flag",		ctypes.c_int),] )

lstat = _rpythonic_function_(		"lstat", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(stat)),] )

lstat64 = _rpythonic_function_(		"lstat64", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__buf",		ctypes.POINTER(stat64)),] )

chmod = _rpythonic_function_(		"chmod", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

lchmod = _rpythonic_function_(		"lchmod", ctypes.c_int, [
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

fchmod = _rpythonic_function_(		"fchmod", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__mode",		ctypes.c_uint),] )

fchmodat = _rpythonic_function_(		"fchmodat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__file",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),
	("__flag",		ctypes.c_int),] )

umask = _rpythonic_function_(		"umask", ctypes.c_uint, [
	("__mask",		ctypes.c_uint),] )

getumask = _rpythonic_function_(		"getumask", ctypes.c_uint, [] )

mkdir = _rpythonic_function_(		"mkdir", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

mkdirat = _rpythonic_function_(		"mkdirat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

mknod = _rpythonic_function_(		"mknod", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),
	("__dev",		ctypes.c_ulonglong),] )

mknodat = _rpythonic_function_(		"mknodat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),
	("__dev",		ctypes.c_ulonglong),] )

mkfifo = _rpythonic_function_(		"mkfifo", ctypes.c_int, [
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

mkfifoat = _rpythonic_function_(		"mkfifoat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__mode",		ctypes.c_uint),] )

utimensat = _rpythonic_function_(		"utimensat", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__path",		ctypes.POINTER(ctypes.c_char)),
	("__times",		( timespec * 2 )),
	("__flags",		ctypes.c_int),] )

futimens = _rpythonic_function_(		"futimens", ctypes.c_int, [
	("__fd",		ctypes.c_int),
	("__times",		( timespec * 2 )),] )

BLI_exists = _rpythonic_function_(		"BLI_exists", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_copy = _rpythonic_function_(		"BLI_copy", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("to",		ctypes.POINTER(ctypes.c_char)),] )

BLI_rename = _rpythonic_function_(		"BLI_rename", ctypes.c_int, [
	("from",		ctypes.POINTER(ctypes.c_char)),
	("to",		ctypes.POINTER(ctypes.c_char)),] )

BLI_delete = _rpythonic_function_(		"BLI_delete", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.c_int),
	("recursive",		ctypes.c_int),] )

BLI_move = _rpythonic_function_(		"BLI_move", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("to",		ctypes.POINTER(ctypes.c_char)),] )

BLI_create_symlink = _rpythonic_function_(		"BLI_create_symlink", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("to",		ctypes.POINTER(ctypes.c_char)),] )

BLI_is_dir = _rpythonic_function_(		"BLI_is_dir", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_is_file = _rpythonic_function_(		"BLI_is_file", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),] )

BLI_dir_create_recursive = _rpythonic_function_(		"BLI_dir_create_recursive", ctypes.c_void_p, [
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_dir_free_space = _rpythonic_function_(		"BLI_dir_free_space", ctypes.c_double, [
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

BLI_current_working_dir = _rpythonic_function_(		"BLI_current_working_dir", ctypes.POINTER(ctypes.c_char), [
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),] )

BLI_dir_contents = _rpythonic_function_(		"BLI_dir_contents", ctypes.c_uint, [
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("filelist",		ctypes.POINTER(ctypes.POINTER(direntry))),] )

BLI_file_is_writable = _rpythonic_function_(		"BLI_file_is_writable", ctypes.c_int, [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_file_touch = _rpythonic_function_(		"BLI_file_touch", ctypes.c_int, [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_file_gzip = _rpythonic_function_(		"BLI_file_gzip", ctypes.c_int, [
	("from",		ctypes.POINTER(ctypes.c_char)),
	("to",		ctypes.POINTER(ctypes.c_char)),] )

BLI_file_ungzip_to_mem = _rpythonic_function_(		"BLI_file_ungzip_to_mem", ctypes.POINTER(ctypes.c_char), [
	("from_file",		ctypes.POINTER(ctypes.c_char)),
	("size_r",		ctypes.POINTER(ctypes.c_int)),] )

BLI_file_descriptor_size = _rpythonic_function_(		"BLI_file_descriptor_size", ctypes.c_uint, [
	("file",		ctypes.c_int),] )

BLI_file_size = _rpythonic_function_(		"BLI_file_size", ctypes.c_uint, [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_file_older = _rpythonic_function_(		"BLI_file_older", ctypes.c_int, [
	("file1",		ctypes.POINTER(ctypes.c_char)),
	("file2",		ctypes.POINTER(ctypes.c_char)),] )

BLI_file_read_as_lines = _rpythonic_function_(		"BLI_file_read_as_lines", ctypes.POINTER(LinkNode), [
	("file",		ctypes.POINTER(ctypes.c_char)),] )

BLI_file_free_lines = _rpythonic_function_(		"BLI_file_free_lines", ctypes.c_void_p, [
	("lines",		ctypes.POINTER(LinkNode)),] )

BLI_rcti_is_empty = _rpythonic_function_(		"BLI_rcti_is_empty", ctypes.c_int, [
	("rect",		ctypes.POINTER(rcti)),] )

BLI_rctf_is_empty = _rpythonic_function_(		"BLI_rctf_is_empty", ctypes.c_int, [
	("rect",		ctypes.POINTER(rctf)),] )

BLI_init_rctf = _rpythonic_function_(		"BLI_init_rctf", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rctf)),
	("xmin",		ctypes.c_float),
	("xmax",		ctypes.c_float),
	("ymin",		ctypes.c_float),
	("ymax",		ctypes.c_float),] )

BLI_init_rcti = _rpythonic_function_(		"BLI_init_rcti", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rcti)),
	("xmin",		ctypes.c_int),
	("xmax",		ctypes.c_int),
	("ymin",		ctypes.c_int),
	("ymax",		ctypes.c_int),] )

BLI_translate_rctf = _rpythonic_function_(		"BLI_translate_rctf", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rctf)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

BLI_translate_rcti = _rpythonic_function_(		"BLI_translate_rcti", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rcti)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

BLI_resize_rcti = _rpythonic_function_(		"BLI_resize_rcti", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rcti)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

BLI_resize_rctf = _rpythonic_function_(		"BLI_resize_rctf", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(rctf)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

BLI_in_rcti = _rpythonic_function_(		"BLI_in_rcti", ctypes.c_int, [
	("rect",		ctypes.POINTER(rcti)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

BLI_in_rctf = _rpythonic_function_(		"BLI_in_rctf", ctypes.c_int, [
	("rect",		ctypes.POINTER(rctf)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

BLI_isect_rctf = _rpythonic_function_(		"BLI_isect_rctf", ctypes.c_int, [
	("src1",		ctypes.POINTER(rctf)),
	("src2",		ctypes.POINTER(rctf)),
	("dest",		ctypes.POINTER(rctf)),] )

BLI_isect_rcti = _rpythonic_function_(		"BLI_isect_rcti", ctypes.c_int, [
	("src1",		ctypes.POINTER(rcti)),
	("src2",		ctypes.POINTER(rcti)),
	("dest",		ctypes.POINTER(rcti)),] )

BLI_union_rctf = _rpythonic_function_(		"BLI_union_rctf", ctypes.c_void_p, [
	("rcta",		ctypes.POINTER(rctf)),
	("rctb",		ctypes.POINTER(rctf)),] )

BLI_union_rcti = _rpythonic_function_(		"BLI_union_rcti", ctypes.c_void_p, [
	("rcti1",		ctypes.POINTER(rcti)),
	("rcti2",		ctypes.POINTER(rcti)),] )

BLI_copy_rcti_rctf = _rpythonic_function_(		"BLI_copy_rcti_rctf", ctypes.c_void_p, [
	("tar",		ctypes.POINTER(rcti)),
	("src",		ctypes.POINTER(rctf)),] )

print_rctf = _rpythonic_function_(		"print_rctf", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("rect",		ctypes.POINTER(rctf)),] )

print_rcti = _rpythonic_function_(		"print_rcti", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("rect",		ctypes.POINTER(rcti)),] )

BLI_hnoise = _rpythonic_function_(		"BLI_hnoise", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

BLI_hnoisep = _rpythonic_function_(		"BLI_hnoisep", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

BLI_turbulence = _rpythonic_function_(		"BLI_turbulence", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("nr",		ctypes.c_int),] )

BLI_turbulence1 = _rpythonic_function_(		"BLI_turbulence1", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("nr",		ctypes.c_int),] )

BLI_gNoise = _rpythonic_function_(		"BLI_gNoise", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("hard",		ctypes.c_int),
	("noisebasis",		ctypes.c_int),] )

BLI_gTurbulence = _rpythonic_function_(		"BLI_gTurbulence", ctypes.c_float, [
	("noisesize",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("oct",		ctypes.c_int),
	("hard",		ctypes.c_int),
	("noisebasis",		ctypes.c_int),] )

mg_fBm = _rpythonic_function_(		"mg_fBm", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("H",		ctypes.c_float),
	("lacunarity",		ctypes.c_float),
	("octaves",		ctypes.c_float),
	("noisebasis",		ctypes.c_int),] )

mg_MultiFractal = _rpythonic_function_(		"mg_MultiFractal", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("H",		ctypes.c_float),
	("lacunarity",		ctypes.c_float),
	("octaves",		ctypes.c_float),
	("noisebasis",		ctypes.c_int),] )

mg_VLNoise = _rpythonic_function_(		"mg_VLNoise", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("distortion",		ctypes.c_float),
	("nbas1",		ctypes.c_int),
	("nbas2",		ctypes.c_int),] )

mg_HeteroTerrain = _rpythonic_function_(		"mg_HeteroTerrain", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("H",		ctypes.c_float),
	("lacunarity",		ctypes.c_float),
	("octaves",		ctypes.c_float),
	("offset",		ctypes.c_float),
	("noisebasis",		ctypes.c_int),] )

mg_HybridMultiFractal = _rpythonic_function_(		"mg_HybridMultiFractal", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("H",		ctypes.c_float),
	("lacunarity",		ctypes.c_float),
	("octaves",		ctypes.c_float),
	("offset",		ctypes.c_float),
	("gain",		ctypes.c_float),
	("noisebasis",		ctypes.c_int),] )

mg_RidgedMultiFractal = _rpythonic_function_(		"mg_RidgedMultiFractal", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("H",		ctypes.c_float),
	("lacunarity",		ctypes.c_float),
	("octaves",		ctypes.c_float),
	("offset",		ctypes.c_float),
	("gain",		ctypes.c_float),
	("noisebasis",		ctypes.c_int),] )

voronoi = _rpythonic_function_(		"voronoi", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("da",		ctypes.POINTER(ctypes.c_float)),
	("pa",		ctypes.POINTER(ctypes.c_float)),
	("me",		ctypes.c_float),
	("dtype",		ctypes.c_int),] )

cellNoise = _rpythonic_function_(		"cellNoise", ctypes.c_float, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

cellNoiseV = _rpythonic_function_(		"cellNoiseV", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("ca",		ctypes.POINTER(ctypes.c_float)),] )

GHashHashFP = _rpythonic_function_(		"GHashHashFP", ctypes.c_uint, [("key",		ctypes.c_void_p)] )

GHashCmpFP = _rpythonic_function_(		"GHashCmpFP", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

GHashKeyFreeFP = _rpythonic_function_(		"GHashKeyFreeFP", ctypes.c_void_p, [("key",		ctypes.c_void_p)] )

GHashValFreeFP = _rpythonic_function_(		"GHashValFreeFP", ctypes.c_void_p, [("val",		ctypes.c_void_p)] )

BLI_ghash_new = _rpythonic_function_(		"BLI_ghash_new", ctypes.POINTER(GHash), [
	("hashfp",		ctypes.CFUNCTYPE(ctypes.c_uint, )),
	("cmpfp",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("info",		ctypes.POINTER(ctypes.c_char)),] )

BLI_ghash_free = _rpythonic_function_(		"BLI_ghash_free", ctypes.c_void_p, [
	("gh",		ctypes.POINTER(GHash)),
	("keyfreefp",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("valfreefp",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

BLI_ghash_insert = _rpythonic_function_(		"BLI_ghash_insert", ctypes.c_void_p, [
	("gh",		ctypes.POINTER(GHash)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("val",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghash_lookup = _rpythonic_function_(		"BLI_ghash_lookup", ctypes.POINTER(ctypes.c_void_p), [
	("gh",		ctypes.POINTER(GHash)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghash_remove = _rpythonic_function_(		"BLI_ghash_remove", ctypes.c_int, [
	("gh",		ctypes.POINTER(GHash)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),
	("keyfreefp",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("valfreefp",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

BLI_ghash_haskey = _rpythonic_function_(		"BLI_ghash_haskey", ctypes.c_int, [
	("gh",		ctypes.POINTER(GHash)),
	("key",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghash_size = _rpythonic_function_(		"BLI_ghash_size", ctypes.c_int, [
	("gh",		ctypes.POINTER(GHash)),] )

BLI_ghashIterator_new = _rpythonic_function_(		"BLI_ghashIterator_new", ctypes.POINTER(GHashIterator), [
	("gh",		ctypes.POINTER(GHash)),] )

BLI_ghashIterator_init = _rpythonic_function_(		"BLI_ghashIterator_init", ctypes.c_void_p, [
	("ghi",		ctypes.POINTER(GHashIterator)),
	("gh",		ctypes.POINTER(GHash)),] )

BLI_ghashIterator_free = _rpythonic_function_(		"BLI_ghashIterator_free", ctypes.c_void_p, [
	("ghi",		ctypes.POINTER(GHashIterator)),] )

BLI_ghashIterator_getKey = _rpythonic_function_(		"BLI_ghashIterator_getKey", ctypes.POINTER(ctypes.c_void_p), [
	("ghi",		ctypes.POINTER(GHashIterator)),] )

BLI_ghashIterator_getValue = _rpythonic_function_(		"BLI_ghashIterator_getValue", ctypes.POINTER(ctypes.c_void_p), [
	("ghi",		ctypes.POINTER(GHashIterator)),] )

BLI_ghashIterator_step = _rpythonic_function_(		"BLI_ghashIterator_step", ctypes.c_void_p, [
	("ghi",		ctypes.POINTER(GHashIterator)),] )

BLI_ghashIterator_isDone = _rpythonic_function_(		"BLI_ghashIterator_isDone", ctypes.c_int, [
	("ghi",		ctypes.POINTER(GHashIterator)),] )

BLI_ghashutil_ptrhash = _rpythonic_function_(		"BLI_ghashutil_ptrhash", ctypes.c_uint, [("key",		ctypes.c_void_p)] )

BLI_ghashutil_ptrcmp = _rpythonic_function_(		"BLI_ghashutil_ptrcmp", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghashutil_strhash = _rpythonic_function_(		"BLI_ghashutil_strhash", ctypes.c_uint, [("key",		ctypes.c_void_p)] )

BLI_ghashutil_strcmp = _rpythonic_function_(		"BLI_ghashutil_strcmp", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghashutil_inthash = _rpythonic_function_(		"BLI_ghashutil_inthash", ctypes.c_uint, [("ptr",		ctypes.c_void_p)] )

BLI_ghashutil_intcmp = _rpythonic_function_(		"BLI_ghashutil_intcmp", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghashutil_pairalloc = _rpythonic_function_(		"BLI_ghashutil_pairalloc", ctypes.POINTER(GHashPair), [
	("first",		ctypes.POINTER(ctypes.c_void_p)),
	("second",		ctypes.c_int),] )

BLI_ghashutil_pairhash = _rpythonic_function_(		"BLI_ghashutil_pairhash", ctypes.c_uint, [("ptr",		ctypes.c_void_p)] )

BLI_ghashutil_paircmp = _rpythonic_function_(		"BLI_ghashutil_paircmp", ctypes.c_int, [
	("a",		ctypes.POINTER(ctypes.c_void_p)),
	("b",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_ghashutil_pairfree = _rpythonic_function_(		"BLI_ghashutil_pairfree", ctypes.c_void_p, [("ptr",		ctypes.c_void_p)] )

acos = _rpythonic_function_(		"acos", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asin = _rpythonic_function_(		"asin", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan = _rpythonic_function_(		"atan", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan2 = _rpythonic_function_(		"atan2", ctypes.c_double, [
	("__y",		ctypes.c_double),
	("__x",		ctypes.c_double),] )

cos = _rpythonic_function_(		"cos", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sin = _rpythonic_function_(		"sin", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tan = _rpythonic_function_(		"tan", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

cosh = _rpythonic_function_(		"cosh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinh = _rpythonic_function_(		"sinh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanh = _rpythonic_function_(		"tanh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sincos = _rpythonic_function_(		"sincos", ctypes.c_void_p, [
	("__x",		ctypes.c_double),
	("__sinx",		ctypes.POINTER(ctypes.c_double)),
	("__cosx",		ctypes.POINTER(ctypes.c_double)),] )

acosh = _rpythonic_function_(		"acosh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinh = _rpythonic_function_(		"asinh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanh = _rpythonic_function_(		"atanh", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp = _rpythonic_function_(		"exp", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

frexp = _rpythonic_function_(		"frexp", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexp = _rpythonic_function_(		"ldexp", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.c_int),] )

log = _rpythonic_function_(		"log", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log10 = _rpythonic_function_(		"log10", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

modf = _rpythonic_function_(		"modf", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__iptr",		ctypes.POINTER(ctypes.c_double)),] )

exp10 = _rpythonic_function_(		"exp10", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

pow10 = _rpythonic_function_(		"pow10", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

expm1 = _rpythonic_function_(		"expm1", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log1p = _rpythonic_function_(		"log1p", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

logb = _rpythonic_function_(		"logb", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp2 = _rpythonic_function_(		"exp2", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log2 = _rpythonic_function_(		"log2", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

pow = _rpythonic_function_(		"pow", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

sqrt = _rpythonic_function_(		"sqrt", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

hypot = _rpythonic_function_(		"hypot", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

cbrt = _rpythonic_function_(		"cbrt", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

ceil = _rpythonic_function_(		"ceil", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fabs = _rpythonic_function_(		"fabs", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

floor = _rpythonic_function_(		"floor", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fmod = _rpythonic_function_(		"fmod", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

isinf = _rpythonic_function_(		"isinf", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

finite = _rpythonic_function_(		"finite", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

drem = _rpythonic_function_(		"drem", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

significand = _rpythonic_function_(		"significand", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

copysign = _rpythonic_function_(		"copysign", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nan = _rpythonic_function_(		"nan", ctypes.c_double, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnan = _rpythonic_function_(		"isnan", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

j0 = _rpythonic_function_(		"j0", ctypes.c_double, [
	("none",		ctypes.c_double),] )

j1 = _rpythonic_function_(		"j1", ctypes.c_double, [
	("none",		ctypes.c_double),] )

jn = _rpythonic_function_(		"jn", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

y0 = _rpythonic_function_(		"y0", ctypes.c_double, [
	("none",		ctypes.c_double),] )

y1 = _rpythonic_function_(		"y1", ctypes.c_double, [
	("none",		ctypes.c_double),] )

yn = _rpythonic_function_(		"yn", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

erf = _rpythonic_function_(		"erf", ctypes.c_double, [
	("none",		ctypes.c_double),] )

erfc = _rpythonic_function_(		"erfc", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgamma = _rpythonic_function_(		"lgamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

tgamma = _rpythonic_function_(		"tgamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

gamma = _rpythonic_function_(		"gamma", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgamma_r = _rpythonic_function_(		"lgamma_r", ctypes.c_double, [
	("none",		ctypes.c_double),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rint = _rpythonic_function_(		"rint", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

nextafter = _rpythonic_function_(		"nextafter", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nexttoward = _rpythonic_function_(		"nexttoward", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

remainder = _rpythonic_function_(		"remainder", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

scalbn = _rpythonic_function_(		"scalbn", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int),] )

ilogb = _rpythonic_function_(		"ilogb", ctypes.c_int, [
	("__x",		ctypes.c_double),] )

scalbln = _rpythonic_function_(		"scalbln", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int64),] )

nearbyint = _rpythonic_function_(		"nearbyint", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

round = _rpythonic_function_(		"round", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

trunc = _rpythonic_function_(		"trunc", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

remquo = _rpythonic_function_(		"remquo", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrint = _rpythonic_function_(		"lrint", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llrint = _rpythonic_function_(		"llrint", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

lround = _rpythonic_function_(		"lround", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llround = _rpythonic_function_(		"llround", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

fdim = _rpythonic_function_(		"fdim", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmax = _rpythonic_function_(		"fmax", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmin = _rpythonic_function_(		"fmin", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fma = _rpythonic_function_(		"fma", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__z",		ctypes.c_double),] )

scalb = _rpythonic_function_(		"scalb", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_double),] )

acosf = _rpythonic_function_(		"acosf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

asinf = _rpythonic_function_(		"asinf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atanf = _rpythonic_function_(		"atanf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atan2f = _rpythonic_function_(		"atan2f", ctypes.c_float, [
	("__y",		ctypes.c_float),
	("__x",		ctypes.c_float),] )

cosf = _rpythonic_function_(		"cosf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sinf = _rpythonic_function_(		"sinf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

tanf = _rpythonic_function_(		"tanf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

coshf = _rpythonic_function_(		"coshf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sinhf = _rpythonic_function_(		"sinhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

tanhf = _rpythonic_function_(		"tanhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

sincosf = _rpythonic_function_(		"sincosf", ctypes.c_void_p, [
	("__x",		ctypes.c_float),
	("__sinx",		ctypes.POINTER(ctypes.c_float)),
	("__cosx",		ctypes.POINTER(ctypes.c_float)),] )

acoshf = _rpythonic_function_(		"acoshf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

asinhf = _rpythonic_function_(		"asinhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

atanhf = _rpythonic_function_(		"atanhf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

expf = _rpythonic_function_(		"expf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

frexpf = _rpythonic_function_(		"frexpf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexpf = _rpythonic_function_(		"ldexpf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__exponent",		ctypes.c_int),] )

logf = _rpythonic_function_(		"logf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log10f = _rpythonic_function_(		"log10f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

modff = _rpythonic_function_(		"modff", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__iptr",		ctypes.POINTER(ctypes.c_float)),] )

exp10f = _rpythonic_function_(		"exp10f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

pow10f = _rpythonic_function_(		"pow10f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

expm1f = _rpythonic_function_(		"expm1f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log1pf = _rpythonic_function_(		"log1pf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

logbf = _rpythonic_function_(		"logbf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

exp2f = _rpythonic_function_(		"exp2f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

log2f = _rpythonic_function_(		"log2f", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

powf = _rpythonic_function_(		"powf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

sqrtf = _rpythonic_function_(		"sqrtf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

hypotf = _rpythonic_function_(		"hypotf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

cbrtf = _rpythonic_function_(		"cbrtf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

ceilf = _rpythonic_function_(		"ceilf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

fabsf = _rpythonic_function_(		"fabsf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

floorf = _rpythonic_function_(		"floorf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

fmodf = _rpythonic_function_(		"fmodf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

isinff = _rpythonic_function_(		"isinff", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

finitef = _rpythonic_function_(		"finitef", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

dremf = _rpythonic_function_(		"dremf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

significandf = _rpythonic_function_(		"significandf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

copysignf = _rpythonic_function_(		"copysignf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

nanf = _rpythonic_function_(		"nanf", ctypes.c_float, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnanf = _rpythonic_function_(		"isnanf", ctypes.c_int, [
	("__value",		ctypes.c_float),] )

j0f = _rpythonic_function_(		"j0f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

j1f = _rpythonic_function_(		"j1f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

jnf = _rpythonic_function_(		"jnf", ctypes.c_float, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_float),] )

y0f = _rpythonic_function_(		"y0f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

y1f = _rpythonic_function_(		"y1f", ctypes.c_float, [
	("none",		ctypes.c_float),] )

ynf = _rpythonic_function_(		"ynf", ctypes.c_float, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_float),] )

erff = _rpythonic_function_(		"erff", ctypes.c_float, [
	("none",		ctypes.c_float),] )

erfcf = _rpythonic_function_(		"erfcf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

lgammaf = _rpythonic_function_(		"lgammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

tgammaf = _rpythonic_function_(		"tgammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

gammaf = _rpythonic_function_(		"gammaf", ctypes.c_float, [
	("none",		ctypes.c_float),] )

lgammaf_r = _rpythonic_function_(		"lgammaf_r", ctypes.c_float, [
	("none",		ctypes.c_float),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rintf = _rpythonic_function_(		"rintf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

nextafterf = _rpythonic_function_(		"nextafterf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

nexttowardf = _rpythonic_function_(		"nexttowardf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_double),] )

remainderf = _rpythonic_function_(		"remainderf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

scalbnf = _rpythonic_function_(		"scalbnf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_int),] )

ilogbf = _rpythonic_function_(		"ilogbf", ctypes.c_int, [
	("__x",		ctypes.c_float),] )

scalblnf = _rpythonic_function_(		"scalblnf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_int64),] )

nearbyintf = _rpythonic_function_(		"nearbyintf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

roundf = _rpythonic_function_(		"roundf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

truncf = _rpythonic_function_(		"truncf", ctypes.c_float, [
	("__x",		ctypes.c_float),] )

remquof = _rpythonic_function_(		"remquof", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrintf = _rpythonic_function_(		"lrintf", ctypes.c_int64, [
	("__x",		ctypes.c_float),] )

llrintf = _rpythonic_function_(		"llrintf", ctypes.c_longlong, [
	("__x",		ctypes.c_float),] )

lroundf = _rpythonic_function_(		"lroundf", ctypes.c_int64, [
	("__x",		ctypes.c_float),] )

llroundf = _rpythonic_function_(		"llroundf", ctypes.c_longlong, [
	("__x",		ctypes.c_float),] )

fdimf = _rpythonic_function_(		"fdimf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fmaxf = _rpythonic_function_(		"fmaxf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fminf = _rpythonic_function_(		"fminf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),] )

fmaf = _rpythonic_function_(		"fmaf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__y",		ctypes.c_float),
	("__z",		ctypes.c_float),] )

scalbf = _rpythonic_function_(		"scalbf", ctypes.c_float, [
	("__x",		ctypes.c_float),
	("__n",		ctypes.c_float),] )

acosl = _rpythonic_function_(		"acosl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinl = _rpythonic_function_(		"asinl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanl = _rpythonic_function_(		"atanl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atan2l = _rpythonic_function_(		"atan2l", ctypes.c_double, [
	("__y",		ctypes.c_double),
	("__x",		ctypes.c_double),] )

cosl = _rpythonic_function_(		"cosl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinl = _rpythonic_function_(		"sinl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanl = _rpythonic_function_(		"tanl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

coshl = _rpythonic_function_(		"coshl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sinhl = _rpythonic_function_(		"sinhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

tanhl = _rpythonic_function_(		"tanhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

sincosl = _rpythonic_function_(		"sincosl", ctypes.c_void_p, [
	("__x",		ctypes.c_double),
	("__sinx",		ctypes.POINTER(ctypes.c_double)),
	("__cosx",		ctypes.POINTER(ctypes.c_double)),] )

acoshl = _rpythonic_function_(		"acoshl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

asinhl = _rpythonic_function_(		"asinhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

atanhl = _rpythonic_function_(		"atanhl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

expl = _rpythonic_function_(		"expl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

frexpl = _rpythonic_function_(		"frexpl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.POINTER(ctypes.c_int)),] )

ldexpl = _rpythonic_function_(		"ldexpl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__exponent",		ctypes.c_int),] )

logl = _rpythonic_function_(		"logl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log10l = _rpythonic_function_(		"log10l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

modfl = _rpythonic_function_(		"modfl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__iptr",		ctypes.POINTER(ctypes.c_double)),] )

exp10l = _rpythonic_function_(		"exp10l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

pow10l = _rpythonic_function_(		"pow10l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

expm1l = _rpythonic_function_(		"expm1l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log1pl = _rpythonic_function_(		"log1pl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

logbl = _rpythonic_function_(		"logbl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

exp2l = _rpythonic_function_(		"exp2l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

log2l = _rpythonic_function_(		"log2l", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

powl = _rpythonic_function_(		"powl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

sqrtl = _rpythonic_function_(		"sqrtl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

hypotl = _rpythonic_function_(		"hypotl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

cbrtl = _rpythonic_function_(		"cbrtl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

ceill = _rpythonic_function_(		"ceill", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fabsl = _rpythonic_function_(		"fabsl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

floorl = _rpythonic_function_(		"floorl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

fmodl = _rpythonic_function_(		"fmodl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

isinfl = _rpythonic_function_(		"isinfl", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

finitel = _rpythonic_function_(		"finitel", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

dreml = _rpythonic_function_(		"dreml", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

significandl = _rpythonic_function_(		"significandl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

copysignl = _rpythonic_function_(		"copysignl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nanl = _rpythonic_function_(		"nanl", ctypes.c_double, [
	("__tagb",		ctypes.POINTER(ctypes.c_char)),] )

isnanl = _rpythonic_function_(		"isnanl", ctypes.c_int, [
	("__value",		ctypes.c_double),] )

j0l = _rpythonic_function_(		"j0l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

j1l = _rpythonic_function_(		"j1l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

jnl = _rpythonic_function_(		"jnl", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

y0l = _rpythonic_function_(		"y0l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

y1l = _rpythonic_function_(		"y1l", ctypes.c_double, [
	("none",		ctypes.c_double),] )

ynl = _rpythonic_function_(		"ynl", ctypes.c_double, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_double),] )

erfl = _rpythonic_function_(		"erfl", ctypes.c_double, [
	("none",		ctypes.c_double),] )

erfcl = _rpythonic_function_(		"erfcl", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgammal = _rpythonic_function_(		"lgammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

tgammal = _rpythonic_function_(		"tgammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

gammal = _rpythonic_function_(		"gammal", ctypes.c_double, [
	("none",		ctypes.c_double),] )

lgammal_r = _rpythonic_function_(		"lgammal_r", ctypes.c_double, [
	("none",		ctypes.c_double),
	("__signgamp",		ctypes.POINTER(ctypes.c_int)),] )

rintl = _rpythonic_function_(		"rintl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

nextafterl = _rpythonic_function_(		"nextafterl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

nexttowardl = _rpythonic_function_(		"nexttowardl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

remainderl = _rpythonic_function_(		"remainderl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

scalbnl = _rpythonic_function_(		"scalbnl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int),] )

ilogbl = _rpythonic_function_(		"ilogbl", ctypes.c_int, [
	("__x",		ctypes.c_double),] )

scalblnl = _rpythonic_function_(		"scalblnl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_int64),] )

nearbyintl = _rpythonic_function_(		"nearbyintl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

roundl = _rpythonic_function_(		"roundl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

truncl = _rpythonic_function_(		"truncl", ctypes.c_double, [
	("__x",		ctypes.c_double),] )

remquol = _rpythonic_function_(		"remquol", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__quo",		ctypes.POINTER(ctypes.c_int)),] )

lrintl = _rpythonic_function_(		"lrintl", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llrintl = _rpythonic_function_(		"llrintl", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

lroundl = _rpythonic_function_(		"lroundl", ctypes.c_int64, [
	("__x",		ctypes.c_double),] )

llroundl = _rpythonic_function_(		"llroundl", ctypes.c_longlong, [
	("__x",		ctypes.c_double),] )

fdiml = _rpythonic_function_(		"fdiml", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmaxl = _rpythonic_function_(		"fmaxl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fminl = _rpythonic_function_(		"fminl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),] )

fmal = _rpythonic_function_(		"fmal", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__y",		ctypes.c_double),
	("__z",		ctypes.c_double),] )

scalbl = _rpythonic_function_(		"scalbl", ctypes.c_double, [
	("__x",		ctypes.c_double),
	("__n",		ctypes.c_double),] )

matherr = _rpythonic_function_(		"matherr", ctypes.c_int, [
	("__exc",		ctypes.POINTER(exception)),] )

double_round = _rpythonic_function_(		"double_round", ctypes.c_double, [
	("x",		ctypes.c_double),
	("ndigits",		ctypes.c_int),] )

hsv_to_rgb = _rpythonic_function_(		"hsv_to_rgb", ctypes.c_void_p, [
	("h",		ctypes.c_float),
	("s",		ctypes.c_float),
	("v",		ctypes.c_float),
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),] )

hex_to_rgb = _rpythonic_function_(		"hex_to_rgb", ctypes.c_void_p, [
	("hexcol",		ctypes.POINTER(ctypes.c_char)),
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),] )

yuv_to_rgb = _rpythonic_function_(		"yuv_to_rgb", ctypes.c_void_p, [
	("y",		ctypes.c_float),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),
	("lr",		ctypes.POINTER(ctypes.c_float)),
	("lg",		ctypes.POINTER(ctypes.c_float)),
	("lb",		ctypes.POINTER(ctypes.c_float)),] )

ycc_to_rgb = _rpythonic_function_(		"ycc_to_rgb", ctypes.c_void_p, [
	("y",		ctypes.c_float),
	("cb",		ctypes.c_float),
	("cr",		ctypes.c_float),
	("lr",		ctypes.POINTER(ctypes.c_float)),
	("lg",		ctypes.POINTER(ctypes.c_float)),
	("lb",		ctypes.POINTER(ctypes.c_float)),
	("colorspace",		ctypes.c_int),] )

xyz_to_rgb = _rpythonic_function_(		"xyz_to_rgb", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),
	("colorspace",		ctypes.c_int),] )

cpack_to_rgb = _rpythonic_function_(		"cpack_to_rgb", ctypes.c_void_p, [
	("col",		ctypes.c_uint),
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),] )

rgb_to_yuv = _rpythonic_function_(		"rgb_to_yuv", ctypes.c_void_p, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("ly",		ctypes.POINTER(ctypes.c_float)),
	("lu",		ctypes.POINTER(ctypes.c_float)),
	("lv",		ctypes.POINTER(ctypes.c_float)),] )

rgb_to_ycc = _rpythonic_function_(		"rgb_to_ycc", ctypes.c_void_p, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("ly",		ctypes.POINTER(ctypes.c_float)),
	("lcb",		ctypes.POINTER(ctypes.c_float)),
	("lcr",		ctypes.POINTER(ctypes.c_float)),
	("colorspace",		ctypes.c_int),] )

rgb_to_hsv = _rpythonic_function_(		"rgb_to_hsv", ctypes.c_void_p, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("lh",		ctypes.POINTER(ctypes.c_float)),
	("ls",		ctypes.POINTER(ctypes.c_float)),
	("lv",		ctypes.POINTER(ctypes.c_float)),] )

rgb_to_hsv_compat = _rpythonic_function_(		"rgb_to_hsv_compat", ctypes.c_void_p, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),
	("lh",		ctypes.POINTER(ctypes.c_float)),
	("ls",		ctypes.POINTER(ctypes.c_float)),
	("lv",		ctypes.POINTER(ctypes.c_float)),] )

rgb_to_cpack = _rpythonic_function_(		"rgb_to_cpack", ctypes.c_uint, [
	("r",		ctypes.c_float),
	("g",		ctypes.c_float),
	("b",		ctypes.c_float),] )

hsv_to_cpack = _rpythonic_function_(		"hsv_to_cpack", ctypes.c_uint, [
	("h",		ctypes.c_float),
	("s",		ctypes.c_float),
	("v",		ctypes.c_float),] )

rgb_to_grayscale = _rpythonic_function_(		"rgb_to_grayscale", ctypes.c_float, [
	("rgb",		( ctypes.c_float * 3 )),] )

rgb_to_grayscale_byte = _rpythonic_function_(		"rgb_to_grayscale_byte", ctypes.c_ubyte, [
	("rgb",		( ctypes.c_ubyte * 3 )),] )

gamma_correct = _rpythonic_function_(		"gamma_correct", ctypes.c_void_p, [
	("c",		ctypes.POINTER(ctypes.c_float)),
	("gamma",		ctypes.c_float),] )

rec709_to_linearrgb = _rpythonic_function_(		"rec709_to_linearrgb", ctypes.c_float, [
	("c",		ctypes.c_float),] )

linearrgb_to_rec709 = _rpythonic_function_(		"linearrgb_to_rec709", ctypes.c_float, [
	("c",		ctypes.c_float),] )

srgb_to_linearrgb = _rpythonic_function_(		"srgb_to_linearrgb", ctypes.c_float, [
	("c",		ctypes.c_float),] )

linearrgb_to_srgb = _rpythonic_function_(		"linearrgb_to_srgb", ctypes.c_float, [
	("c",		ctypes.c_float),] )

srgb_to_linearrgb_v3_v3 = _rpythonic_function_(		"srgb_to_linearrgb_v3_v3", ctypes.c_void_p, [
	("col_to",		ctypes.POINTER(ctypes.c_float)),
	("col_from",		ctypes.POINTER(ctypes.c_float)),] )

linearrgb_to_srgb_v3_v3 = _rpythonic_function_(		"linearrgb_to_srgb_v3_v3", ctypes.c_void_p, [
	("col_to",		ctypes.POINTER(ctypes.c_float)),
	("col_from",		ctypes.POINTER(ctypes.c_float)),] )

srgb_to_linearrgb_rgba_buf = _rpythonic_function_(		"srgb_to_linearrgb_rgba_buf", ctypes.c_void_p, [
	("col",		ctypes.POINTER(ctypes.c_float)),
	("tot",		ctypes.c_int),] )

linearrgb_to_srgb_rgba_buf = _rpythonic_function_(		"linearrgb_to_srgb_rgba_buf", ctypes.c_void_p, [
	("col",		ctypes.POINTER(ctypes.c_float)),
	("tot",		ctypes.c_int),] )

srgb_to_linearrgb_rgba_rgba_buf = _rpythonic_function_(		"srgb_to_linearrgb_rgba_rgba_buf", ctypes.c_void_p, [
	("col_to",		ctypes.POINTER(ctypes.c_float)),
	("col_from",		ctypes.POINTER(ctypes.c_float)),
	("tot",		ctypes.c_int),] )

linearrgb_to_srgb_rgba_rgba_buf = _rpythonic_function_(		"linearrgb_to_srgb_rgba_rgba_buf", ctypes.c_void_p, [
	("col_to",		ctypes.POINTER(ctypes.c_float)),
	("col_from",		ctypes.POINTER(ctypes.c_float)),
	("tot",		ctypes.c_int),] )

constrain_rgb = _rpythonic_function_(		"constrain_rgb", ctypes.c_int, [
	("r",		ctypes.POINTER(ctypes.c_float)),
	("g",		ctypes.POINTER(ctypes.c_float)),
	("b",		ctypes.POINTER(ctypes.c_float)),] )

minmax_rgb = _rpythonic_function_(		"minmax_rgb", ctypes.c_void_p, [
	("c",		( ctypes.c_short * 3 )),] )

rgb_float_set_hue_float_offset = _rpythonic_function_(		"rgb_float_set_hue_float_offset", ctypes.c_void_p, [
	("rgb",		ctypes.POINTER(ctypes.c_float)),
	("hue_offset",		ctypes.c_float),] )

rgb_byte_set_hue_float_offset = _rpythonic_function_(		"rgb_byte_set_hue_float_offset", ctypes.c_void_p, [
	("rgb",		ctypes.POINTER(ctypes.c_ubyte)),
	("hue_offset",		ctypes.c_float),] )

lift_gamma_gain_to_asc_cdl = _rpythonic_function_(		"lift_gamma_gain_to_asc_cdl", ctypes.c_void_p, [
	("lift",		ctypes.POINTER(ctypes.c_float)),
	("gamma",		ctypes.POINTER(ctypes.c_float)),
	("gain",		ctypes.POINTER(ctypes.c_float)),
	("offset",		ctypes.POINTER(ctypes.c_float)),
	("slope",		ctypes.POINTER(ctypes.c_float)),
	("power",		ctypes.POINTER(ctypes.c_float)),] )

rgb_byte_to_float = _rpythonic_function_(		"rgb_byte_to_float", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ctypes.c_ubyte)),
	("out",		ctypes.POINTER(ctypes.c_float)),] )

rgb_float_to_byte = _rpythonic_function_(		"rgb_float_to_byte", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ctypes.c_float)),
	("out",		ctypes.POINTER(ctypes.c_ubyte)),] )

zero_m3 = _rpythonic_function_(		"zero_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),] )

zero_m4 = _rpythonic_function_(		"zero_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),] )

unit_m3 = _rpythonic_function_(		"unit_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),] )

unit_m4 = _rpythonic_function_(		"unit_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),] )

copy_m3_m3 = _rpythonic_function_(		"copy_m3_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),] )

copy_m4_m4 = _rpythonic_function_(		"copy_m4_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),] )

copy_m3_m4 = _rpythonic_function_(		"copy_m3_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 4 )),] )

copy_m4_m3 = _rpythonic_function_(		"copy_m4_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 3 )),] )

swap_m3m3 = _rpythonic_function_(		"swap_m3m3", ctypes.c_void_p, [
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 3 )),] )

swap_m4m4 = _rpythonic_function_(		"swap_m4m4", ctypes.c_void_p, [
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 4 )),] )

add_m3_m3m3 = _rpythonic_function_(		"add_m3_m3m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 3 )),] )

add_m4_m4m4 = _rpythonic_function_(		"add_m4_m4m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 4 )),] )

sub_m3_m3m3 = _rpythonic_function_(		"sub_m3_m3m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 3 )),] )

sub_m4_m4m4 = _rpythonic_function_(		"sub_m4_m4m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 4 )),] )

mul_m3_m3m3 = _rpythonic_function_(		"mul_m3_m3m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 3 )),] )

mul_m4_m3m4 = _rpythonic_function_(		"mul_m4_m3m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 4 )),] )

mul_m4_m4m3 = _rpythonic_function_(		"mul_m4_m4m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 3 )),] )

mult_m4_m4m4 = _rpythonic_function_(		"mult_m4_m4m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 4 )),] )

mult_m3_m3m4 = _rpythonic_function_(		"mult_m3_m3m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 3 )),] )

mul_serie_m3 = _rpythonic_function_(		"mul_serie_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("M1",		( ctypes.c_float * 3 )),
	("M2",		( ctypes.c_float * 3 )),
	("M3",		( ctypes.c_float * 3 )),
	("M4",		( ctypes.c_float * 3 )),
	("M5",		( ctypes.c_float * 3 )),
	("M6",		( ctypes.c_float * 3 )),
	("M7",		( ctypes.c_float * 3 )),
	("M8",		( ctypes.c_float * 3 )),] )

mul_serie_m4 = _rpythonic_function_(		"mul_serie_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("M1",		( ctypes.c_float * 4 )),
	("M2",		( ctypes.c_float * 4 )),
	("M3",		( ctypes.c_float * 4 )),
	("M4",		( ctypes.c_float * 4 )),
	("M5",		( ctypes.c_float * 4 )),
	("M6",		( ctypes.c_float * 4 )),
	("M7",		( ctypes.c_float * 4 )),
	("M8",		( ctypes.c_float * 4 )),] )

mul_m4_v3 = _rpythonic_function_(		"mul_m4_v3", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 4 )),
	("r",		( ctypes.c_float * 3 )),] )

mul_v3_m4v3 = _rpythonic_function_(		"mul_v3_m4v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("M",		( ctypes.c_float * 4 )),
	("v",		( ctypes.c_float * 3 )),] )

mul_mat3_m4_v3 = _rpythonic_function_(		"mul_mat3_m4_v3", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 4 )),
	("r",		( ctypes.c_float * 3 )),] )

mul_m4_v4 = _rpythonic_function_(		"mul_m4_v4", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 4 )),
	("r",		( ctypes.c_float * 4 )),] )

mul_v4_m4v4 = _rpythonic_function_(		"mul_v4_m4v4", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 4 )),
	("M",		( ctypes.c_float * 4 )),
	("v",		( ctypes.c_float * 4 )),] )

mul_project_m4_v3 = _rpythonic_function_(		"mul_project_m4_v3", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 4 )),
	("vec",		( ctypes.c_float * 3 )),] )

mul_m3_v3 = _rpythonic_function_(		"mul_m3_v3", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 3 )),
	("r",		( ctypes.c_float * 3 )),] )

mul_v3_m3v3 = _rpythonic_function_(		"mul_v3_m3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("M",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),] )

mul_transposed_m3_v3 = _rpythonic_function_(		"mul_transposed_m3_v3", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 3 )),
	("r",		( ctypes.c_float * 3 )),] )

mul_m3_v3_double = _rpythonic_function_(		"mul_m3_v3_double", ctypes.c_void_p, [
	("M",		( ctypes.c_float * 3 )),
	("r",		( ctypes.c_double * 3 )),] )

mul_m3_fl = _rpythonic_function_(		"mul_m3_fl", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("f",		ctypes.c_float),] )

mul_m4_fl = _rpythonic_function_(		"mul_m4_fl", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("f",		ctypes.c_float),] )

mul_mat3_m4_fl = _rpythonic_function_(		"mul_mat3_m4_fl", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("f",		ctypes.c_float),] )

invert_m3 = _rpythonic_function_(		"invert_m3", ctypes.c_int, [
	("R",		( ctypes.c_float * 3 )),] )

invert_m3_m3 = _rpythonic_function_(		"invert_m3_m3", ctypes.c_int, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),] )

invert_m4 = _rpythonic_function_(		"invert_m4", ctypes.c_int, [
	("R",		( ctypes.c_float * 4 )),] )

invert_m4_m4 = _rpythonic_function_(		"invert_m4_m4", ctypes.c_int, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),] )

transpose_m3 = _rpythonic_function_(		"transpose_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),] )

transpose_m4 = _rpythonic_function_(		"transpose_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),] )

normalize_m3 = _rpythonic_function_(		"normalize_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),] )

normalize_m3_m3 = _rpythonic_function_(		"normalize_m3_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),] )

normalize_m4 = _rpythonic_function_(		"normalize_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),] )

normalize_m4_m4 = _rpythonic_function_(		"normalize_m4_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),] )

orthogonalize_m3 = _rpythonic_function_(		"orthogonalize_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("axis",		ctypes.c_int),] )

orthogonalize_m4 = _rpythonic_function_(		"orthogonalize_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("axis",		ctypes.c_int),] )

is_orthogonal_m3 = _rpythonic_function_(		"is_orthogonal_m3", ctypes.c_int, [
	("mat",		( ctypes.c_float * 3 )),] )

is_orthogonal_m4 = _rpythonic_function_(		"is_orthogonal_m4", ctypes.c_int, [
	("mat",		( ctypes.c_float * 4 )),] )

adjoint_m3_m3 = _rpythonic_function_(		"adjoint_m3_m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),] )

adjoint_m4_m4 = _rpythonic_function_(		"adjoint_m4_m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),] )

determinant_m2 = _rpythonic_function_(		"determinant_m2", ctypes.c_float, [
	("a",		ctypes.c_float),
	("b",		ctypes.c_float),
	("c",		ctypes.c_float),
	("d",		ctypes.c_float),] )

determinant_m3 = _rpythonic_function_(		"determinant_m3", ctypes.c_float, [
	("a",		ctypes.c_float),
	("b",		ctypes.c_float),
	("c",		ctypes.c_float),
	("d",		ctypes.c_float),
	("e",		ctypes.c_float),
	("f",		ctypes.c_float),
	("g",		ctypes.c_float),
	("h",		ctypes.c_float),
	("i",		ctypes.c_float),] )

determinant_m4 = _rpythonic_function_(		"determinant_m4", ctypes.c_float, [
	("A",		( ctypes.c_float * 4 )),] )

svd_m4 = _rpythonic_function_(		"svd_m4", ctypes.c_void_p, [
	("U",		( ctypes.c_float * 4 )),
	("s",		( ctypes.c_float * 4 )),
	("V",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),] )

pseudoinverse_m4_m4 = _rpythonic_function_(		"pseudoinverse_m4_m4", ctypes.c_void_p, [
	("Ainv",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("epsilon",		ctypes.c_float),] )

scale_m3_fl = _rpythonic_function_(		"scale_m3_fl", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("scale",		ctypes.c_float),] )

scale_m4_fl = _rpythonic_function_(		"scale_m4_fl", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("scale",		ctypes.c_float),] )

mat3_to_scale = _rpythonic_function_(		"mat3_to_scale", ctypes.c_float, [
	("M",		( ctypes.c_float * 3 )),] )

mat4_to_scale = _rpythonic_function_(		"mat4_to_scale", ctypes.c_float, [
	("M",		( ctypes.c_float * 4 )),] )

size_to_mat3 = _rpythonic_function_(		"size_to_mat3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("size",		( ctypes.c_float * 3 )),] )

size_to_mat4 = _rpythonic_function_(		"size_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("size",		( ctypes.c_float * 3 )),] )

mat3_to_size = _rpythonic_function_(		"mat3_to_size", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("M",		( ctypes.c_float * 3 )),] )

mat4_to_size = _rpythonic_function_(		"mat4_to_size", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("M",		( ctypes.c_float * 4 )),] )

translate_m4 = _rpythonic_function_(		"translate_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("tx",		ctypes.c_float),
	("ty",		ctypes.c_float),
	("tz",		ctypes.c_float),] )

rotate_m4 = _rpythonic_function_(		"rotate_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("axis",		ctypes.c_char),
	("angle",		ctypes.c_float),] )

mat3_to_rot_size = _rpythonic_function_(		"mat3_to_rot_size", ctypes.c_void_p, [
	("rot",		( ctypes.c_float * 3 )),
	("size",		( ctypes.c_float * 3 )),
	("mat3",		ctypes.c_float),] )

mat4_to_loc_rot_size = _rpythonic_function_(		"mat4_to_loc_rot_size", ctypes.c_void_p, [
	("loc",		( ctypes.c_float * 3 )),
	("rot",		( ctypes.c_float * 3 )),
	("size",		( ctypes.c_float * 3 )),
	("wmat",		ctypes.c_float),] )

loc_eul_size_to_mat4 = _rpythonic_function_(		"loc_eul_size_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("loc",		( ctypes.c_float * 3 )),
	("eul",		( ctypes.c_float * 3 )),
	("size",		( ctypes.c_float * 3 )),] )

loc_eulO_size_to_mat4 = _rpythonic_function_(		"loc_eulO_size_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("loc",		( ctypes.c_float * 3 )),
	("eul",		( ctypes.c_float * 3 )),
	("size",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

loc_quat_size_to_mat4 = _rpythonic_function_(		"loc_quat_size_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("loc",		( ctypes.c_float * 3 )),
	("quat",		( ctypes.c_float * 4 )),
	("size",		( ctypes.c_float * 3 )),] )

loc_axisangle_size_to_mat4 = _rpythonic_function_(		"loc_axisangle_size_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("loc",		( ctypes.c_float * 3 )),
	("axis",		( ctypes.c_float * 4 )),
	("angle",		ctypes.c_float),
	("size",		( ctypes.c_float * 3 )),] )

blend_m3_m3m3 = _rpythonic_function_(		"blend_m3_m3m3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("A",		( ctypes.c_float * 3 )),
	("B",		( ctypes.c_float * 3 )),
	("t",		ctypes.c_float),] )

blend_m4_m4m4 = _rpythonic_function_(		"blend_m4_m4m4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("A",		( ctypes.c_float * 4 )),
	("B",		( ctypes.c_float * 4 )),
	("t",		ctypes.c_float),] )

is_negative_m3 = _rpythonic_function_(		"is_negative_m3", ctypes.c_int, [
	("mat",		( ctypes.c_float * 3 )),] )

is_negative_m4 = _rpythonic_function_(		"is_negative_m4", ctypes.c_int, [
	("mat",		( ctypes.c_float * 4 )),] )

print_m3 = _rpythonic_function_(		"print_m3", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("M",		( ctypes.c_float * 3 )),] )

print_m4 = _rpythonic_function_(		"print_m4", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("M",		( ctypes.c_float * 3 )),] )

unit_axis_angle = _rpythonic_function_(		"unit_axis_angle", ctypes.c_void_p, [
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.POINTER(ctypes.c_float)),] )

unit_qt = _rpythonic_function_(		"unit_qt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),] )

copy_qt_qt = _rpythonic_function_(		"copy_qt_qt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),] )

mul_qt_qtqt = _rpythonic_function_(		"mul_qt_qtqt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),] )

mul_qt_v3 = _rpythonic_function_(		"mul_qt_v3", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("r",		( ctypes.c_float * 3 )),] )

mul_qt_fl = _rpythonic_function_(		"mul_qt_fl", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("f",		ctypes.c_float),] )

mul_fac_qt_fl = _rpythonic_function_(		"mul_fac_qt_fl", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("f",		ctypes.c_float),] )

sub_qt_qtqt = _rpythonic_function_(		"sub_qt_qtqt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),] )

invert_qt = _rpythonic_function_(		"invert_qt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),] )

invert_qt_qt = _rpythonic_function_(		"invert_qt_qt", ctypes.c_void_p, [
	("q1",		( ctypes.c_float * 4 )),
	("q2",		( ctypes.c_float * 4 )),] )

conjugate_qt = _rpythonic_function_(		"conjugate_qt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),] )

dot_qtqt = _rpythonic_function_(		"dot_qtqt", ctypes.c_float, [
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),] )

normalize_qt = _rpythonic_function_(		"normalize_qt", ctypes.c_float, [
	("q",		( ctypes.c_float * 4 )),] )

normalize_qt_qt = _rpythonic_function_(		"normalize_qt_qt", ctypes.c_float, [
	("q1",		( ctypes.c_float * 4 )),
	("q2",		( ctypes.c_float * 4 )),] )

is_zero_qt = _rpythonic_function_(		"is_zero_qt", ctypes.c_int, [
	("q",		( ctypes.c_float * 4 )),] )

interp_qt_qtqt = _rpythonic_function_(		"interp_qt_qtqt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),
	("t",		ctypes.c_float),] )

add_qt_qtqt = _rpythonic_function_(		"add_qt_qtqt", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),
	("t",		ctypes.c_float),] )

quat_to_mat3 = _rpythonic_function_(		"quat_to_mat3", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 3 )),
	("q",		( ctypes.c_float * 4 )),] )

quat_to_mat4 = _rpythonic_function_(		"quat_to_mat4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("q",		( ctypes.c_float * 4 )),] )

mat3_to_quat = _rpythonic_function_(		"mat3_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("mat",		( ctypes.c_float * 3 )),] )

mat4_to_quat = _rpythonic_function_(		"mat4_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("mat",		( ctypes.c_float * 4 )),] )

tri_to_quat = _rpythonic_function_(		"tri_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

vec_to_quat = _rpythonic_function_(		"vec_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("vec",		( ctypes.c_float * 3 )),
	("axis",		ctypes.c_short),
	("upflag",		ctypes.c_short),] )

rotation_between_vecs_to_quat = _rpythonic_function_(		"rotation_between_vecs_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),] )

rotation_between_quats_to_quat = _rpythonic_function_(		"rotation_between_quats_to_quat", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("q1",		( ctypes.c_float * 4 )),
	("q2",		( ctypes.c_float * 4 )),] )

mat3_to_quat_is_ok = _rpythonic_function_(		"mat3_to_quat_is_ok", ctypes.c_void_p, [
	("q",		( ctypes.c_float * 4 )),
	("mat",		( ctypes.c_float * 3 )),] )

print_qt = _rpythonic_function_(		"print_qt", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("q",		( ctypes.c_float * 4 )),] )

axis_angle_to_quat = _rpythonic_function_(		"axis_angle_to_quat", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 4 )),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

axis_angle_to_mat3 = _rpythonic_function_(		"axis_angle_to_mat3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

axis_angle_to_mat4 = _rpythonic_function_(		"axis_angle_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

quat_to_axis_angle = _rpythonic_function_(		"quat_to_axis_angle", ctypes.c_void_p, [
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.POINTER(ctypes.c_float)),
	("q",		( ctypes.c_float * 4 )),] )

mat3_to_axis_angle = _rpythonic_function_(		"mat3_to_axis_angle", ctypes.c_void_p, [
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.POINTER(ctypes.c_float)),
	("M",		( ctypes.c_float * 3 )),] )

mat4_to_axis_angle = _rpythonic_function_(		"mat4_to_axis_angle", ctypes.c_void_p, [
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.POINTER(ctypes.c_float)),
	("M",		( ctypes.c_float * 4 )),] )

single_axis_angle_to_mat3 = _rpythonic_function_(		"single_axis_angle_to_mat3", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 3 )),
	("axis",		ctypes.c_char),
	("angle",		ctypes.c_float),] )

vec_rot_to_quat = _rpythonic_function_(		"vec_rot_to_quat", ctypes.c_void_p, [
	("quat",		( ctypes.c_float * 4 )),
	("vec",		( ctypes.c_float * 3 )),
	("phi",		ctypes.c_float),] )

vec_rot_to_mat3 = _rpythonic_function_(		"vec_rot_to_mat3", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 3 )),
	("vec",		( ctypes.c_float * 3 )),
	("phi",		ctypes.c_float),] )

vec_rot_to_mat4 = _rpythonic_function_(		"vec_rot_to_mat4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("vec",		( ctypes.c_float * 3 )),
	("phi",		ctypes.c_float),] )

eul_to_quat = _rpythonic_function_(		"eul_to_quat", ctypes.c_void_p, [
	("quat",		( ctypes.c_float * 4 )),
	("eul",		( ctypes.c_float * 3 )),] )

eul_to_mat3 = _rpythonic_function_(		"eul_to_mat3", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 3 )),
	("eul",		( ctypes.c_float * 3 )),] )

eul_to_mat4 = _rpythonic_function_(		"eul_to_mat4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("eul",		( ctypes.c_float * 3 )),] )

quat_to_eul = _rpythonic_function_(		"quat_to_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("quat",		( ctypes.c_float * 4 )),] )

mat3_to_eul = _rpythonic_function_(		"mat3_to_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("mat",		( ctypes.c_float * 3 )),] )

mat4_to_eul = _rpythonic_function_(		"mat4_to_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("mat",		( ctypes.c_float * 4 )),] )

compatible_eul = _rpythonic_function_(		"compatible_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("old",		( ctypes.c_float * 3 )),] )

mat3_to_compatible_eul = _rpythonic_function_(		"mat3_to_compatible_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("old",		( ctypes.c_float * 3 )),
	("mat",		( ctypes.c_float * 3 )),] )

rotate_eul = _rpythonic_function_(		"rotate_eul", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("axis",		ctypes.c_char),
	("angle",		ctypes.c_float),] )

eulO_to_quat = _rpythonic_function_(		"eulO_to_quat", ctypes.c_void_p, [
	("quat",		( ctypes.c_float * 4 )),
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

eulO_to_mat3 = _rpythonic_function_(		"eulO_to_mat3", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 3 )),
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

eulO_to_mat4 = _rpythonic_function_(		"eulO_to_mat4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

eulO_to_axis_angle = _rpythonic_function_(		"eulO_to_axis_angle", ctypes.c_void_p, [
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.POINTER(ctypes.c_float)),
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

eulO_to_gimbal_axis = _rpythonic_function_(		"eulO_to_gimbal_axis", ctypes.c_void_p, [
	("gmat",		( ctypes.c_float * 3 )),
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),] )

quat_to_eulO = _rpythonic_function_(		"quat_to_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("quat",		( ctypes.c_float * 4 )),] )

mat3_to_eulO = _rpythonic_function_(		"mat3_to_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("mat",		( ctypes.c_float * 3 )),] )

mat4_to_eulO = _rpythonic_function_(		"mat4_to_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("mat",		( ctypes.c_float * 4 )),] )

axis_angle_to_eulO = _rpythonic_function_(		"axis_angle_to_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

mat3_to_compatible_eulO = _rpythonic_function_(		"mat3_to_compatible_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("old",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("mat",		( ctypes.c_float * 3 )),] )

mat4_to_compatible_eulO = _rpythonic_function_(		"mat4_to_compatible_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("old",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("mat",		( ctypes.c_float * 4 )),] )

rotate_eulO = _rpythonic_function_(		"rotate_eulO", ctypes.c_void_p, [
	("eul",		( ctypes.c_float * 3 )),
	("order",		ctypes.c_short),
	("axis",		ctypes.c_char),
	("angle",		ctypes.c_float),] )

copy_dq_dq = _rpythonic_function_(		"copy_dq_dq", ctypes.c_void_p, [
	("r",		ctypes.POINTER(DualQuat)),
	("dq",		ctypes.POINTER(DualQuat)),] )

normalize_dq = _rpythonic_function_(		"normalize_dq", ctypes.c_void_p, [
	("dq",		ctypes.POINTER(DualQuat)),
	("totw",		ctypes.c_float),] )

add_weighted_dq_dq = _rpythonic_function_(		"add_weighted_dq_dq", ctypes.c_void_p, [
	("r",		ctypes.POINTER(DualQuat)),
	("dq",		ctypes.POINTER(DualQuat)),
	("weight",		ctypes.c_float),] )

mul_v3m3_dq = _rpythonic_function_(		"mul_v3m3_dq", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("R",		( ctypes.c_float * 3 )),
	("dq",		ctypes.POINTER(DualQuat)),] )

mat4_to_dquat = _rpythonic_function_(		"mat4_to_dquat", ctypes.c_void_p, [
	("r",		ctypes.POINTER(DualQuat)),
	("base",		( ctypes.c_float * 4 )),
	("M",		( ctypes.c_float * 4 )),] )

dquat_to_mat4 = _rpythonic_function_(		"dquat_to_mat4", ctypes.c_void_p, [
	("R",		( ctypes.c_float * 4 )),
	("dq",		ctypes.POINTER(DualQuat)),] )

quat_apply_track = _rpythonic_function_(		"quat_apply_track", ctypes.c_void_p, [
	("quat",		( ctypes.c_float * 4 )),
	("axis",		ctypes.c_short),
	("upflag",		ctypes.c_short),] )

vec_apply_track = _rpythonic_function_(		"vec_apply_track", ctypes.c_void_p, [
	("vec",		( ctypes.c_float * 3 )),
	("axis",		ctypes.c_short),] )

focallength_to_fov = _rpythonic_function_(		"focallength_to_fov", ctypes.c_float, [
	("focal_length",		ctypes.c_float),
	("sensor",		ctypes.c_float),] )

fov_to_focallength = _rpythonic_function_(		"fov_to_focallength", ctypes.c_float, [
	("fov",		ctypes.c_float),
	("sensor",		ctypes.c_float),] )

angle_wrap_rad = _rpythonic_function_(		"angle_wrap_rad", ctypes.c_float, [
	("angle",		ctypes.c_float),] )

angle_wrap_deg = _rpythonic_function_(		"angle_wrap_deg", ctypes.c_float, [
	("angle",		ctypes.c_float),] )

interp_v2_v2v2 = _rpythonic_function_(		"interp_v2_v2v2", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 2 )),
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),
	("t",		ctypes.c_float),] )

interp_v2_v2v2v2 = _rpythonic_function_(		"interp_v2_v2v2v2", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 2 )),
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),
	("c",		( ctypes.c_float * 3 )),
	("t",		( ctypes.c_float * 3 )),] )

interp_v3_v3v3 = _rpythonic_function_(		"interp_v3_v3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("t",		ctypes.c_float),] )

interp_v3_v3v3v3 = _rpythonic_function_(		"interp_v3_v3v3v3", ctypes.c_void_p, [
	("p",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("w",		( ctypes.c_float * 3 )),] )

interp_v3_v3v3v3v3 = _rpythonic_function_(		"interp_v3_v3v3v3v3", ctypes.c_void_p, [
	("p",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("v4",		( ctypes.c_float * 3 )),
	("w",		( ctypes.c_float * 4 )),] )

interp_v4_v4v4 = _rpythonic_function_(		"interp_v4_v4v4", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 4 )),
	("b",		( ctypes.c_float * 4 )),
	("t",		ctypes.c_float),] )

interp_v4_v4v4v4 = _rpythonic_function_(		"interp_v4_v4v4v4", ctypes.c_void_p, [
	("p",		( ctypes.c_float * 4 )),
	("v1",		( ctypes.c_float * 4 )),
	("v2",		( ctypes.c_float * 4 )),
	("v3",		( ctypes.c_float * 4 )),
	("w",		( ctypes.c_float * 3 )),] )

interp_v4_v4v4v4v4 = _rpythonic_function_(		"interp_v4_v4v4v4v4", ctypes.c_void_p, [
	("p",		( ctypes.c_float * 4 )),
	("v1",		( ctypes.c_float * 4 )),
	("v2",		( ctypes.c_float * 4 )),
	("v3",		( ctypes.c_float * 4 )),
	("v4",		( ctypes.c_float * 4 )),
	("w",		( ctypes.c_float * 4 )),] )

mid_v3_v3v3 = _rpythonic_function_(		"mid_v3_v3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),] )

angle_v2v2 = _rpythonic_function_(		"angle_v2v2", ctypes.c_float, [
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),] )

angle_v2v2v2 = _rpythonic_function_(		"angle_v2v2v2", ctypes.c_float, [
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),
	("c",		( ctypes.c_float * 2 )),] )

angle_normalized_v2v2 = _rpythonic_function_(		"angle_normalized_v2v2", ctypes.c_float, [
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),] )

angle_v3v3 = _rpythonic_function_(		"angle_v3v3", ctypes.c_float, [
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),] )

angle_v3v3v3 = _rpythonic_function_(		"angle_v3v3v3", ctypes.c_float, [
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

angle_normalized_v3v3 = _rpythonic_function_(		"angle_normalized_v3v3", ctypes.c_float, [
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),] )

angle_tri_v3 = _rpythonic_function_(		"angle_tri_v3", ctypes.c_void_p, [
	("angles",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),] )

angle_quad_v3 = _rpythonic_function_(		"angle_quad_v3", ctypes.c_void_p, [
	("angles",		( ctypes.c_float * 4 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("v4",		( ctypes.c_float * 3 )),] )

project_v2_v2v2 = _rpythonic_function_(		"project_v2_v2v2", ctypes.c_void_p, [
	("c",		( ctypes.c_float * 2 )),
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),] )

project_v3_v3v3 = _rpythonic_function_(		"project_v3_v3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("n",		( ctypes.c_float * 3 )),] )

reflect_v3_v3v3 = _rpythonic_function_(		"reflect_v3_v3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("v",		( ctypes.c_float * 3 )),
	("n",		( ctypes.c_float * 3 )),] )

ortho_basis_v3v3_v3 = _rpythonic_function_(		"ortho_basis_v3v3_v3", ctypes.c_void_p, [
	("r1",		( ctypes.c_float * 3 )),
	("r2",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),] )

bisect_v3_v3v3v3 = _rpythonic_function_(		"bisect_v3_v3v3v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

rotate_v3_v3v3fl = _rpythonic_function_(		"rotate_v3_v3v3fl", ctypes.c_void_p, [
	("v",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

rotate_normalized_v3_v3v3fl = _rpythonic_function_(		"rotate_normalized_v3_v3v3fl", ctypes.c_void_p, [
	("v",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("axis",		( ctypes.c_float * 3 )),
	("angle",		ctypes.c_float),] )

print_v2 = _rpythonic_function_(		"print_v2", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("a",		( ctypes.c_float * 2 )),] )

print_v3 = _rpythonic_function_(		"print_v3", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("a",		( ctypes.c_float * 3 )),] )

print_v4 = _rpythonic_function_(		"print_v4", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("a",		( ctypes.c_float * 4 )),] )

minmax_v3v3_v3 = _rpythonic_function_(		"minmax_v3v3_v3", ctypes.c_void_p, [
	("min",		( ctypes.c_float * 3 )),
	("max",		( ctypes.c_float * 3 )),
	("vec",		( ctypes.c_float * 3 )),] )

dot_vn_vn = _rpythonic_function_(		"dot_vn_vn", ctypes.c_double, [
	("array_src_a",		ctypes.POINTER(ctypes.c_float)),
	("array_src_b",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

normalize_vn_vn = _rpythonic_function_(		"normalize_vn_vn", ctypes.c_float, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

normalize_vn = _rpythonic_function_(		"normalize_vn", ctypes.c_float, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

range_vn_i = _rpythonic_function_(		"range_vn_i", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.c_int),
	("start",		ctypes.c_int),] )

range_vn_fl = _rpythonic_function_(		"range_vn_fl", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),
	("start",		ctypes.c_float),
	("step",		ctypes.c_float),] )

negate_vn = _rpythonic_function_(		"negate_vn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

negate_vn_vn = _rpythonic_function_(		"negate_vn_vn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

mul_vn_fl = _rpythonic_function_(		"mul_vn_fl", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),
	("f",		ctypes.c_float),] )

mul_vn_vn_fl = _rpythonic_function_(		"mul_vn_vn_fl", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),
	("f",		ctypes.c_float),] )

add_vn_vn = _rpythonic_function_(		"add_vn_vn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

add_vn_vnvn = _rpythonic_function_(		"add_vn_vnvn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src_a",		ctypes.POINTER(ctypes.c_float)),
	("array_src_b",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

sub_vn_vn = _rpythonic_function_(		"sub_vn_vn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

sub_vn_vnvn = _rpythonic_function_(		"sub_vn_vnvn", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("array_src_a",		ctypes.POINTER(ctypes.c_float)),
	("array_src_b",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),] )

fill_vn_i = _rpythonic_function_(		"fill_vn_i", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_int)),
	("size",		ctypes.c_int),
	("val",		ctypes.c_int),] )

fill_vn_fl = _rpythonic_function_(		"fill_vn_fl", ctypes.c_void_p, [
	("array_tar",		ctypes.POINTER(ctypes.c_float)),
	("size",		ctypes.c_int),
	("val",		ctypes.c_float),] )

cent_tri_v3 = _rpythonic_function_(		"cent_tri_v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

cent_quad_v3 = _rpythonic_function_(		"cent_quad_v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),] )

normal_tri_v3 = _rpythonic_function_(		"normal_tri_v3", ctypes.c_float, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

normal_quad_v3 = _rpythonic_function_(		"normal_quad_v3", ctypes.c_float, [
	("r",		( ctypes.c_float * 3 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),] )

area_tri_v2 = _rpythonic_function_(		"area_tri_v2", ctypes.c_float, [
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),
	("c",		( ctypes.c_float * 2 )),] )

area_tri_signed_v2 = _rpythonic_function_(		"area_tri_signed_v2", ctypes.c_float, [
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),] )

area_tri_v3 = _rpythonic_function_(		"area_tri_v3", ctypes.c_float, [
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),] )

area_quad_v3 = _rpythonic_function_(		"area_quad_v3", ctypes.c_float, [
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),] )

area_poly_v3 = _rpythonic_function_(		"area_poly_v3", ctypes.c_float, [
	("nr",		ctypes.c_int),
	("verts",		ctypes.c_float),
	("normal",		( ctypes.c_float * 3 )),] )

dist_to_line_v2 = _rpythonic_function_(		"dist_to_line_v2", ctypes.c_float, [
	("p",		( ctypes.c_float * 2 )),
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),] )

dist_to_line_segment_v2 = _rpythonic_function_(		"dist_to_line_segment_v2", ctypes.c_float, [
	("p",		( ctypes.c_float * 2 )),
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),] )

closest_to_line_segment_v2 = _rpythonic_function_(		"closest_to_line_segment_v2", ctypes.c_void_p, [
	("closest",		( ctypes.c_float * 2 )),
	("p",		( ctypes.c_float * 2 )),
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),] )

dist_to_plane_normalized_v3 = _rpythonic_function_(		"dist_to_plane_normalized_v3", ctypes.c_float, [
	("p",		( ctypes.c_float * 3 )),
	("plane_co",		( ctypes.c_float * 3 )),
	("plane_no_unit",		( ctypes.c_float * 3 )),] )

dist_to_plane_v3 = _rpythonic_function_(		"dist_to_plane_v3", ctypes.c_float, [
	("p",		( ctypes.c_float * 3 )),
	("plane_co",		( ctypes.c_float * 3 )),
	("plane_no",		( ctypes.c_float * 3 )),] )

dist_to_line_segment_v3 = _rpythonic_function_(		"dist_to_line_segment_v3", ctypes.c_float, [
	("p",		( ctypes.c_float * 3 )),
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),] )

closest_to_line_v3 = _rpythonic_function_(		"closest_to_line_v3", ctypes.c_float, [
	("r",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),] )

closest_to_line_v2 = _rpythonic_function_(		"closest_to_line_v2", ctypes.c_float, [
	("r",		( ctypes.c_float * 2 )),
	("p",		( ctypes.c_float * 2 )),
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),] )

closest_to_line_segment_v3 = _rpythonic_function_(		"closest_to_line_segment_v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),] )

closest_to_plane_v3 = _rpythonic_function_(		"closest_to_plane_v3", ctypes.c_void_p, [
	("r",		( ctypes.c_float * 3 )),
	("plane_co",		( ctypes.c_float * 3 )),
	("plane_no_unit",		( ctypes.c_float * 3 )),
	("pt",		( ctypes.c_float * 3 )),] )

line_point_factor_v3 = _rpythonic_function_(		"line_point_factor_v3", ctypes.c_float, [
	("p",		( ctypes.c_float * 3 )),
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),] )

line_point_factor_v2 = _rpythonic_function_(		"line_point_factor_v2", ctypes.c_float, [
	("p",		( ctypes.c_float * 2 )),
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),] )

isect_line_line_v2 = _rpythonic_function_(		"isect_line_line_v2", ctypes.c_int, [
	("a1",		( ctypes.c_float * 2 )),
	("a2",		( ctypes.c_float * 2 )),
	("b1",		( ctypes.c_float * 2 )),
	("b2",		( ctypes.c_float * 2 )),] )

isect_line_line_v2_int = _rpythonic_function_(		"isect_line_line_v2_int", ctypes.c_int, [
	("a1",		( ctypes.c_int * 2 )),
	("a2",		( ctypes.c_int * 2 )),
	("b1",		( ctypes.c_int * 2 )),
	("b2",		( ctypes.c_int * 2 )),] )

isect_line_sphere_v3 = _rpythonic_function_(		"isect_line_sphere_v3", ctypes.c_int, [
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),
	("sp",		( ctypes.c_float * 3 )),
	("r",		ctypes.c_float),
	("r_p1",		( ctypes.c_float * 3 )),
	("r_p2",		( ctypes.c_float * 3 )),] )

isect_line_sphere_v2 = _rpythonic_function_(		"isect_line_sphere_v2", ctypes.c_int, [
	("l1",		( ctypes.c_float * 2 )),
	("l2",		( ctypes.c_float * 2 )),
	("sp",		( ctypes.c_float * 2 )),
	("r",		ctypes.c_float),
	("r_p1",		( ctypes.c_float * 2 )),
	("r_p2",		( ctypes.c_float * 2 )),] )

isect_seg_seg_v2_point = _rpythonic_function_(		"isect_seg_seg_v2_point", ctypes.c_int, [
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),
	("v4",		( ctypes.c_float * 2 )),
	("vi",		( ctypes.c_float * 2 )),] )

isect_line_line_v3 = _rpythonic_function_(		"isect_line_line_v3", ctypes.c_int, [
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("v4",		( ctypes.c_float * 3 )),
	("i1",		( ctypes.c_float * 3 )),
	("i2",		( ctypes.c_float * 3 )),] )

isect_line_line_strict_v3 = _rpythonic_function_(		"isect_line_line_strict_v3", ctypes.c_int, [
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("v4",		( ctypes.c_float * 3 )),
	("vi",		( ctypes.c_float * 3 )),
	("r_lambda",		ctypes.POINTER(ctypes.c_float)),] )

isect_ray_plane_v3 = _rpythonic_function_(		"isect_ray_plane_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("r_lambda",		ctypes.POINTER(ctypes.c_float)),
	("clip",		ctypes.c_int),] )

isect_line_plane_v3 = _rpythonic_function_(		"isect_line_plane_v3", ctypes.c_int, [
	("out",		( ctypes.c_float * 3 )),
	("l1",		( ctypes.c_float * 3 )),
	("l2",		( ctypes.c_float * 3 )),
	("plane_co",		( ctypes.c_float * 3 )),
	("plane_no",		( ctypes.c_float * 3 )),
	("no_flip",		ctypes.c_short),] )

isect_plane_plane_v3 = _rpythonic_function_(		"isect_plane_plane_v3", ctypes.c_void_p, [
	("r_isect_co",		( ctypes.c_float * 3 )),
	("r_isect_no",		( ctypes.c_float * 3 )),
	("plane_a_co",		( ctypes.c_float * 3 )),
	("plane_a_no",		( ctypes.c_float * 3 )),
	("plane_b_co",		( ctypes.c_float * 3 )),
	("plane_b_no",		( ctypes.c_float * 3 )),] )

isect_line_tri_v3 = _rpythonic_function_(		"isect_line_tri_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("p2",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("r_lambda",		ctypes.POINTER(ctypes.c_float)),
	("r_uv",		( ctypes.c_float * 2 )),] )

isect_ray_tri_v3 = _rpythonic_function_(		"isect_ray_tri_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("r_lambda",		ctypes.POINTER(ctypes.c_float)),
	("r_uv",		( ctypes.c_float * 2 )),] )

isect_ray_tri_threshold_v3 = _rpythonic_function_(		"isect_ray_tri_threshold_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("r_lambda",		ctypes.POINTER(ctypes.c_float)),
	("r_uv",		( ctypes.c_float * 2 )),
	("threshold",		ctypes.c_float),] )

isect_ray_tri_epsilon_v3 = _rpythonic_function_(		"isect_ray_tri_epsilon_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("r_lambda",		ctypes.POINTER(ctypes.c_float)),
	("r_uv",		( ctypes.c_float * 2 )),
	("epsilon",		ctypes.c_float),] )

isect_point_quad_v2 = _rpythonic_function_(		"isect_point_quad_v2", ctypes.c_int, [
	("p",		( ctypes.c_float * 2 )),
	("a",		( ctypes.c_float * 2 )),
	("b",		( ctypes.c_float * 2 )),
	("c",		( ctypes.c_float * 2 )),
	("d",		( ctypes.c_float * 2 )),] )

isect_point_tri_v2 = _rpythonic_function_(		"isect_point_tri_v2", ctypes.c_int, [
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),
	("pt",		( ctypes.c_float * 2 )),] )

isect_point_tri_v2_int = _rpythonic_function_(		"isect_point_tri_v2_int", ctypes.c_int, [
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),
	("a",		ctypes.c_int),
	("b",		ctypes.c_int),] )

isect_point_tri_prism_v3 = _rpythonic_function_(		"isect_point_tri_prism_v3", ctypes.c_int, [
	("p",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),] )

isect_point_quad_uv_v2 = _rpythonic_function_(		"isect_point_quad_uv_v2", ctypes.c_void_p, [
	("v0",		( ctypes.c_float * 2 )),
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),
	("pt",		( ctypes.c_float * 2 )),
	("r_uv",		( ctypes.c_float * 2 )),] )

isect_point_face_uv_v2 = _rpythonic_function_(		"isect_point_face_uv_v2", ctypes.c_void_p, [
	("isquad",		ctypes.c_int),
	("v0",		( ctypes.c_float * 2 )),
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),
	("pt",		( ctypes.c_float * 2 )),
	("r_uv",		( ctypes.c_float * 2 )),] )

isect_sweeping_sphere_tri_v3 = _rpythonic_function_(		"isect_sweeping_sphere_tri_v3", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("p2",		( ctypes.c_float * 3 )),
	("radius",		ctypes.c_float),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("r_lambda",		ctypes.POINTER(ctypes.c_float)),
	("ipoint",		( ctypes.c_float * 3 )),] )

isect_axial_line_tri_v3 = _rpythonic_function_(		"isect_axial_line_tri_v3", ctypes.c_int, [
	("axis",		ctypes.c_int),
	("co1",		( ctypes.c_float * 3 )),
	("co2",		( ctypes.c_float * 3 )),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("r_lambda",		ctypes.POINTER(ctypes.c_float)),] )

isect_aabb_aabb_v3 = _rpythonic_function_(		"isect_aabb_aabb_v3", ctypes.c_int, [
	("min1",		( ctypes.c_float * 3 )),
	("max1",		( ctypes.c_float * 3 )),
	("min2",		( ctypes.c_float * 3 )),
	("max2",		( ctypes.c_float * 3 )),] )

clip_line_plane = _rpythonic_function_(		"clip_line_plane", ctypes.c_int, [
	("p1",		( ctypes.c_float * 3 )),
	("p2",		( ctypes.c_float * 3 )),
	("plane",		( ctypes.c_float * 4 )),] )

plot_line_v2v2i = _rpythonic_function_(		"plot_line_v2v2i", ctypes.c_void_p, [
	("p1",		( ctypes.c_int * 2 )),
	("p2",		( ctypes.c_int * 2 )),
	("callback",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

callback = _rpythonic_function_(		"callback", ctypes.c_int, [
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

interp_weights_face_v3 = _rpythonic_function_(		"interp_weights_face_v3", ctypes.c_void_p, [
	("w",		( ctypes.c_float * 4 )),
	("a",		( ctypes.c_float * 3 )),
	("b",		( ctypes.c_float * 3 )),
	("c",		( ctypes.c_float * 3 )),
	("d",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),] )

interp_weights_poly_v3 = _rpythonic_function_(		"interp_weights_poly_v3", ctypes.c_void_p, [
	("w",		ctypes.c_float),
	("v",		ctypes.c_float),
	("n",		ctypes.c_int),
	("p",		( ctypes.c_float * 3 )),] )

interp_cubic_v3 = _rpythonic_function_(		"interp_cubic_v3", ctypes.c_void_p, [
	("x",		( ctypes.c_float * 3 )),
	("v",		( ctypes.c_float * 3 )),
	("x1",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("x2",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("t",		ctypes.c_float),] )

interp_sparse_array = _rpythonic_function_(		"interp_sparse_array", ctypes.c_int, [
	("array",		ctypes.POINTER(ctypes.c_float)),
	("list_size",		ctypes.c_int),
	("invalid",		ctypes.c_float),] )

barycentric_transform = _rpythonic_function_(		"barycentric_transform", ctypes.c_void_p, [
	("pt_tar",		( ctypes.c_float * 3 )),
	("pt_src",		( ctypes.c_float * 3 )),
	("tri_tar_p1",		( ctypes.c_float * 3 )),
	("tri_tar_p2",		( ctypes.c_float * 3 )),
	("tri_tar_p3",		( ctypes.c_float * 3 )),
	("tri_src_p1",		( ctypes.c_float * 3 )),
	("tri_src_p2",		( ctypes.c_float * 3 )),
	("tri_src_p3",		( ctypes.c_float * 3 )),] )

barycentric_weights_v2 = _rpythonic_function_(		"barycentric_weights_v2", ctypes.c_void_p, [
	("v1",		( ctypes.c_float * 2 )),
	("v2",		( ctypes.c_float * 2 )),
	("v3",		( ctypes.c_float * 2 )),
	("co",		( ctypes.c_float * 2 )),
	("w",		( ctypes.c_float * 3 )),] )

resolve_tri_uv = _rpythonic_function_(		"resolve_tri_uv", ctypes.c_void_p, [
	("r_uv",		( ctypes.c_float * 2 )),
	("st",		( ctypes.c_float * 2 )),
	("st0",		( ctypes.c_float * 2 )),
	("st1",		( ctypes.c_float * 2 )),
	("st2",		( ctypes.c_float * 2 )),] )

resolve_quad_uv = _rpythonic_function_(		"resolve_quad_uv", ctypes.c_void_p, [
	("uv",		( ctypes.c_float * 2 )),
	("st",		( ctypes.c_float * 2 )),
	("st0",		( ctypes.c_float * 2 )),
	("st1",		( ctypes.c_float * 2 )),
	("st2",		( ctypes.c_float * 2 )),
	("st3",		( ctypes.c_float * 2 )),] )

lookat_m4 = _rpythonic_function_(		"lookat_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("vx",		ctypes.c_float),
	("vy",		ctypes.c_float),
	("vz",		ctypes.c_float),
	("px",		ctypes.c_float),
	("py",		ctypes.c_float),
	("pz",		ctypes.c_float),
	("twist",		ctypes.c_float),] )

polarview_m4 = _rpythonic_function_(		"polarview_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("dist",		ctypes.c_float),
	("azimuth",		ctypes.c_float),
	("incidence",		ctypes.c_float),
	("twist",		ctypes.c_float),] )

perspective_m4 = _rpythonic_function_(		"perspective_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("left",		ctypes.c_float),
	("right",		ctypes.c_float),
	("bottom",		ctypes.c_float),
	("top",		ctypes.c_float),
	("nearClip",		ctypes.c_float),
	("farClip",		ctypes.c_float),] )

orthographic_m4 = _rpythonic_function_(		"orthographic_m4", ctypes.c_void_p, [
	("mat",		( ctypes.c_float * 4 )),
	("left",		ctypes.c_float),
	("right",		ctypes.c_float),
	("bottom",		ctypes.c_float),
	("top",		ctypes.c_float),
	("nearClip",		ctypes.c_float),
	("farClip",		ctypes.c_float),] )

window_translate_m4 = _rpythonic_function_(		"window_translate_m4", ctypes.c_void_p, [
	("winmat",		ctypes.c_float),
	("perspmat",		ctypes.c_float),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),] )

box_clip_bounds_m4 = _rpythonic_function_(		"box_clip_bounds_m4", ctypes.c_int, [
	("boundbox",		( ctypes.c_float * 2 )),
	("bounds",		( ctypes.c_float * 4 )),
	("winmat",		( ctypes.c_float * 4 )),] )

box_minmax_bounds_m4 = _rpythonic_function_(		"box_minmax_bounds_m4", ctypes.c_void_p, [
	("min",		( ctypes.c_float * 3 )),
	("max",		( ctypes.c_float * 3 )),
	("boundbox",		( ctypes.c_float * 2 )),
	("mat",		( ctypes.c_float * 4 )),] )

map_to_tube = _rpythonic_function_(		"map_to_tube", ctypes.c_void_p, [
	("u",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

map_to_sphere = _rpythonic_function_(		"map_to_sphere", ctypes.c_void_p, [
	("u",		ctypes.POINTER(ctypes.c_float)),
	("v",		ctypes.POINTER(ctypes.c_float)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

accumulate_vertex_normals = _rpythonic_function_(		"accumulate_vertex_normals", ctypes.c_void_p, [
	("n1",		( ctypes.c_float * 3 )),
	("n2",		( ctypes.c_float * 3 )),
	("n3",		( ctypes.c_float * 3 )),
	("n4",		( ctypes.c_float * 3 )),
	("f_no",		( ctypes.c_float * 3 )),
	("co1",		( ctypes.c_float * 3 )),
	("co2",		( ctypes.c_float * 3 )),
	("co3",		( ctypes.c_float * 3 )),
	("co4",		( ctypes.c_float * 3 )),] )

find_vertex_tangent = _rpythonic_function_(		"find_vertex_tangent", ctypes.POINTER(ctypes.c_float), [
	("vtang",		ctypes.POINTER(VertexTangent)),
	("uv",		( ctypes.c_float * 2 )),] )

sum_or_add_vertex_tangent = _rpythonic_function_(		"sum_or_add_vertex_tangent", ctypes.c_void_p, [
	("arena",		ctypes.POINTER(ctypes.c_void_p)),
	("vtang",		ctypes.POINTER(ctypes.POINTER(VertexTangent))),
	("tang",		( ctypes.c_float * 3 )),
	("uv",		( ctypes.c_float * 2 )),] )

tangent_from_uv = _rpythonic_function_(		"tangent_from_uv", ctypes.c_void_p, [
	("uv1",		( ctypes.c_float * 2 )),
	("uv2",		( ctypes.c_float * 2 )),
	("uv3",		( ctypes.c_float * 2 )),
	("co1",		( ctypes.c_float * 3 )),
	("co2",		( ctypes.c_float * 3 )),
	("co3",		( ctypes.c_float * 3 )),
	("n",		( ctypes.c_float * 3 )),
	("tang",		( ctypes.c_float * 3 )),] )

vcloud_estimate_transform = _rpythonic_function_(		"vcloud_estimate_transform", ctypes.c_void_p, [
	("list_size",		ctypes.c_int),
	("pos",		ctypes.POINTER(ctypes.c_float)),
	("weight",		ctypes.POINTER(ctypes.c_float)),
	("rpos",		ctypes.POINTER(ctypes.c_float)),
	("rweight",		ctypes.POINTER(ctypes.c_float)),
	("lloc",		( ctypes.c_float * 3 )),
	("rloc",		( ctypes.c_float * 3 )),
	("lrot",		( ctypes.c_float * 3 )),
	("lscale",		( ctypes.c_float * 3 )),] )

form_factor_hemi_poly = _rpythonic_function_(		"form_factor_hemi_poly", ctypes.c_float, [
	("p",		( ctypes.c_float * 3 )),
	("n",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("v4",		( ctypes.c_float * 3 )),] )

axis_dominant_v3 = _rpythonic_function_(		"axis_dominant_v3", ctypes.c_void_p, [
	("axis_a",		ctypes.POINTER(ctypes.c_int)),
	("axis_b",		ctypes.POINTER(ctypes.c_int)),
	("axis",		( ctypes.c_float * 3 )),] )

voxel_sample_nearest = _rpythonic_function_(		"voxel_sample_nearest", ctypes.c_float, [
	("data",		ctypes.POINTER(ctypes.c_float)),
	("res",		( ctypes.c_int * 3 )),
	("co",		( ctypes.c_float * 3 )),] )

voxel_sample_trilinear = _rpythonic_function_(		"voxel_sample_trilinear", ctypes.c_float, [
	("data",		ctypes.POINTER(ctypes.c_float)),
	("res",		( ctypes.c_int * 3 )),
	("co",		( ctypes.c_float * 3 )),] )

voxel_sample_triquadratic = _rpythonic_function_(		"voxel_sample_triquadratic", ctypes.c_float, [
	("data",		ctypes.POINTER(ctypes.c_float)),
	("res",		( ctypes.c_int * 3 )),
	("co",		( ctypes.c_float * 3 )),] )

voxel_sample_tricubic = _rpythonic_function_(		"voxel_sample_tricubic", ctypes.c_float, [
	("data",		ctypes.POINTER(ctypes.c_float)),
	("res",		( ctypes.c_int * 3 )),
	("co",		( ctypes.c_float * 3 )),
	("bspline",		ctypes.c_int),] )

BKE_read_file = _rpythonic_function_(		"BKE_read_file", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

BKE_read_file_from_memory = _rpythonic_function_(		"BKE_read_file_from_memory", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("filebuf",		ctypes.POINTER(ctypes.c_char)),
	("filelength",		ctypes.c_int),
	("reports",		ctypes.POINTER(ReportList)),] )

BKE_read_file_from_memfile = _rpythonic_function_(		"BKE_read_file_from_memfile", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("memfile",		ctypes.POINTER(MemFile)),
	("reports",		ctypes.POINTER(ReportList)),] )

free_blender = _rpythonic_function_(		"free_blender", ctypes.c_void_p, [] )

initglobals = _rpythonic_function_(		"initglobals", ctypes.c_void_p, [] )

BKE_userdef_free = _rpythonic_function_(		"BKE_userdef_free", ctypes.c_void_p, [] )

set_blender_test_break_cb = _rpythonic_function_(		"set_blender_test_break_cb", ctypes.c_void_p, [
	("func",		ctypes.c_void_p),] )

blender_test_break = _rpythonic_function_(		"blender_test_break", ctypes.c_int, [] )

BKE_write_undo = _rpythonic_function_(		"BKE_write_undo", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_undo_step = _rpythonic_function_(		"BKE_undo_step", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("step",		ctypes.c_int),] )

BKE_undo_name = _rpythonic_function_(		"BKE_undo_name", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_undo_valid = _rpythonic_function_(		"BKE_undo_valid", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_reset_undo = _rpythonic_function_(		"BKE_reset_undo", ctypes.c_void_p, [] )

BKE_undo_menu_string = _rpythonic_function_(		"BKE_undo_menu_string", ctypes.POINTER(ctypes.c_char), [] )

BKE_undo_number = _rpythonic_function_(		"BKE_undo_number", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("nr",		ctypes.c_int),] )

BKE_undo_get_name = _rpythonic_function_(		"BKE_undo_get_name", ctypes.POINTER(ctypes.c_char), [
	("nr",		ctypes.c_int),
	("active",		ctypes.POINTER(ctypes.c_int)),] )

BKE_undo_save_quit = _rpythonic_function_(		"BKE_undo_save_quit", ctypes.c_void_p, [] )

BKE_undo_get_main = _rpythonic_function_(		"BKE_undo_get_main", ctypes.POINTER(Main), [
	("scene",		ctypes.POINTER(ctypes.POINTER(Scene))),] )

EnumPropertyItemFunc = _rpythonic_function_(		"EnumPropertyItemFunc", ctypes.POINTER(EnumPropertyItem), [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("free",		ctypes.POINTER(ctypes.c_int)),] )

CallFunc = _rpythonic_function_(		"CallFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("reports",		ctypes.POINTER(ReportList)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("parms",		ctypes.POINTER(ParameterList)),] )

StructValidateFunc = _rpythonic_function_(		"StructValidateFunc", ctypes.c_int, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("have_function",		ctypes.POINTER(ctypes.c_int)),] )

StructCallbackFunc = _rpythonic_function_(		"StructCallbackFunc", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("func",		ctypes.POINTER(FunctionRNA)),
	("C_list",		ctypes.POINTER(ParameterList)),] )

StructFreeFunc = _rpythonic_function_(		"StructFreeFunc", ctypes.c_void_p, [("data",		ctypes.c_void_p)] )

StructRegisterFunc = _rpythonic_function_(		"StructRegisterFunc", ctypes.POINTER(StructRNA), [
	("bmain",		ctypes.POINTER(Main)),
	("reports",		ctypes.POINTER(ReportList)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("identifier",		ctypes.POINTER(ctypes.c_char)),
	("validate",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(PointerRNA),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_int),)),
	("call",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(bContext),ctypes.POINTER(PointerRNA),ctypes.POINTER(FunctionRNA),ctypes.POINTER(ParameterList),)),
	("free",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),] )

StructUnregisterFunc = _rpythonic_function_(		"StructUnregisterFunc", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("C_type",		ctypes.POINTER(StructRNA)),] )

StructInstanceFunc = _rpythonic_function_(		"StructInstanceFunc", ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)), [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

bContextDataCallback = _rpythonic_function_(		"bContextDataCallback", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),
	("result",		ctypes.POINTER(bContextDataResult)),] )

CTX_create = _rpythonic_function_(		"CTX_create", ctypes.POINTER(bContext), [] )

CTX_free = _rpythonic_function_(		"CTX_free", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

CTX_copy = _rpythonic_function_(		"CTX_copy", ctypes.POINTER(bContext), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_store_add = _rpythonic_function_(		"CTX_store_add", ctypes.POINTER(bContextStore), [
	("contexts",		ctypes.POINTER(ListBase)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

CTX_store_set = _rpythonic_function_(		"CTX_store_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("store",		ctypes.POINTER(bContextStore)),] )

CTX_store_copy = _rpythonic_function_(		"CTX_store_copy", ctypes.POINTER(bContextStore), [
	("store",		ctypes.POINTER(bContextStore)),] )

CTX_store_free = _rpythonic_function_(		"CTX_store_free", ctypes.c_void_p, [
	("store",		ctypes.POINTER(bContextStore)),] )

CTX_store_free_list = _rpythonic_function_(		"CTX_store_free_list", ctypes.c_void_p, [
	("contexts",		ctypes.POINTER(ListBase)),] )

CTX_py_init_get = _rpythonic_function_(		"CTX_py_init_get", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

CTX_py_init_set = _rpythonic_function_(		"CTX_py_init_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("value",		ctypes.c_int),] )

CTX_py_dict_get = _rpythonic_function_(		"CTX_py_dict_get", ctypes.POINTER(ctypes.c_void_p), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_py_dict_set = _rpythonic_function_(		"CTX_py_dict_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("value",		ctypes.POINTER(ctypes.c_void_p)),] )

CTX_wm_manager = _rpythonic_function_(		"CTX_wm_manager", ctypes.POINTER(wmWindowManager), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_window = _rpythonic_function_(		"CTX_wm_window", ctypes.POINTER(wmWindow), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_screen = _rpythonic_function_(		"CTX_wm_screen", ctypes.POINTER(bScreen), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_area = _rpythonic_function_(		"CTX_wm_area", ctypes.POINTER(ScrArea), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_data = _rpythonic_function_(		"CTX_wm_space_data", ctypes.POINTER(SpaceLink), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_region = _rpythonic_function_(		"CTX_wm_region", ctypes.POINTER(ARegion), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_region_data = _rpythonic_function_(		"CTX_wm_region_data", ctypes.POINTER(ctypes.c_void_p), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_menu = _rpythonic_function_(		"CTX_wm_menu", ctypes.POINTER(ARegion), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_reports = _rpythonic_function_(		"CTX_wm_reports", ctypes.POINTER(ReportList), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_view3d = _rpythonic_function_(		"CTX_wm_view3d", ctypes.POINTER(View3D), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_region_view3d = _rpythonic_function_(		"CTX_wm_region_view3d", ctypes.POINTER(RegionView3D), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_text = _rpythonic_function_(		"CTX_wm_space_text", ctypes.POINTER(SpaceText), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_image = _rpythonic_function_(		"CTX_wm_space_image", ctypes.POINTER(SpaceImage), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_console = _rpythonic_function_(		"CTX_wm_space_console", ctypes.POINTER(SpaceConsole), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_buts = _rpythonic_function_(		"CTX_wm_space_buts", ctypes.POINTER(SpaceButs), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_file = _rpythonic_function_(		"CTX_wm_space_file", ctypes.POINTER(SpaceFile), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_seq = _rpythonic_function_(		"CTX_wm_space_seq", ctypes.POINTER(SpaceSeq), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_outliner = _rpythonic_function_(		"CTX_wm_space_outliner", ctypes.POINTER(SpaceOops), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_nla = _rpythonic_function_(		"CTX_wm_space_nla", ctypes.POINTER(SpaceNla), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_time = _rpythonic_function_(		"CTX_wm_space_time", ctypes.POINTER(SpaceTime), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_node = _rpythonic_function_(		"CTX_wm_space_node", ctypes.POINTER(SpaceNode), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_logic = _rpythonic_function_(		"CTX_wm_space_logic", ctypes.POINTER(SpaceLogic), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_graph = _rpythonic_function_(		"CTX_wm_space_graph", ctypes.POINTER(SpaceIpo), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_action = _rpythonic_function_(		"CTX_wm_space_action", ctypes.POINTER(SpaceAction), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_info = _rpythonic_function_(		"CTX_wm_space_info", ctypes.POINTER(SpaceInfo), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_userpref = _rpythonic_function_(		"CTX_wm_space_userpref", ctypes.POINTER(SpaceUserPref), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_space_clip = _rpythonic_function_(		"CTX_wm_space_clip", ctypes.POINTER(SpaceClip), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_manager_set = _rpythonic_function_(		"CTX_wm_manager_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),] )

CTX_wm_window_set = _rpythonic_function_(		"CTX_wm_window_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("win",		ctypes.POINTER(wmWindow)),] )

CTX_wm_screen_set = _rpythonic_function_(		"CTX_wm_screen_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("screen",		ctypes.POINTER(bScreen)),] )

CTX_wm_area_set = _rpythonic_function_(		"CTX_wm_area_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

CTX_wm_region_set = _rpythonic_function_(		"CTX_wm_region_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("region",		ctypes.POINTER(ARegion)),] )

CTX_wm_menu_set = _rpythonic_function_(		"CTX_wm_menu_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("menu",		ctypes.POINTER(ARegion)),] )

CTX_wm_operator_poll_msg_get = _rpythonic_function_(		"CTX_wm_operator_poll_msg_get", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_wm_operator_poll_msg_set = _rpythonic_function_(		"CTX_wm_operator_poll_msg_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

CTX_data_pointer_get = _rpythonic_function_(		"CTX_data_pointer_get", PointerRNA, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),] )

CTX_data_pointer_get_type = _rpythonic_function_(		"CTX_data_pointer_get_type", PointerRNA, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.POINTER(StructRNA)),] )

CTX_data_collection_get = _rpythonic_function_(		"CTX_data_collection_get", ListBase, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),] )

CTX_data_dir_get = _rpythonic_function_(		"CTX_data_dir_get", ListBase, [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_get = _rpythonic_function_(		"CTX_data_get", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),
	("r_ptr",		ctypes.POINTER(PointerRNA)),
	("r_lb",		ctypes.POINTER(ListBase)),
	("r_type",		ctypes.POINTER(ctypes.c_short)),] )

CTX_data_id_pointer_set = _rpythonic_function_(		"CTX_data_id_pointer_set", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("C_id",		ctypes.POINTER(ID)),] )

CTX_data_pointer_set = _rpythonic_function_(		"CTX_data_pointer_set", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("C_id",		ctypes.POINTER(ID)),
	("C_type",		ctypes.POINTER(StructRNA)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

CTX_data_id_list_add = _rpythonic_function_(		"CTX_data_id_list_add", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("C_id",		ctypes.POINTER(ID)),] )

CTX_data_list_add = _rpythonic_function_(		"CTX_data_list_add", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("C_id",		ctypes.POINTER(ID)),
	("C_type",		ctypes.POINTER(StructRNA)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

CTX_data_dir_set = _rpythonic_function_(		"CTX_data_dir_set", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("member",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

CTX_data_type_set = _rpythonic_function_(		"CTX_data_type_set", ctypes.c_void_p, [
	("result",		ctypes.POINTER(bContextDataResult)),
	("C_type",		ctypes.c_short),] )

CTX_data_type_get = _rpythonic_function_(		"CTX_data_type_get", ctypes.c_short, [
	("result",		ctypes.POINTER(bContextDataResult)),] )

CTX_data_equals = _rpythonic_function_(		"CTX_data_equals", ctypes.c_int, [
	("member",		ctypes.POINTER(ctypes.c_char)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

CTX_data_dir = _rpythonic_function_(		"CTX_data_dir", ctypes.c_int, [
	("member",		ctypes.POINTER(ctypes.c_char)),] )

ctx_data_list_count = _rpythonic_function_(		"ctx_data_list_count", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("func",		ctypes.c_void_p),] )

CTX_data_main = _rpythonic_function_(		"CTX_data_main", ctypes.POINTER(Main), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_scene = _rpythonic_function_(		"CTX_data_scene", ctypes.POINTER(Scene), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_tool_settings = _rpythonic_function_(		"CTX_data_tool_settings", ctypes.POINTER(ToolSettings), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_mode_string = _rpythonic_function_(		"CTX_data_mode_string", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_mode_enum = _rpythonic_function_(		"CTX_data_mode_enum", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_main_set = _rpythonic_function_(		"CTX_data_main_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("bmain",		ctypes.POINTER(Main)),] )

CTX_data_scene_set = _rpythonic_function_(		"CTX_data_scene_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("bmain",		ctypes.POINTER(Scene)),] )

CTX_data_selected_editable_objects = _rpythonic_function_(		"CTX_data_selected_editable_objects", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selected_editable_bases = _rpythonic_function_(		"CTX_data_selected_editable_bases", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selected_objects = _rpythonic_function_(		"CTX_data_selected_objects", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selected_bases = _rpythonic_function_(		"CTX_data_selected_bases", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_visible_objects = _rpythonic_function_(		"CTX_data_visible_objects", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_visible_bases = _rpythonic_function_(		"CTX_data_visible_bases", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selectable_objects = _rpythonic_function_(		"CTX_data_selectable_objects", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selectable_bases = _rpythonic_function_(		"CTX_data_selectable_bases", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_active_object = _rpythonic_function_(		"CTX_data_active_object", ctypes.POINTER(Object), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_active_base = _rpythonic_function_(		"CTX_data_active_base", ctypes.POINTER(Base), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_edit_object = _rpythonic_function_(		"CTX_data_edit_object", ctypes.POINTER(Object), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_edit_image = _rpythonic_function_(		"CTX_data_edit_image", ctypes.POINTER(Image), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_edit_text = _rpythonic_function_(		"CTX_data_edit_text", ctypes.POINTER(Text), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_edit_movieclip = _rpythonic_function_(		"CTX_data_edit_movieclip", ctypes.POINTER(MovieClip), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_selected_nodes = _rpythonic_function_(		"CTX_data_selected_nodes", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_active_bone = _rpythonic_function_(		"CTX_data_active_bone", ctypes.POINTER(EditBone), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_selected_bones = _rpythonic_function_(		"CTX_data_selected_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_selected_editable_bones = _rpythonic_function_(		"CTX_data_selected_editable_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_visible_bones = _rpythonic_function_(		"CTX_data_visible_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_editable_bones = _rpythonic_function_(		"CTX_data_editable_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_active_pose_bone = _rpythonic_function_(		"CTX_data_active_pose_bone", ctypes.POINTER(bPoseChannel), [
	("C",		ctypes.POINTER(bContext)),] )

CTX_data_selected_pose_bones = _rpythonic_function_(		"CTX_data_selected_pose_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

CTX_data_visible_pose_bones = _rpythonic_function_(		"CTX_data_visible_pose_bones", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_list",		ctypes.POINTER(ListBase)),] )

wcscpy = _rpythonic_function_(		"wcscpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),] )

wcsncpy = _rpythonic_function_(		"wcsncpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscat = _rpythonic_function_(		"wcscat", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),] )

wcsncat = _rpythonic_function_(		"wcsncat", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscmp = _rpythonic_function_(		"wcscmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),] )

wcsncmp = _rpythonic_function_(		"wcsncmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscasecmp = _rpythonic_function_(		"wcscasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),] )

wcsncasecmp = _rpythonic_function_(		"wcsncasecmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscasecmp_l = _rpythonic_function_(		"wcscasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcsncasecmp_l = _rpythonic_function_(		"wcsncasecmp_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcscoll = _rpythonic_function_(		"wcscoll", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),] )

wcsxfrm = _rpythonic_function_(		"wcsxfrm", ctypes.c_uint, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcscoll_l = _rpythonic_function_(		"wcscoll_l", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcsxfrm_l = _rpythonic_function_(		"wcsxfrm_l", ctypes.c_uint, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcsdup = _rpythonic_function_(		"wcsdup", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),] )

wcschr = _rpythonic_function_(		"wcschr", ctypes.POINTER(ctypes.c_int), [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__wc",		ctypes.c_int),] )

wcsrchr = _rpythonic_function_(		"wcsrchr", ctypes.POINTER(ctypes.c_int), [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__wc",		ctypes.c_int),] )

wcschrnul = _rpythonic_function_(		"wcschrnul", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__wc",		ctypes.c_int),] )

wcscspn = _rpythonic_function_(		"wcscspn", ctypes.c_uint, [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__reject",		ctypes.POINTER(ctypes.c_int)),] )

wcsspn = _rpythonic_function_(		"wcsspn", ctypes.c_uint, [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__accept",		ctypes.POINTER(ctypes.c_int)),] )

wcspbrk = _rpythonic_function_(		"wcspbrk", ctypes.POINTER(ctypes.c_int), [
	("__wcs",		ctypes.POINTER(ctypes.c_int)),
	("__accept",		ctypes.POINTER(ctypes.c_int)),] )

wcsstr = _rpythonic_function_(		"wcsstr", ctypes.POINTER(ctypes.c_int), [
	("__haystack",		ctypes.POINTER(ctypes.c_int)),
	("__needle",		ctypes.POINTER(ctypes.c_int)),] )

wcstok = _rpythonic_function_(		"wcstok", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__delim",		ctypes.POINTER(ctypes.c_int)),
	("__ptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcslen = _rpythonic_function_(		"wcslen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),] )

wcswcs = _rpythonic_function_(		"wcswcs", ctypes.POINTER(ctypes.c_int), [
	("__haystack",		ctypes.POINTER(ctypes.c_int)),
	("__needle",		ctypes.POINTER(ctypes.c_int)),] )

wcsnlen = _rpythonic_function_(		"wcsnlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__maxlen",		ctypes.c_uint),] )

wmemchr = _rpythonic_function_(		"wmemchr", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

wmemcmp = _rpythonic_function_(		"wmemcmp", ctypes.c_int, [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wmemcpy = _rpythonic_function_(		"wmemcpy", ctypes.POINTER(ctypes.c_int), [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wmemmove = _rpythonic_function_(		"wmemmove", ctypes.POINTER(ctypes.c_int), [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wmemset = _rpythonic_function_(		"wmemset", ctypes.POINTER(ctypes.c_int), [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__c",		ctypes.c_int),
	("__n",		ctypes.c_uint),] )

wmempcpy = _rpythonic_function_(		"wmempcpy", ctypes.POINTER(ctypes.c_int), [
	("__s1",		ctypes.POINTER(ctypes.c_int)),
	("__s2",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

btowc = _rpythonic_function_(		"btowc", ctypes.c_uint, [
	("__c",		ctypes.c_int),] )

wctob = _rpythonic_function_(		"wctob", ctypes.c_int, [
	("__c",		ctypes.c_uint),] )

mbsinit = _rpythonic_function_(		"mbsinit", ctypes.c_int, [
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbrtowc = _rpythonic_function_(		"mbrtowc", ctypes.c_uint, [
	("__pwc",		ctypes.POINTER(ctypes.c_int)),
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__p",		ctypes.POINTER(__mbstate_t)),] )

wcrtomb = _rpythonic_function_(		"wcrtomb", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__wc",		ctypes.c_int),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbrlen = _rpythonic_function_(		"mbrlen", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_char)),
	("__n",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbsrtowcs = _rpythonic_function_(		"mbsrtowcs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

wcsrtombs = _rpythonic_function_(		"wcsrtombs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

mbsnrtowcs = _rpythonic_function_(		"mbsnrtowcs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("__nmc",		ctypes.c_uint),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

wcsnrtombs = _rpythonic_function_(		"wcsnrtombs", ctypes.c_uint, [
	("__dst",		ctypes.POINTER(ctypes.c_char)),
	("__src",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__nwc",		ctypes.c_uint),
	("__len",		ctypes.c_uint),
	("__ps",		ctypes.POINTER(__mbstate_t)),] )

wcwidth = _rpythonic_function_(		"wcwidth", ctypes.c_int, [
	("__c",		ctypes.c_int),] )

wcswidth = _rpythonic_function_(		"wcswidth", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

wcstod = _rpythonic_function_(		"wcstod", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcstof = _rpythonic_function_(		"wcstof", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcstold = _rpythonic_function_(		"wcstold", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),] )

wcstol = _rpythonic_function_(		"wcstol", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoul = _rpythonic_function_(		"wcstoul", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoll = _rpythonic_function_(		"wcstoll", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoull = _rpythonic_function_(		"wcstoull", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstoq = _rpythonic_function_(		"wcstoq", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstouq = _rpythonic_function_(		"wcstouq", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),] )

wcstol_l = _rpythonic_function_(		"wcstol_l", ctypes.c_int64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstoul_l = _rpythonic_function_(		"wcstoul_l", ctypes.c_uint64, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstoll_l = _rpythonic_function_(		"wcstoll_l", ctypes.c_longlong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstoull_l = _rpythonic_function_(		"wcstoull_l", ctypes.c_ulonglong, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__base",		ctypes.c_int),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstod_l = _rpythonic_function_(		"wcstod_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstof_l = _rpythonic_function_(		"wcstof_l", ctypes.c_float, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcstold_l = _rpythonic_function_(		"wcstold_l", ctypes.c_double, [
	("__nptr",		ctypes.POINTER(ctypes.c_int)),
	("__endptr",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

wcpcpy = _rpythonic_function_(		"wcpcpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),] )

wcpncpy = _rpythonic_function_(		"wcpncpy", ctypes.POINTER(ctypes.c_int), [
	("__dest",		ctypes.POINTER(ctypes.c_int)),
	("__src",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),] )

open_wmemstream = _rpythonic_function_(		"open_wmemstream", ctypes.POINTER(_IO_FILE), [
	("__bufloc",		ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
	("__sizeloc",		ctypes.POINTER(ctypes.c_uint)),] )

fwide = _rpythonic_function_(		"fwide", ctypes.c_int, [
	("__fp",		ctypes.POINTER(_IO_FILE)),
	("__mode",		ctypes.c_int),] )

fwprintf = _rpythonic_function_(		"fwprintf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

wprintf = _rpythonic_function_(		"wprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

swprintf = _rpythonic_function_(		"swprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

vfwprintf = _rpythonic_function_(		"vfwprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vwprintf = _rpythonic_function_(		"vwprintf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vswprintf = _rpythonic_function_(		"vswprintf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

fwscanf = _rpythonic_function_(		"fwscanf", ctypes.c_int, [
	("__stream",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

wscanf = _rpythonic_function_(		"wscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

swscanf = _rpythonic_function_(		"swscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__format",		ctypes.POINTER(ctypes.c_int)),] )

vfwscanf = _rpythonic_function_(		"vfwscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(_IO_FILE)),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vwscanf = _rpythonic_function_(		"vwscanf", ctypes.c_int, [
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

vswscanf = _rpythonic_function_(		"vswscanf", ctypes.c_int, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__arg",		ctypes.c_char),] )

fgetwc = _rpythonic_function_(		"fgetwc", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwc = _rpythonic_function_(		"getwc", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwchar = _rpythonic_function_(		"getwchar", ctypes.c_uint, [] )

fputwc = _rpythonic_function_(		"fputwc", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwc = _rpythonic_function_(		"putwc", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwchar = _rpythonic_function_(		"putwchar", ctypes.c_uint, [
	("__wc",		ctypes.c_int),] )

fgetws = _rpythonic_function_(		"fgetws", ctypes.POINTER(ctypes.c_int), [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputws = _rpythonic_function_(		"fputws", ctypes.c_int, [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

ungetwc = _rpythonic_function_(		"ungetwc", ctypes.c_uint, [
	("__wc",		ctypes.c_uint),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwc_unlocked = _rpythonic_function_(		"getwc_unlocked", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

getwchar_unlocked = _rpythonic_function_(		"getwchar_unlocked", ctypes.c_uint, [] )

fgetwc_unlocked = _rpythonic_function_(		"fgetwc_unlocked", ctypes.c_uint, [
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputwc_unlocked = _rpythonic_function_(		"fputwc_unlocked", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwc_unlocked = _rpythonic_function_(		"putwc_unlocked", ctypes.c_uint, [
	("__wc",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

putwchar_unlocked = _rpythonic_function_(		"putwchar_unlocked", ctypes.c_uint, [
	("__wc",		ctypes.c_int),] )

fgetws_unlocked = _rpythonic_function_(		"fgetws_unlocked", ctypes.POINTER(ctypes.c_int), [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__n",		ctypes.c_int),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

fputws_unlocked = _rpythonic_function_(		"fputws_unlocked", ctypes.c_int, [
	("__ws",		ctypes.POINTER(ctypes.c_int)),
	("__stream",		ctypes.POINTER(_IO_FILE)),] )

wcsftime = _rpythonic_function_(		"wcsftime", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__tp",		ctypes.POINTER(tm)),] )

wcsftime_l = _rpythonic_function_(		"wcsftime_l", ctypes.c_uint, [
	("__s",		ctypes.POINTER(ctypes.c_int)),
	("__maxsize",		ctypes.c_uint),
	("__format",		ctypes.POINTER(ctypes.c_int)),
	("__tp",		ctypes.POINTER(tm)),
	("__loc",		ctypes.POINTER(__locale_struct)),] )

BKE_font_register_builtin = _rpythonic_function_(		"BKE_font_register_builtin", ctypes.c_void_p, [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),] )

free_vfont = _rpythonic_function_(		"free_vfont", ctypes.c_void_p, [
	("sc",		ctypes.POINTER(VFont)),] )

free_ttfont = _rpythonic_function_(		"free_ttfont", ctypes.c_void_p, [] )

get_builtin_font = _rpythonic_function_(		"get_builtin_font", ctypes.POINTER(VFont), [] )

load_vfont = _rpythonic_function_(		"load_vfont", ctypes.POINTER(VFont), [
	("bmain",		ctypes.POINTER(Main)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

vfont_find_tmpfont = _rpythonic_function_(		"vfont_find_tmpfont", ctypes.POINTER(TmpFont), [
	("vfont",		ctypes.POINTER(VFont)),] )

BKE_text_to_curve = _rpythonic_function_(		"BKE_text_to_curve", ctypes.POINTER(chartrans), [
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("mode",		ctypes.c_int),] )

BKE_font_getselection = _rpythonic_function_(		"BKE_font_getselection", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),
	("start",		ctypes.POINTER(ctypes.c_int)),
	("end",		ctypes.POINTER(ctypes.c_int)),] )

init_def_material = _rpythonic_function_(		"init_def_material", ctypes.c_void_p, [] )

free_material = _rpythonic_function_(		"free_material", ctypes.c_void_p, [
	("sc",		ctypes.POINTER(Material)),] )

test_object_materials = _rpythonic_function_(		"test_object_materials", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

resize_object_material = _rpythonic_function_(		"resize_object_material", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("totcol",		ctypes.c_short),] )

init_material = _rpythonic_function_(		"init_material", ctypes.c_void_p, [
	("ma",		ctypes.POINTER(Material)),] )

add_material_main = _rpythonic_function_(		"add_material_main", ctypes.POINTER(Material), [
	("main",		ctypes.POINTER(Main)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

add_material = _rpythonic_function_(		"add_material", ctypes.POINTER(Material), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

copy_material = _rpythonic_function_(		"copy_material", ctypes.POINTER(Material), [
	("ma",		ctypes.POINTER(Material)),] )

localize_material = _rpythonic_function_(		"localize_material", ctypes.POINTER(Material), [
	("ma",		ctypes.POINTER(Material)),] )

give_node_material = _rpythonic_function_(		"give_node_material", ctypes.POINTER(Material), [
	("ma",		ctypes.POINTER(Material)),] )

make_local_material = _rpythonic_function_(		"make_local_material", ctypes.c_void_p, [
	("ma",		ctypes.POINTER(Material)),] )

extern_local_matarar = _rpythonic_function_(		"extern_local_matarar", ctypes.c_void_p, [
	("matar",		ctypes.POINTER(ctypes.POINTER(Material))),
	("totcol",		ctypes.c_short),] )

automatname = _rpythonic_function_(		"automatname", ctypes.c_void_p, [
	("Material",		ctypes.POINTER(Material)),] )

give_matarar = _rpythonic_function_(		"give_matarar", ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(Material))), [
	("ob",		ctypes.POINTER(Object)),] )

give_totcolp = _rpythonic_function_(		"give_totcolp", ctypes.POINTER(ctypes.c_short), [
	("ob",		ctypes.POINTER(Object)),] )

give_matarar_id = _rpythonic_function_(		"give_matarar_id", ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(Material))), [
	("C_id",		ctypes.POINTER(ID)),] )

give_totcolp_id = _rpythonic_function_(		"give_totcolp_id", ctypes.POINTER(ctypes.c_short), [
	("C_id",		ctypes.POINTER(ID)),] )

give_current_material = _rpythonic_function_(		"give_current_material", ctypes.POINTER(Material), [
	("ob",		ctypes.POINTER(Object)),
	("act",		ctypes.c_short),] )

material_from = _rpythonic_function_(		"material_from", ctypes.POINTER(ID), [
	("ob",		ctypes.POINTER(Object)),
	("act",		ctypes.c_short),] )

assign_material_id = _rpythonic_function_(		"assign_material_id", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("ma",		ctypes.POINTER(Material)),
	("act",		ctypes.c_short),] )

assign_material = _rpythonic_function_(		"assign_material", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("ma",		ctypes.POINTER(Material)),
	("act",		ctypes.c_short),] )

assign_matarar = _rpythonic_function_(		"assign_matarar", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("matar",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(Material)))),
	("totcol",		ctypes.c_short),] )

find_material_index = _rpythonic_function_(		"find_material_index", ctypes.c_short, [
	("ob",		ctypes.POINTER(Object)),
	("ma",		ctypes.POINTER(Material)),] )

object_remove_material_slot = _rpythonic_function_(		"object_remove_material_slot", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),] )

material_append_id = _rpythonic_function_(		"material_append_id", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("ma",		ctypes.POINTER(Material)),] )

material_pop_id = _rpythonic_function_(		"material_pop_id", ctypes.POINTER(Material), [
	("C_id",		ctypes.POINTER(ID)),
	("index",		ctypes.c_int),
	("remove_material_slot",		ctypes.c_int),] )

init_render_material = _rpythonic_function_(		"init_render_material", ctypes.c_void_p, [
	("Material",		ctypes.POINTER(Material)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_float)),] )

init_render_materials = _rpythonic_function_(		"init_render_materials", ctypes.c_void_p, [
	("Main",		ctypes.POINTER(Main)),
	("none",		ctypes.c_int),
	("none",		ctypes.POINTER(ctypes.c_float)),] )

end_render_material = _rpythonic_function_(		"end_render_material", ctypes.c_void_p, [
	("Material",		ctypes.POINTER(Material)),] )

end_render_materials = _rpythonic_function_(		"end_render_materials", ctypes.c_void_p, [
	("Main",		ctypes.POINTER(Main)),] )

material_in_material = _rpythonic_function_(		"material_in_material", ctypes.c_int, [
	("parmat",		ctypes.POINTER(Material)),
	("mat",		ctypes.POINTER(Material)),] )

ramp_blend = _rpythonic_function_(		"ramp_blend", ctypes.c_void_p, [
	("C_type",		ctypes.c_int),
	("r_col",		( ctypes.c_float * 3 )),
	("fac",		ctypes.c_float),
	("col",		( ctypes.c_float * 3 )),] )

clear_matcopybuf = _rpythonic_function_(		"clear_matcopybuf", ctypes.c_void_p, [] )

free_matcopybuf = _rpythonic_function_(		"free_matcopybuf", ctypes.c_void_p, [] )

copy_matcopybuf = _rpythonic_function_(		"copy_matcopybuf", ctypes.c_void_p, [
	("ma",		ctypes.POINTER(Material)),] )

paste_matcopybuf = _rpythonic_function_(		"paste_matcopybuf", ctypes.c_void_p, [
	("ma",		ctypes.POINTER(Material)),] )

clear_mat_mtex_copybuf = _rpythonic_function_(		"clear_mat_mtex_copybuf", ctypes.c_void_p, [] )

copy_mat_mtex_copybuf = _rpythonic_function_(		"copy_mat_mtex_copybuf", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

paste_mat_mtex_copybuf = _rpythonic_function_(		"paste_mat_mtex_copybuf", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

do_version_tface = _rpythonic_function_(		"do_version_tface", ctypes.c_int, [
	("main",		ctypes.POINTER(Main)),
	("fileload",		ctypes.c_int),] )

newPackedFile = _rpythonic_function_(		"newPackedFile", ctypes.POINTER(PackedFile), [
	("reports",		ctypes.POINTER(ReportList)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("relabase",		ctypes.POINTER(ctypes.c_char)),] )

newPackedFileMemory = _rpythonic_function_(		"newPackedFileMemory", ctypes.POINTER(PackedFile), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("memlen",		ctypes.c_int),] )

packAll = _rpythonic_function_(		"packAll", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("reports",		ctypes.POINTER(ReportList)),] )

unpackFile = _rpythonic_function_(		"unpackFile", ctypes.POINTER(ctypes.c_char), [
	("reports",		ctypes.POINTER(ReportList)),
	("abs_name",		ctypes.POINTER(ctypes.c_char)),
	("local_name",		ctypes.POINTER(ctypes.c_char)),
	("pf",		ctypes.POINTER(PackedFile)),
	("how",		ctypes.c_int),] )

unpackVFont = _rpythonic_function_(		"unpackVFont", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),
	("vfont",		ctypes.POINTER(VFont)),
	("how",		ctypes.c_int),] )

unpackSound = _rpythonic_function_(		"unpackSound", ctypes.c_int, [
	("bmain",		ctypes.POINTER(Main)),
	("reports",		ctypes.POINTER(ReportList)),
	("sound",		ctypes.POINTER(bSound)),
	("how",		ctypes.c_int),] )

unpackImage = _rpythonic_function_(		"unpackImage", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),
	("ima",		ctypes.POINTER(Image)),
	("how",		ctypes.c_int),] )

unpackAll = _rpythonic_function_(		"unpackAll", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("reports",		ctypes.POINTER(ReportList)),
	("how",		ctypes.c_int),] )

writePackedFile = _rpythonic_function_(		"writePackedFile", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("pf",		ctypes.POINTER(PackedFile)),
	("guimode",		ctypes.c_int),] )

freePackedFile = _rpythonic_function_(		"freePackedFile", ctypes.c_void_p, [
	("pf",		ctypes.POINTER(PackedFile)),] )

countPackedFiles = _rpythonic_function_(		"countPackedFiles", ctypes.c_int, [
	("bmain",		ctypes.POINTER(Main)),] )

checkPackedFile = _rpythonic_function_(		"checkPackedFile", ctypes.c_int, [
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("pf",		ctypes.POINTER(PackedFile)),] )

seekPackedFile = _rpythonic_function_(		"seekPackedFile", ctypes.c_int, [
	("pf",		ctypes.POINTER(PackedFile)),
	("offset",		ctypes.c_int),
	("whence",		ctypes.c_int),] )

rewindPackedFile = _rpythonic_function_(		"rewindPackedFile", ctypes.c_void_p, [
	("pf",		ctypes.POINTER(PackedFile)),] )

readPackedFile = _rpythonic_function_(		"readPackedFile", ctypes.c_int, [
	("pf",		ctypes.POINTER(PackedFile)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("size",		ctypes.c_int),] )

_setlooper_base_step = _rpythonic_function_(		"_setlooper_base_step", ctypes.POINTER(Base), [
	("sce_iter",		ctypes.POINTER(ctypes.POINTER(Scene))),
	("base",		ctypes.POINTER(Base)),] )

free_avicodecdata = _rpythonic_function_(		"free_avicodecdata", ctypes.c_void_p, [
	("acd",		ctypes.POINTER(AviCodecData)),] )

free_qtcodecdata = _rpythonic_function_(		"free_qtcodecdata", ctypes.c_void_p, [
	("acd",		ctypes.POINTER(QuicktimeCodecData)),] )

free_scene = _rpythonic_function_(		"free_scene", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),] )

add_scene = _rpythonic_function_(		"add_scene", ctypes.POINTER(Scene), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

object_in_scene = _rpythonic_function_(		"object_in_scene", ctypes.POINTER(Base), [
	("ob",		ctypes.POINTER(Object)),
	("sce",		ctypes.POINTER(Scene)),] )

set_scene_bg = _rpythonic_function_(		"set_scene_bg", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),] )

set_scene_name = _rpythonic_function_(		"set_scene_name", ctypes.POINTER(Scene), [
	("bmain",		ctypes.POINTER(Main)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

copy_scene = _rpythonic_function_(		"copy_scene", ctypes.POINTER(Scene), [
	("sce",		ctypes.POINTER(Scene)),
	("C_type",		ctypes.c_int),] )

unlink_scene = _rpythonic_function_(		"unlink_scene", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("newsce",		ctypes.POINTER(Scene)),] )

next_object = _rpythonic_function_(		"next_object", ctypes.c_int, [
	("scene",		ctypes.POINTER(ctypes.POINTER(Scene))),
	("val",		ctypes.c_int),
	("base",		ctypes.POINTER(ctypes.POINTER(Base))),
	("ob",		ctypes.POINTER(ctypes.POINTER(Object))),] )

scene_find_camera = _rpythonic_function_(		"scene_find_camera", ctypes.POINTER(Object), [
	("sc",		ctypes.POINTER(Scene)),] )

scene_camera_switch_find = _rpythonic_function_(		"scene_camera_switch_find", ctypes.POINTER(Object), [
	("scene",		ctypes.POINTER(Scene)),] )

scene_camera_switch_update = _rpythonic_function_(		"scene_camera_switch_update", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),] )

scene_find_marker_name = _rpythonic_function_(		"scene_find_marker_name", ctypes.POINTER(ctypes.c_char), [
	("scene",		ctypes.POINTER(Scene)),
	("frame",		ctypes.c_int),] )

scene_find_last_marker_name = _rpythonic_function_(		"scene_find_last_marker_name", ctypes.POINTER(ctypes.c_char), [
	("scene",		ctypes.POINTER(Scene)),
	("frame",		ctypes.c_int),] )

scene_add_base = _rpythonic_function_(		"scene_add_base", ctypes.POINTER(Base), [
	("sce",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),] )

scene_deselect_all = _rpythonic_function_(		"scene_deselect_all", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),] )

scene_select_base = _rpythonic_function_(		"scene_select_base", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),
	("selbase",		ctypes.POINTER(Base)),] )

scene_check_setscene = _rpythonic_function_(		"scene_check_setscene", ctypes.c_int, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),] )

BKE_curframe = _rpythonic_function_(		"BKE_curframe", ctypes.c_float, [
	("scene",		ctypes.POINTER(Scene)),] )

BKE_frame_to_ctime = _rpythonic_function_(		"BKE_frame_to_ctime", ctypes.c_float, [
	("scene",		ctypes.POINTER(Scene)),
	("frame",		ctypes.c_float),] )

scene_update_tagged = _rpythonic_function_(		"scene_update_tagged", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),] )

scene_update_for_newframe = _rpythonic_function_(		"scene_update_for_newframe", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("lay",		ctypes.c_uint),] )

scene_add_render_layer = _rpythonic_function_(		"scene_add_render_layer", ctypes.POINTER(SceneRenderLayer), [
	("sce",		ctypes.POINTER(Scene)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

scene_remove_render_layer = _rpythonic_function_(		"scene_remove_render_layer", ctypes.c_int, [
	("main",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("srl",		ctypes.POINTER(SceneRenderLayer)),] )

get_render_subsurf_level = _rpythonic_function_(		"get_render_subsurf_level", ctypes.c_int, [
	("r",		ctypes.POINTER(RenderData)),
	("level",		ctypes.c_int),] )

get_render_child_particle_number = _rpythonic_function_(		"get_render_child_particle_number", ctypes.c_int, [
	("r",		ctypes.POINTER(RenderData)),
	("num",		ctypes.c_int),] )

get_render_shadow_samples = _rpythonic_function_(		"get_render_shadow_samples", ctypes.c_int, [
	("r",		ctypes.POINTER(RenderData)),
	("samples",		ctypes.c_int),] )

get_render_aosss_error = _rpythonic_function_(		"get_render_aosss_error", ctypes.c_float, [
	("r",		ctypes.POINTER(RenderData)),
	("error",		ctypes.c_float),] )

scene_use_new_shading_nodes = _rpythonic_function_(		"scene_use_new_shading_nodes", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),] )

NodeSocketButtonFunction = _rpythonic_function_(		"NodeSocketButtonFunction", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),
	("sock",		ctypes.POINTER(bNodeSocket)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("width",		ctypes.c_int),] )

drawfunc = _rpythonic_function_(		"drawfunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),
	("snode",		ctypes.POINTER(SpaceNode)),
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

drawupdatefunc = _rpythonic_function_(		"drawupdatefunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

uifunc = _rpythonic_function_(		"uifunc", ctypes.c_void_p, [
	("uiLayout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uifuncbut = _rpythonic_function_(		"uifuncbut", ctypes.c_void_p, [
	("uiLayout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

labelfunc = _rpythonic_function_(		"labelfunc", ctypes.POINTER(ctypes.c_char), [
	("bNode",		ctypes.POINTER(bNode)),] )

resize_area_func = _rpythonic_function_(		"resize_area_func", ctypes.c_int, [
	("node",		ctypes.POINTER(bNode)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

updatefunc = _rpythonic_function_(		"updatefunc", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

verifyfunc = _rpythonic_function_(		"verifyfunc", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),
	("C_id",		ctypes.POINTER(ID)),] )

initfunc = _rpythonic_function_(		"initfunc", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),
	("ntemp",		ctypes.POINTER(bNodeTemplate)),] )

freestoragefunc = _rpythonic_function_(		"freestoragefunc", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),] )

copystoragefunc = _rpythonic_function_(		"copystoragefunc", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),
	("target",		ctypes.POINTER(bNode)),] )

templatefunc = _rpythonic_function_(		"templatefunc", bNodeTemplate, [
	("bNode",		ctypes.POINTER(bNode)),] )

validfunc = _rpythonic_function_(		"validfunc", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("ntemp",		ctypes.POINTER(bNodeTemplate)),] )

inittreefunc = _rpythonic_function_(		"inittreefunc", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

updatetreefunc = _rpythonic_function_(		"updatetreefunc", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

group_edit_get = _rpythonic_function_(		"group_edit_get", ctypes.POINTER(bNodeTree), [
	("node",		ctypes.POINTER(bNode)),] )

group_edit_set = _rpythonic_function_(		"group_edit_set", ctypes.POINTER(bNodeTree), [
	("node",		ctypes.POINTER(bNode)),
	("edit",		ctypes.c_int),] )

group_edit_clear = _rpythonic_function_(		"group_edit_clear", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),] )

initexecfunc = _rpythonic_function_(		"initexecfunc", ctypes.POINTER(ctypes.c_void_p), [
	("node",		ctypes.POINTER(bNode)),] )

freeexecfunc = _rpythonic_function_(		"freeexecfunc", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),
	("nodedata",		ctypes.POINTER(ctypes.c_void_p)),] )

execfunc = _rpythonic_function_(		"execfunc", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("bNode",		ctypes.POINTER(bNode)),
	("bNodeStack",		ctypes.POINTER(ctypes.POINTER(bNodeStack))),
	("bNodeStack",		ctypes.POINTER(ctypes.POINTER(bNodeStack))),] )

newexecfunc = _rpythonic_function_(		"newexecfunc", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("thread",		ctypes.c_int),
	("bNode",		ctypes.POINTER(bNode)),
	("nodedata",		ctypes.POINTER(ctypes.c_void_p)),
	("bNodeStack",		ctypes.POINTER(ctypes.POINTER(bNodeStack))),
	("bNodeStack",		ctypes.POINTER(ctypes.POINTER(bNodeStack))),] )

mutefunc = _rpythonic_function_(		"mutefunc", ctypes.c_void_p, [
	("data",		ctypes.POINTER(ctypes.c_void_p)),
	("thread",		ctypes.c_int),
	("bNode",		ctypes.POINTER(bNode)),
	("nodedata",		ctypes.POINTER(ctypes.c_void_p)),
	("bNodeStack",		ctypes.POINTER(ctypes.POINTER(bNodeStack))),
	("bNodeStack",		ctypes.POINTER(ctypes.POINTER(bNodeStack))),] )

mutelinksfunc = _rpythonic_function_(		"mutelinksfunc", ListBase, [
	("bNodeTree",		ctypes.POINTER(bNodeTree)),
	("bNode",		ctypes.POINTER(bNode)),
	("bNodeStack",		ctypes.POINTER(ctypes.POINTER(bNodeStack))),
	("bNodeStack",		ctypes.POINTER(ctypes.POINTER(bNodeStack))),
	("GPUNodeStack",		ctypes.POINTER(GPUNodeStack)),
	("GPUNodeStack",		ctypes.POINTER(GPUNodeStack)),] )

gpufunc = _rpythonic_function_(		"gpufunc", ctypes.c_int, [
	("mat",		ctypes.POINTER(GPUMaterial)),
	("node",		ctypes.POINTER(bNode)),
	("C_in",		ctypes.POINTER(GPUNodeStack)),
	("out",		ctypes.POINTER(GPUNodeStack)),] )

gpuextfunc = _rpythonic_function_(		"gpuextfunc", ctypes.c_int, [
	("mat",		ctypes.POINTER(GPUMaterial)),
	("node",		ctypes.POINTER(bNode)),
	("nodedata",		ctypes.POINTER(ctypes.c_void_p)),
	("C_in",		ctypes.POINTER(GPUNodeStack)),
	("out",		ctypes.POINTER(GPUNodeStack)),] )

gpumutefunc = _rpythonic_function_(		"gpumutefunc", ctypes.c_int, [
	("GPUMaterial",		ctypes.POINTER(GPUMaterial)),
	("bNode",		ctypes.POINTER(bNode)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("GPUNodeStack",		ctypes.POINTER(GPUNodeStack)),
	("GPUNodeStack",		ctypes.POINTER(GPUNodeStack)),] )

bNodeTreeCallback = _rpythonic_function_(		"bNodeTreeCallback", ctypes.c_void_p, [
	("calldata",		ctypes.POINTER(ctypes.c_void_p)),
	("owner_id",		ctypes.POINTER(ID)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

bNodeClassCallback = _rpythonic_function_(		"bNodeClassCallback", ctypes.c_void_p, [
	("calldata",		ctypes.POINTER(ctypes.c_void_p)),
	("nclass",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

free_cache = _rpythonic_function_(		"free_cache", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

free_node_cache = _rpythonic_function_(		"free_node_cache", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

foreach_nodetree = _rpythonic_function_(		"foreach_nodetree", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),
	("calldata",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ID),ctypes.POINTER(bNodeTree),)),] )

foreach_nodeclass = _rpythonic_function_(		"foreach_nodeclass", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("calldata",		ctypes.POINTER(ctypes.c_void_p)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,ctypes.POINTER(ctypes.c_char),)),] )

localize = _rpythonic_function_(		"localize", ctypes.c_void_p, [
	("localtree",		ctypes.POINTER(bNodeTree)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

local_sync = _rpythonic_function_(		"local_sync", ctypes.c_void_p, [
	("localtree",		ctypes.POINTER(bNodeTree)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

local_merge = _rpythonic_function_(		"local_merge", ctypes.c_void_p, [
	("localtree",		ctypes.POINTER(bNodeTree)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

update = _rpythonic_function_(		"update", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

update_node = _rpythonic_function_(		"update_node", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

validate_link = _rpythonic_function_(		"validate_link", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("link",		ctypes.POINTER(bNodeLink)),] )

ntreeGetType = _rpythonic_function_(		"ntreeGetType", ctypes.POINTER(bNodeTreeType), [
	("C_type",		ctypes.c_int),] )

ntreeGetNodeType = _rpythonic_function_(		"ntreeGetNodeType", ctypes.POINTER(bNodeType), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeGetSocketType = _rpythonic_function_(		"ntreeGetSocketType", ctypes.POINTER(bNodeSocketType), [
	("C_type",		ctypes.c_int),] )

ntreeAddTree = _rpythonic_function_(		"ntreeAddTree", ctypes.POINTER(bNodeTree), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("nodetype",		ctypes.c_int),] )

ntreeInitTypes = _rpythonic_function_(		"ntreeInitTypes", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeFreeTree = _rpythonic_function_(		"ntreeFreeTree", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeCopyTree = _rpythonic_function_(		"ntreeCopyTree", ctypes.POINTER(bNodeTree), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeSwitchID = _rpythonic_function_(		"ntreeSwitchID", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("sce_from",		ctypes.POINTER(ID)),
	("sce_to",		ctypes.POINTER(ID)),] )

ntreeMakeLocal = _rpythonic_function_(		"ntreeMakeLocal", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeHasType = _rpythonic_function_(		"ntreeHasType", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("C_type",		ctypes.c_int),] )

ntreeUpdateTree = _rpythonic_function_(		"ntreeUpdateTree", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeVerifyNodes = _rpythonic_function_(		"ntreeVerifyNodes", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),
	("C_id",		ctypes.POINTER(ID)),] )

ntreeGetDependencyList = _rpythonic_function_(		"ntreeGetDependencyList", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("deplist",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(bNode)))),
	("totnodes",		ctypes.POINTER(ctypes.c_int)),] )

ntreeSetOutput = _rpythonic_function_(		"ntreeSetOutput", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeInitPreview = _rpythonic_function_(		"ntreeInitPreview", ctypes.c_void_p, [
	("bNodeTree",		ctypes.POINTER(bNodeTree)),
	("xsize",		ctypes.c_int),
	("ysize",		ctypes.c_int),] )

ntreeClearPreview = _rpythonic_function_(		"ntreeClearPreview", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeFreeCache = _rpythonic_function_(		"ntreeFreeCache", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeNodeExists = _rpythonic_function_(		"ntreeNodeExists", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("testnode",		ctypes.POINTER(bNode)),] )

ntreeOutputExists = _rpythonic_function_(		"ntreeOutputExists", ctypes.c_int, [
	("node",		ctypes.POINTER(bNode)),
	("testsock",		ctypes.POINTER(bNodeSocket)),] )

ntreeLocalize = _rpythonic_function_(		"ntreeLocalize", ctypes.POINTER(bNodeTree), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeLocalSync = _rpythonic_function_(		"ntreeLocalSync", ctypes.c_void_p, [
	("localtree",		ctypes.POINTER(bNodeTree)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeLocalMerge = _rpythonic_function_(		"ntreeLocalMerge", ctypes.c_void_p, [
	("localtree",		ctypes.POINTER(bNodeTree)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

nodeAddSocket = _rpythonic_function_(		"nodeAddSocket", ctypes.POINTER(bNodeSocket), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),
	("in_out",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),] )

nodeInsertSocket = _rpythonic_function_(		"nodeInsertSocket", ctypes.POINTER(bNodeSocket), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),
	("in_out",		ctypes.c_int),
	("next_sock",		ctypes.POINTER(bNodeSocket)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),] )

nodeRemoveSocket = _rpythonic_function_(		"nodeRemoveSocket", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),
	("sock",		ctypes.POINTER(bNodeSocket)),] )

nodeRemoveAllSockets = _rpythonic_function_(		"nodeRemoveAllSockets", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeAddToPreview = _rpythonic_function_(		"nodeAddToPreview", ctypes.c_void_p, [
	("bNode",		ctypes.POINTER(bNode)),
	("none",		ctypes.POINTER(ctypes.c_float)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),] )

nodeAddNode = _rpythonic_function_(		"nodeAddNode", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("ntemp",		ctypes.POINTER(bNodeTemplate)),] )

nodeUnlinkNode = _rpythonic_function_(		"nodeUnlinkNode", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeUniqueName = _rpythonic_function_(		"nodeUniqueName", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeRegisterType = _rpythonic_function_(		"nodeRegisterType", ctypes.c_void_p, [
	("ttype",		ctypes.POINTER(bNodeTreeType)),
	("ntype",		ctypes.POINTER(bNodeType)),] )

nodeMakeDynamicType = _rpythonic_function_(		"nodeMakeDynamicType", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),] )

nodeDynamicUnlinkText = _rpythonic_function_(		"nodeDynamicUnlinkText", ctypes.c_int, [
	("txtid",		ctypes.POINTER(ID)),] )

nodeFreeNode = _rpythonic_function_(		"nodeFreeNode", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeCopyNode = _rpythonic_function_(		"nodeCopyNode", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeAddLink = _rpythonic_function_(		"nodeAddLink", ctypes.POINTER(bNodeLink), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("fromnode",		ctypes.POINTER(bNode)),
	("fromsock",		ctypes.POINTER(bNodeSocket)),
	("tonode",		ctypes.POINTER(bNode)),
	("tosock",		ctypes.POINTER(bNodeSocket)),] )

nodeRemLink = _rpythonic_function_(		"nodeRemLink", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("link",		ctypes.POINTER(bNodeLink)),] )

nodeRemSocketLinks = _rpythonic_function_(		"nodeRemSocketLinks", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("sock",		ctypes.POINTER(bNodeSocket)),] )

nodeSpaceCoords = _rpythonic_function_(		"nodeSpaceCoords", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),
	("locx",		ctypes.POINTER(ctypes.c_float)),
	("locy",		ctypes.POINTER(ctypes.c_float)),] )

nodeAttachNode = _rpythonic_function_(		"nodeAttachNode", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),
	("parent",		ctypes.POINTER(bNode)),] )

nodeDetachNode = _rpythonic_function_(		"nodeDetachNode", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),] )

nodeFindNodebyName = _rpythonic_function_(		"nodeFindNodebyName", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

nodeFindNode = _rpythonic_function_(		"nodeFindNode", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("sock",		ctypes.POINTER(bNodeSocket)),
	("nodep",		ctypes.POINTER(ctypes.POINTER(bNode))),
	("sockindex",		ctypes.POINTER(ctypes.c_int)),
	("in_out",		ctypes.POINTER(ctypes.c_int)),] )

nodeFindLink = _rpythonic_function_(		"nodeFindLink", ctypes.POINTER(bNodeLink), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("from",		ctypes.POINTER(bNodeSocket)),
	("to",		ctypes.POINTER(bNodeSocket)),] )

nodeCountSocketLinks = _rpythonic_function_(		"nodeCountSocketLinks", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("sock",		ctypes.POINTER(bNodeSocket)),] )

nodeSetActive = _rpythonic_function_(		"nodeSetActive", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeGetActive = _rpythonic_function_(		"nodeGetActive", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

nodeGetActiveID = _rpythonic_function_(		"nodeGetActiveID", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("idtype",		ctypes.c_short),] )

nodeSetActiveID = _rpythonic_function_(		"nodeSetActiveID", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("idtype",		ctypes.c_short),
	("C_id",		ctypes.POINTER(ID)),] )

nodeClearActiveID = _rpythonic_function_(		"nodeClearActiveID", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("idtype",		ctypes.c_short),] )

nodeGetActiveTexture = _rpythonic_function_(		"nodeGetActiveTexture", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

nodeUpdate = _rpythonic_function_(		"nodeUpdate", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

nodeUpdateID = _rpythonic_function_(		"nodeUpdateID", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("C_id",		ctypes.POINTER(ID)),] )

nodeFreePreview = _rpythonic_function_(		"nodeFreePreview", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),] )

nodeMakeTemplate = _rpythonic_function_(		"nodeMakeTemplate", bNodeTemplate, [
	("node",		ctypes.POINTER(bNode)),] )

nodeValid = _rpythonic_function_(		"nodeValid", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("ntemp",		ctypes.POINTER(bNodeTemplate)),] )

nodeLabel = _rpythonic_function_(		"nodeLabel", ctypes.POINTER(ctypes.c_char), [
	("node",		ctypes.POINTER(bNode)),] )

nodeGroupEditGet = _rpythonic_function_(		"nodeGroupEditGet", ctypes.POINTER(bNodeTree), [
	("node",		ctypes.POINTER(bNode)),] )

nodeGroupEditSet = _rpythonic_function_(		"nodeGroupEditSet", ctypes.POINTER(bNodeTree), [
	("node",		ctypes.POINTER(bNode)),
	("edit",		ctypes.c_int),] )

nodeGroupEditClear = _rpythonic_function_(		"nodeGroupEditClear", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),] )

node_type_base = _rpythonic_function_(		"node_type_base", ctypes.c_void_p, [
	("ttype",		ctypes.POINTER(bNodeTreeType)),
	("ntype",		ctypes.POINTER(bNodeType)),
	("C_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("nclass",		ctypes.c_short),
	("flag",		ctypes.c_short),] )

node_type_socket_templates = _rpythonic_function_(		"node_type_socket_templates", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("inputs",		ctypes.POINTER(bNodeSocketTemplate)),
	("outputs",		ctypes.POINTER(bNodeSocketTemplate)),] )

node_type_size = _rpythonic_function_(		"node_type_size", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("width",		ctypes.c_int),
	("minwidth",		ctypes.c_int),
	("maxwidth",		ctypes.c_int),] )

node_type_init = _rpythonic_function_(		"node_type_init", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("initfunc",		ctypes.c_void_p),] )

node_type_valid = _rpythonic_function_(		"node_type_valid", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("validfunc",		ctypes.c_void_p),] )

node_type_storage = _rpythonic_function_(		"node_type_storage", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("storagename",		ctypes.POINTER(ctypes.c_char)),
	("freestoragefunc",		ctypes.c_void_p),
	("copystoragefunc",		ctypes.c_void_p),] )

node_type_label = _rpythonic_function_(		"node_type_label", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("labelfunc",		ctypes.POINTER(ctypes.c_void_p)),] )

node_type_template = _rpythonic_function_(		"node_type_template", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("templatefunc",		ctypes.c_void_p),] )

node_type_update = _rpythonic_function_(		"node_type_update", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("updatefunc",		ctypes.c_void_p),
	("verifyfunc",		ctypes.c_void_p),] )

node_type_tree = _rpythonic_function_(		"node_type_tree", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("inittreefunc",		ctypes.c_void_p),
	("updatetreefunc",		ctypes.c_void_p),] )

node_type_group_edit = _rpythonic_function_(		"node_type_group_edit", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("group_edit_get",		ctypes.POINTER(ctypes.c_void_p)),
	("group_edit_set",		ctypes.POINTER(ctypes.c_void_p)),
	("group_edit_clear",		ctypes.c_void_p),] )

node_type_exec = _rpythonic_function_(		"node_type_exec", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("execfunc",		ctypes.c_void_p),] )

node_type_exec_new = _rpythonic_function_(		"node_type_exec_new", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("initexecfunc",		ctypes.POINTER(ctypes.c_void_p)),
	("freeexecfunc",		ctypes.c_void_p),
	("newexecfunc",		ctypes.c_void_p),] )

node_type_mute = _rpythonic_function_(		"node_type_mute", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("mutefunc",		ctypes.c_void_p),
	("mutelinksfunc",		ctypes.c_void_p),] )

node_type_gpu = _rpythonic_function_(		"node_type_gpu", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("gpufunc",		ctypes.c_void_p),] )

node_type_gpu_ext = _rpythonic_function_(		"node_type_gpu_ext", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("gpuextfunc",		ctypes.c_void_p),] )

node_type_gpu_mute = _rpythonic_function_(		"node_type_gpu_mute", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("gpumutefunc",		ctypes.c_void_p),] )

node_type_compatibility = _rpythonic_function_(		"node_type_compatibility", ctypes.c_void_p, [
	("ntype",		ctypes.POINTER(bNodeType)),
	("compatibility",		ctypes.c_short),] )

node_group_find_input = _rpythonic_function_(		"node_group_find_input", ctypes.POINTER(bNodeSocket), [
	("gnode",		ctypes.POINTER(bNode)),
	("gsock",		ctypes.POINTER(bNodeSocket)),] )

node_group_find_output = _rpythonic_function_(		"node_group_find_output", ctypes.POINTER(bNodeSocket), [
	("gnode",		ctypes.POINTER(bNode)),
	("gsock",		ctypes.POINTER(bNodeSocket)),] )

node_group_add_socket = _rpythonic_function_(		"node_group_add_socket", ctypes.POINTER(bNodeSocket), [
	("ngroup",		ctypes.POINTER(bNodeTree)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("in_out",		ctypes.c_int),] )

node_group_expose_socket = _rpythonic_function_(		"node_group_expose_socket", ctypes.POINTER(bNodeSocket), [
	("ngroup",		ctypes.POINTER(bNodeTree)),
	("sock",		ctypes.POINTER(bNodeSocket)),
	("in_out",		ctypes.c_int),] )

node_group_expose_all_sockets = _rpythonic_function_(		"node_group_expose_all_sockets", ctypes.c_void_p, [
	("ngroup",		ctypes.POINTER(bNodeTree)),] )

node_group_remove_socket = _rpythonic_function_(		"node_group_remove_socket", ctypes.c_void_p, [
	("ngroup",		ctypes.POINTER(bNodeTree)),
	("gsock",		ctypes.POINTER(bNodeSocket)),
	("in_out",		ctypes.c_int),] )

node_group_make_from_selected = _rpythonic_function_(		"node_group_make_from_selected", ctypes.POINTER(bNode), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

node_group_ungroup = _rpythonic_function_(		"node_group_ungroup", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("gnode",		ctypes.POINTER(bNode)),] )

register_node_type_frame = _rpythonic_function_(		"register_node_type_frame", ctypes.c_void_p, [
	("ttype",		ctypes.POINTER(bNodeTreeType)),] )

ntreeShaderBeginExecTree = _rpythonic_function_(		"ntreeShaderBeginExecTree", ctypes.POINTER(bNodeTreeExec), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("use_tree_data",		ctypes.c_int),] )

ntreeShaderEndExecTree = _rpythonic_function_(		"ntreeShaderEndExecTree", ctypes.c_void_p, [
	("C_exec",		ctypes.POINTER(bNodeTreeExec)),
	("use_tree_data",		ctypes.c_int),] )

ntreeShaderExecTree = _rpythonic_function_(		"ntreeShaderExecTree", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("shi",		ctypes.POINTER(ShadeInput)),
	("shr",		ctypes.POINTER(ShadeResult)),] )

ntreeShaderGetTexcoMode = _rpythonic_function_(		"ntreeShaderGetTexcoMode", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("osa",		ctypes.c_int),
	("texco",		ctypes.POINTER(ctypes.c_short)),
	("mode",		ctypes.POINTER(ctypes.c_int)),] )

nodeShaderSynchronizeID = _rpythonic_function_(		"nodeShaderSynchronizeID", ctypes.c_void_p, [
	("node",		ctypes.POINTER(bNode)),
	("copyto",		ctypes.c_int),] )

node_shader_lamp_loop = _rpythonic_function_(		"node_shader_lamp_loop", ctypes.c_void_p, [
	("ShadeInput",		ctypes.POINTER(ShadeInput)),
	("ShadeResult",		ctypes.POINTER(ShadeResult)),] )

set_node_shader_lamp_loop = _rpythonic_function_(		"set_node_shader_lamp_loop", ctypes.c_void_p, [
	("lamp_loop_func",		ctypes.c_void_p),] )

lamp_loop_func = _rpythonic_function_(		"lamp_loop_func", ctypes.c_void_p, [
	("ShadeInput",		ctypes.POINTER(ShadeInput)),
	("ShadeResult",		ctypes.POINTER(ShadeResult)),] )

ntreeGPUMaterialNodes = _rpythonic_function_(		"ntreeGPUMaterialNodes", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("mat",		ctypes.POINTER(GPUMaterial)),] )

ntreeCompositBeginExecTree = _rpythonic_function_(		"ntreeCompositBeginExecTree", ctypes.POINTER(bNodeTreeExec), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("use_tree_data",		ctypes.c_int),] )

ntreeCompositEndExecTree = _rpythonic_function_(		"ntreeCompositEndExecTree", ctypes.c_void_p, [
	("C_exec",		ctypes.POINTER(bNodeTreeExec)),
	("use_tree_data",		ctypes.c_int),] )

ntreeCompositExecTree = _rpythonic_function_(		"ntreeCompositExecTree", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("rd",		ctypes.POINTER(RenderData)),
	("do_previews",		ctypes.c_int),] )

ntreeCompositTagRender = _rpythonic_function_(		"ntreeCompositTagRender", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),] )

ntreeCompositTagAnimated = _rpythonic_function_(		"ntreeCompositTagAnimated", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeCompositTagGenerators = _rpythonic_function_(		"ntreeCompositTagGenerators", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeCompositForceHidden = _rpythonic_function_(		"ntreeCompositForceHidden", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("scene",		ctypes.POINTER(Scene)),] )

ntreeCompositClearTags = _rpythonic_function_(		"ntreeCompositClearTags", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeTexTagAnimated = _rpythonic_function_(		"ntreeTexTagAnimated", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeTexSetPreviewFlag = _rpythonic_function_(		"ntreeTexSetPreviewFlag", ctypes.c_void_p, [
	("none",		ctypes.c_int),] )

ntreeTexCheckCyclics = _rpythonic_function_(		"ntreeTexCheckCyclics", ctypes.c_void_p, [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeTexOutputMenu = _rpythonic_function_(		"ntreeTexOutputMenu", ctypes.POINTER(ctypes.c_char), [
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ntreeTexBeginExecTree = _rpythonic_function_(		"ntreeTexBeginExecTree", ctypes.POINTER(bNodeTreeExec), [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("use_tree_data",		ctypes.c_int),] )

ntreeTexEndExecTree = _rpythonic_function_(		"ntreeTexEndExecTree", ctypes.c_void_p, [
	("C_exec",		ctypes.POINTER(bNodeTreeExec)),
	("use_tree_data",		ctypes.c_int),] )

ntreeTexExecTree = _rpythonic_function_(		"ntreeTexExecTree", ctypes.c_int, [
	("ntree",		ctypes.POINTER(bNodeTree)),
	("target",		ctypes.POINTER(TexResult)),
	("coord",		ctypes.POINTER(ctypes.c_float)),
	("dxt",		ctypes.POINTER(ctypes.c_float)),
	("dyt",		ctypes.POINTER(ctypes.c_float)),
	("osatex",		ctypes.c_int),
	("thread",		ctypes.c_short),
	("tex",		ctypes.POINTER(Tex)),
	("which_output",		ctypes.c_short),
	("cfra",		ctypes.c_int),
	("preview",		ctypes.c_int),
	("shi",		ctypes.POINTER(ShadeInput)),
	("mtex",		ctypes.POINTER(MTex)),] )

init_nodesystem = _rpythonic_function_(		"init_nodesystem", ctypes.c_void_p, [] )

free_nodesystem = _rpythonic_function_(		"free_nodesystem", ctypes.c_void_p, [] )

clear_scene_in_nodes = _rpythonic_function_(		"clear_scene_in_nodes", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),] )

poll = _rpythonic_function_(		"poll", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),] )

BKE_reports_init = _rpythonic_function_(		"BKE_reports_init", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("flag",		ctypes.c_int),] )

BKE_reports_clear = _rpythonic_function_(		"BKE_reports_clear", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),] )

BKE_report = _rpythonic_function_(		"BKE_report", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_type",		ctypes.c_int),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

BKE_reportf = _rpythonic_function_(		"BKE_reportf", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_type",		ctypes.c_int),
	("format",		ctypes.POINTER(ctypes.c_char)),] )

BKE_reports_prepend = _rpythonic_function_(		"BKE_reports_prepend", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("prepend",		ctypes.POINTER(ctypes.c_char)),] )

BKE_reports_prependf = _rpythonic_function_(		"BKE_reports_prependf", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("prepend",		ctypes.POINTER(ctypes.c_char)),] )

BKE_report_print_level = _rpythonic_function_(		"BKE_report_print_level", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),] )

BKE_report_print_level_set = _rpythonic_function_(		"BKE_report_print_level_set", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("level",		ctypes.c_int),] )

BKE_report_store_level = _rpythonic_function_(		"BKE_report_store_level", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),] )

BKE_report_store_level_set = _rpythonic_function_(		"BKE_report_store_level_set", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("level",		ctypes.c_int),] )

BKE_reports_string = _rpythonic_function_(		"BKE_reports_string", ctypes.POINTER(ctypes.c_char), [
	("reports",		ctypes.POINTER(ReportList)),
	("level",		ctypes.c_int),] )

BKE_reports_print = _rpythonic_function_(		"BKE_reports_print", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("level",		ctypes.c_int),] )

BKE_reports_last_displayable = _rpythonic_function_(		"BKE_reports_last_displayable", ctypes.POINTER(Report), [
	("reports",		ctypes.POINTER(ReportList)),] )

sound_init_once = _rpythonic_function_(		"sound_init_once", ctypes.c_void_p, [] )

sound_init = _rpythonic_function_(		"sound_init", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),] )

sound_init_main = _rpythonic_function_(		"sound_init_main", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),] )

sound_exit = _rpythonic_function_(		"sound_exit", ctypes.c_void_p, [] )

sound_force_device = _rpythonic_function_(		"sound_force_device", ctypes.c_void_p, [
	("device",		ctypes.c_int),] )

sound_define_from_str = _rpythonic_function_(		"sound_define_from_str", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

sound_new_file = _rpythonic_function_(		"sound_new_file", ctypes.POINTER(bSound), [
	("main",		ctypes.POINTER(Main)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

sound_delete = _rpythonic_function_(		"sound_delete", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sound",		ctypes.POINTER(bSound)),] )

sound_cache = _rpythonic_function_(		"sound_cache", ctypes.c_void_p, [
	("sound",		ctypes.POINTER(bSound)),] )

sound_cache_notifying = _rpythonic_function_(		"sound_cache_notifying", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),
	("sound",		ctypes.POINTER(bSound)),] )

sound_delete_cache = _rpythonic_function_(		"sound_delete_cache", ctypes.c_void_p, [
	("sound",		ctypes.POINTER(bSound)),] )

sound_load = _rpythonic_function_(		"sound_load", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),
	("sound",		ctypes.POINTER(bSound)),] )

sound_free = _rpythonic_function_(		"sound_free", ctypes.c_void_p, [
	("sound",		ctypes.POINTER(bSound)),] )

sound_create_scene = _rpythonic_function_(		"sound_create_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_destroy_scene = _rpythonic_function_(		"sound_destroy_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_mute_scene = _rpythonic_function_(		"sound_mute_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("muted",		ctypes.c_int),] )

sound_update_fps = _rpythonic_function_(		"sound_update_fps", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_update_scene_listener = _rpythonic_function_(		"sound_update_scene_listener", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_scene_add_scene_sound = _rpythonic_function_(		"sound_scene_add_scene_sound", ctypes.POINTER(ctypes.c_void_p), [
	("scene",		ctypes.POINTER(Scene)),
	("sequence",		ctypes.POINTER(Sequence)),
	("startframe",		ctypes.c_int),
	("endframe",		ctypes.c_int),
	("frameskip",		ctypes.c_int),] )

sound_add_scene_sound = _rpythonic_function_(		"sound_add_scene_sound", ctypes.POINTER(ctypes.c_void_p), [
	("scene",		ctypes.POINTER(Scene)),
	("sequence",		ctypes.POINTER(Sequence)),
	("startframe",		ctypes.c_int),
	("endframe",		ctypes.c_int),
	("frameskip",		ctypes.c_int),] )

sound_remove_scene_sound = _rpythonic_function_(		"sound_remove_scene_sound", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),] )

sound_mute_scene_sound = _rpythonic_function_(		"sound_mute_scene_sound", ctypes.c_void_p, [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("mute",		ctypes.c_char),] )

sound_move_scene_sound = _rpythonic_function_(		"sound_move_scene_sound", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("startframe",		ctypes.c_int),
	("endframe",		ctypes.c_int),
	("frameskip",		ctypes.c_int),] )

sound_update_scene_sound = _rpythonic_function_(		"sound_update_scene_sound", ctypes.c_void_p, [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("sound",		ctypes.POINTER(bSound)),] )

sound_set_cfra = _rpythonic_function_(		"sound_set_cfra", ctypes.c_void_p, [
	("cfra",		ctypes.c_int),] )

sound_set_scene_volume = _rpythonic_function_(		"sound_set_scene_volume", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("volume",		ctypes.c_float),] )

sound_set_scene_sound_volume = _rpythonic_function_(		"sound_set_scene_sound_volume", ctypes.c_void_p, [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("volume",		ctypes.c_float),
	("animated",		ctypes.c_char),] )

sound_set_scene_sound_pitch = _rpythonic_function_(		"sound_set_scene_sound_pitch", ctypes.c_void_p, [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("pitch",		ctypes.c_float),
	("animated",		ctypes.c_char),] )

sound_set_scene_sound_pan = _rpythonic_function_(		"sound_set_scene_sound_pan", ctypes.c_void_p, [
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("pan",		ctypes.c_float),
	("animated",		ctypes.c_char),] )

sound_update_sequencer = _rpythonic_function_(		"sound_update_sequencer", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),
	("sound",		ctypes.POINTER(bSound)),] )

sound_play_scene = _rpythonic_function_(		"sound_play_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_stop_scene = _rpythonic_function_(		"sound_stop_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_seek_scene = _rpythonic_function_(		"sound_seek_scene", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),] )

sound_sync_scene = _rpythonic_function_(		"sound_sync_scene", ctypes.c_float, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_scene_playing = _rpythonic_function_(		"sound_scene_playing", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_free_waveform = _rpythonic_function_(		"sound_free_waveform", ctypes.c_void_p, [
	("sound",		ctypes.POINTER(bSound)),] )

sound_read_waveform = _rpythonic_function_(		"sound_read_waveform", ctypes.c_void_p, [
	("sound",		ctypes.POINTER(bSound)),] )

sound_update_scene = _rpythonic_function_(		"sound_update_scene", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),] )

sound_get_factory = _rpythonic_function_(		"sound_get_factory", ctypes.POINTER(ctypes.c_void_p), [("sound",		ctypes.c_void_p)] )

graph_action_func = _rpythonic_function_(		"graph_action_func", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(ctypes.c_void_p)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pop_ob_queue = _rpythonic_function_(		"pop_ob_queue", ctypes.POINTER(ctypes.c_void_p), [
	("queue",		ctypes.POINTER(DagNodeQueue)),] )

queue_count = _rpythonic_function_(		"queue_count", ctypes.c_int, [
	("queue",		ctypes.POINTER(DagNodeQueue)),] )

queue_delete = _rpythonic_function_(		"queue_delete", ctypes.c_void_p, [
	("queue",		ctypes.POINTER(DagNodeQueue)),] )

build_dag = _rpythonic_function_(		"build_dag", ctypes.POINTER(DagForest), [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("mask",		ctypes.c_short),] )

free_forest = _rpythonic_function_(		"free_forest", ctypes.c_void_p, [
	("Dag",		ctypes.POINTER(DagForest)),] )

pre_and_post_BFS = _rpythonic_function_(		"pre_and_post_BFS", ctypes.c_int, [
	("dag",		ctypes.POINTER(DagForest)),
	("mask",		ctypes.c_short),
	("pre_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("post_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pre_and_post_DFS = _rpythonic_function_(		"pre_and_post_DFS", ctypes.c_int, [
	("dag",		ctypes.POINTER(DagForest)),
	("mask",		ctypes.c_short),
	("pre_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("post_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pre_and_post_source_BFS = _rpythonic_function_(		"pre_and_post_source_BFS", ctypes.c_int, [
	("dag",		ctypes.POINTER(DagForest)),
	("mask",		ctypes.c_short),
	("source",		ctypes.POINTER(DagNode)),
	("pre_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("post_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

pre_and_post_source_DFS = _rpythonic_function_(		"pre_and_post_source_DFS", ctypes.c_int, [
	("dag",		ctypes.POINTER(DagForest)),
	("mask",		ctypes.c_short),
	("source",		ctypes.POINTER(DagNode)),
	("pre_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("post_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)),)),
	("data",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

get_obparents = _rpythonic_function_(		"get_obparents", ctypes.POINTER(DagNodeQueue), [
	("dag",		ctypes.POINTER(DagForest)),
	("ob",		ctypes.POINTER(ctypes.c_void_p)),] )

get_first_ancestors = _rpythonic_function_(		"get_first_ancestors", ctypes.POINTER(DagNodeQueue), [
	("dag",		ctypes.POINTER(DagForest)),
	("ob",		ctypes.POINTER(ctypes.c_void_p)),] )

get_all_childs = _rpythonic_function_(		"get_all_childs", ctypes.POINTER(DagNodeQueue), [
	("dag",		ctypes.POINTER(DagForest)),
	("ob",		ctypes.POINTER(ctypes.c_void_p)),] )

are_obs_related = _rpythonic_function_(		"are_obs_related", ctypes.c_short, [
	("dag",		ctypes.POINTER(DagForest)),
	("ob1",		ctypes.POINTER(ctypes.c_void_p)),
	("ob2",		ctypes.POINTER(ctypes.c_void_p)),] )

is_acyclic = _rpythonic_function_(		"is_acyclic", ctypes.c_int, [
	("dag",		ctypes.POINTER(DagForest)),] )

boundbox_deps = _rpythonic_function_(		"boundbox_deps", ctypes.c_void_p, [] )

draw_all_deps = _rpythonic_function_(		"draw_all_deps", ctypes.c_void_p, [] )

DAG_scene_sort = _rpythonic_function_(		"DAG_scene_sort", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),] )

DAG_scene_update_flags = _rpythonic_function_(		"DAG_scene_update_flags", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("lay",		ctypes.c_uint),
	("do_time",		ctypes.c_short),] )

DAG_scene_flush_update = _rpythonic_function_(		"DAG_scene_flush_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("lay",		ctypes.c_uint),
	("do_time",		ctypes.c_short),] )

DAG_on_visible_update = _rpythonic_function_(		"DAG_on_visible_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("do_time",		ctypes.c_short),] )

DAG_ids_flush_update = _rpythonic_function_(		"DAG_ids_flush_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("time",		ctypes.c_int),] )

DAG_id_tag_update = _rpythonic_function_(		"DAG_id_tag_update", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("flag",		ctypes.c_short),] )

DAG_ids_flush_tagged = _rpythonic_function_(		"DAG_ids_flush_tagged", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),] )

DAG_ids_check_recalc = _rpythonic_function_(		"DAG_ids_check_recalc", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("time",		ctypes.c_int),] )

DAG_ids_clear_recalc = _rpythonic_function_(		"DAG_ids_clear_recalc", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),] )

DAG_id_type_tag = _rpythonic_function_(		"DAG_id_type_tag", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("idtype",		ctypes.c_short),] )

DAG_id_type_tagged = _rpythonic_function_(		"DAG_id_type_tagged", ctypes.c_int, [
	("bmain",		ctypes.POINTER(Main)),
	("idtype",		ctypes.c_short),] )

DAG_pose_sort = _rpythonic_function_(		"DAG_pose_sort", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),] )

DAG_editors_update_cb = _rpythonic_function_(		"DAG_editors_update_cb", ctypes.c_void_p, [
	("id_func",		ctypes.c_void_p),
	("scene_func",		ctypes.c_void_p),] )

id_func = _rpythonic_function_(		"id_func", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("C_id",		ctypes.POINTER(ID)),] )

scene_func = _rpythonic_function_(		"scene_func", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("updated",		ctypes.c_int),] )

DAG_print_dependencies = _rpythonic_function_(		"DAG_print_dependencies", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),] )

IDP_NewIDPArray = _rpythonic_function_(		"IDP_NewIDPArray", ctypes.POINTER(IDProperty), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IDP_CopyIDPArray = _rpythonic_function_(		"IDP_CopyIDPArray", ctypes.POINTER(IDProperty), [
	("array",		ctypes.POINTER(IDProperty)),] )

IDP_FreeIDPArray = _rpythonic_function_(		"IDP_FreeIDPArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_SetIndexArray = _rpythonic_function_(		"IDP_SetIndexArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("index",		ctypes.c_int),
	("item",		ctypes.POINTER(IDProperty)),] )

IDP_GetIndexArray = _rpythonic_function_(		"IDP_GetIndexArray", ctypes.POINTER(IDProperty), [
	("prop",		ctypes.POINTER(IDProperty)),
	("index",		ctypes.c_int),] )

IDP_AppendArray = _rpythonic_function_(		"IDP_AppendArray", ctypes.POINTER(IDProperty), [
	("prop",		ctypes.POINTER(IDProperty)),
	("item",		ctypes.POINTER(IDProperty)),] )

IDP_ResizeIDPArray = _rpythonic_function_(		"IDP_ResizeIDPArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("C_len",		ctypes.c_int),] )

IDP_ResizeArray = _rpythonic_function_(		"IDP_ResizeArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("newlen",		ctypes.c_int),] )

IDP_FreeArray = _rpythonic_function_(		"IDP_FreeArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_UnlinkArray = _rpythonic_function_(		"IDP_UnlinkArray", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_NewString = _rpythonic_function_(		"IDP_NewString", ctypes.POINTER(IDProperty), [
	("st",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),] )

IDP_AssignString = _rpythonic_function_(		"IDP_AssignString", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("st",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_int),] )

IDP_ConcatStringC = _rpythonic_function_(		"IDP_ConcatStringC", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("st",		ctypes.POINTER(ctypes.c_char)),] )

IDP_ConcatString = _rpythonic_function_(		"IDP_ConcatString", ctypes.c_void_p, [
	("str1",		ctypes.POINTER(IDProperty)),
	("append",		ctypes.POINTER(IDProperty)),] )

IDP_FreeString = _rpythonic_function_(		"IDP_FreeString", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_LinkID = _rpythonic_function_(		"IDP_LinkID", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),
	("C_id",		ctypes.POINTER(ID)),] )

IDP_UnlinkID = _rpythonic_function_(		"IDP_UnlinkID", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_SyncGroupValues = _rpythonic_function_(		"IDP_SyncGroupValues", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(IDProperty)),
	("src",		ctypes.POINTER(IDProperty)),] )

IDP_ReplaceGroupInGroup = _rpythonic_function_(		"IDP_ReplaceGroupInGroup", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(IDProperty)),
	("src",		ctypes.POINTER(IDProperty)),] )

IDP_ReplaceInGroup = _rpythonic_function_(		"IDP_ReplaceInGroup", ctypes.c_void_p, [
	("group",		ctypes.POINTER(IDProperty)),
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_AddToGroup = _rpythonic_function_(		"IDP_AddToGroup", ctypes.c_int, [
	("group",		ctypes.POINTER(IDProperty)),
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_InsertToGroup = _rpythonic_function_(		"IDP_InsertToGroup", ctypes.c_int, [
	("group",		ctypes.POINTER(IDProperty)),
	("previous",		ctypes.POINTER(IDProperty)),
	("pnew",		ctypes.POINTER(IDProperty)),] )

IDP_RemFromGroup = _rpythonic_function_(		"IDP_RemFromGroup", ctypes.c_void_p, [
	("group",		ctypes.POINTER(IDProperty)),
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_GetPropertyFromGroup = _rpythonic_function_(		"IDP_GetPropertyFromGroup", ctypes.POINTER(IDProperty), [
	("prop",		ctypes.POINTER(IDProperty)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IDP_GetPropertyTypeFromGroup = _rpythonic_function_(		"IDP_GetPropertyTypeFromGroup", ctypes.POINTER(IDProperty), [
	("prop",		ctypes.POINTER(IDProperty)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_char),] )

IDP_GetGroupIterator = _rpythonic_function_(		"IDP_GetGroupIterator", ctypes.POINTER(ctypes.c_void_p), [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_GroupIterNext = _rpythonic_function_(		"IDP_GroupIterNext", ctypes.POINTER(IDProperty), [("vself",		ctypes.c_void_p)] )

IDP_FreeIterBeforeEnd = _rpythonic_function_(		"IDP_FreeIterBeforeEnd", ctypes.c_void_p, [("vself",		ctypes.c_void_p)] )

IDP_GetProperties = _rpythonic_function_(		"IDP_GetProperties", ctypes.POINTER(IDProperty), [
	("C_id",		ctypes.POINTER(ID)),
	("create_if_needed",		ctypes.c_int),] )

IDP_CopyProperty = _rpythonic_function_(		"IDP_CopyProperty", ctypes.POINTER(IDProperty), [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_EqualsProperties = _rpythonic_function_(		"IDP_EqualsProperties", ctypes.c_int, [
	("prop1",		ctypes.POINTER(IDProperty)),
	("prop2",		ctypes.POINTER(IDProperty)),] )

IDP_New = _rpythonic_function_(		"IDP_New", ctypes.POINTER(IDProperty), [
	("C_type",		ctypes.c_int),
	("val",		ctypes.POINTER(IDPropertyTemplate)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IDP_FreeProperty = _rpythonic_function_(		"IDP_FreeProperty", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

IDP_UnlinkProperty = _rpythonic_function_(		"IDP_UnlinkProperty", ctypes.c_void_p, [
	("prop",		ctypes.POINTER(IDProperty)),] )

alloc_libblock = _rpythonic_function_(		"alloc_libblock", ctypes.POINTER(ctypes.c_void_p), [
	("lb",		ctypes.POINTER(ListBase)),
	("C_type",		ctypes.c_short),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

copy_libblock = _rpythonic_function_(		"copy_libblock", ctypes.POINTER(ctypes.c_void_p), [
	("C_id",		ctypes.POINTER(ID)),] )

copy_libblock_data = _rpythonic_function_(		"copy_libblock_data", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("id_from",		ctypes.POINTER(ID)),
	("do_action",		ctypes.c_short),] )

BKE_id_lib_local_paths = _rpythonic_function_(		"BKE_id_lib_local_paths", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("lib",		ctypes.POINTER(Library)),
	("C_id",		ctypes.POINTER(ID)),] )

id_lib_extern = _rpythonic_function_(		"id_lib_extern", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

BKE_library_filepath_set = _rpythonic_function_(		"BKE_library_filepath_set", ctypes.c_void_p, [
	("lib",		ctypes.POINTER(Library)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),] )

id_us_plus = _rpythonic_function_(		"id_us_plus", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

id_us_min = _rpythonic_function_(		"id_us_min", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

id_make_local = _rpythonic_function_(		"id_make_local", ctypes.c_int, [
	("C_id",		ctypes.POINTER(ID)),
	("test",		ctypes.c_int),] )

id_single_user = _rpythonic_function_(		"id_single_user", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("C_id",		ctypes.POINTER(ID)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),] )

id_copy = _rpythonic_function_(		"id_copy", ctypes.c_int, [
	("C_id",		ctypes.POINTER(ID)),
	("newid",		ctypes.POINTER(ctypes.POINTER(ID))),
	("test",		ctypes.c_int),] )

id_unlink = _rpythonic_function_(		"id_unlink", ctypes.c_int, [
	("C_id",		ctypes.POINTER(ID)),
	("test",		ctypes.c_int),] )

new_id = _rpythonic_function_(		"new_id", ctypes.c_int, [
	("lb",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ID)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

id_clear_lib_data = _rpythonic_function_(		"id_clear_lib_data", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("C_id",		ctypes.POINTER(ID)),] )

which_libbase = _rpythonic_function_(		"which_libbase", ctypes.POINTER(ListBase), [
	("mainlib",		ctypes.POINTER(Main)),
	("C_type",		ctypes.c_short),] )

set_listbasepointers = _rpythonic_function_(		"set_listbasepointers", ctypes.c_int, [
	("main",		ctypes.POINTER(Main)),
	("lb",		ctypes.POINTER(ctypes.POINTER(ListBase))),] )

free_libblock = _rpythonic_function_(		"free_libblock", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),
	("idv",		ctypes.POINTER(ctypes.c_void_p)),] )

free_libblock_us = _rpythonic_function_(		"free_libblock_us", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),
	("idv",		ctypes.POINTER(ctypes.c_void_p)),] )

free_main = _rpythonic_function_(		"free_main", ctypes.c_void_p, [
	("mainvar",		ctypes.POINTER(Main)),] )

tag_main_idcode = _rpythonic_function_(		"tag_main_idcode", ctypes.c_void_p, [
	("mainvar",		ctypes.POINTER(Main)),
	("C_type",		ctypes.c_short),
	("tag",		ctypes.c_short),] )

tag_main_lb = _rpythonic_function_(		"tag_main_lb", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),
	("tag",		ctypes.c_short),] )

tag_main = _rpythonic_function_(		"tag_main", ctypes.c_void_p, [
	("mainvar",		ctypes.POINTER(Main)),
	("tag",		ctypes.c_short),] )

rename_id = _rpythonic_function_(		"rename_id", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

name_uiprefix_id = _rpythonic_function_(		"name_uiprefix_id", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("C_id",		ctypes.POINTER(ID)),] )

test_idbutton = _rpythonic_function_(		"test_idbutton", ctypes.c_void_p, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

text_idbutton = _rpythonic_function_(		"text_idbutton", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

BKE_library_make_local = _rpythonic_function_(		"BKE_library_make_local", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("lib",		ctypes.POINTER(Library)),
	("untagged_only",		ctypes.c_int),] )

find_id = _rpythonic_function_(		"find_id", ctypes.POINTER(ID), [
	("C_type",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

clear_id_newpoins = _rpythonic_function_(		"clear_id_newpoins", ctypes.c_void_p, [] )

IDnames_to_pupstring = _rpythonic_function_(		"IDnames_to_pupstring", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("extraops",		ctypes.POINTER(ctypes.c_char)),
	("lb",		ctypes.POINTER(ListBase)),
	("link",		ctypes.POINTER(ID)),
	("nr",		ctypes.POINTER(ctypes.c_short)),] )

IMAnames_to_pupstring = _rpythonic_function_(		"IMAnames_to_pupstring", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("extraops",		ctypes.POINTER(ctypes.c_char)),
	("lb",		ctypes.POINTER(ListBase)),
	("link",		ctypes.POINTER(ID)),
	("nr",		ctypes.POINTER(ctypes.c_short)),] )

IPOnames_to_pupstring = _rpythonic_function_(		"IPOnames_to_pupstring", ctypes.c_void_p, [
	("C_str",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("extraops",		ctypes.POINTER(ctypes.c_char)),
	("lb",		ctypes.POINTER(ListBase)),
	("link",		ctypes.POINTER(ID)),
	("nr",		ctypes.POINTER(ctypes.c_short)),
	("blocktype",		ctypes.c_int),] )

flag_listbase_ids = _rpythonic_function_(		"flag_listbase_ids", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),
	("flag",		ctypes.c_short),
	("value",		ctypes.c_short),] )

flag_all_listbases_ids = _rpythonic_function_(		"flag_all_listbases_ids", ctypes.c_void_p, [
	("flag",		ctypes.c_short),
	("value",		ctypes.c_short),] )

recalc_all_library_objects = _rpythonic_function_(		"recalc_all_library_objects", ctypes.c_void_p, [
	("main",		ctypes.POINTER(Main)),] )

set_free_windowmanager_cb = _rpythonic_function_(		"set_free_windowmanager_cb", ctypes.c_void_p, [
	("func",		ctypes.c_void_p),] )

new = _rpythonic_function_(		"new", ctypes.POINTER(SpaceLink), [
	("C",		ctypes.POINTER(bContext)),] )

init = _rpythonic_function_(		"init", ctypes.c_void_p, [
	("wmWindowManager",		ctypes.POINTER(wmWindowManager)),
	("ScrArea",		ctypes.POINTER(ScrArea)),] )

listener = _rpythonic_function_(		"listener", ctypes.c_void_p, [
	("ScrArea",		ctypes.POINTER(ScrArea)),
	("wmNotifier",		ctypes.POINTER(wmNotifier)),] )

refresh = _rpythonic_function_(		"refresh", ctypes.c_void_p, [
	("bContext",		ctypes.POINTER(bContext)),
	("ScrArea",		ctypes.POINTER(ScrArea)),] )

duplicate = _rpythonic_function_(		"duplicate", ctypes.POINTER(SpaceLink), [
	("SpaceLink",		ctypes.POINTER(SpaceLink)),] )

operatortypes = _rpythonic_function_(		"operatortypes", ctypes.c_void_p, [] )

keymap = _rpythonic_function_(		"keymap", ctypes.c_void_p, [
	("wmKeyConfig",		ctypes.POINTER(wmKeyConfig)),] )

dropboxes = _rpythonic_function_(		"dropboxes", ctypes.c_void_p, [] )

context = _rpythonic_function_(		"context", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("none",		ctypes.POINTER(ctypes.c_char)),
	("bContextDataResult",		ctypes.POINTER(bContextDataResult)),] )

draw = _rpythonic_function_(		"draw", ctypes.c_void_p, [
	("bContext",		ctypes.POINTER(bContext)),
	("ARegion",		ctypes.POINTER(ARegion)),] )

cursor = _rpythonic_function_(		"cursor", ctypes.c_void_p, [
	("wmWindow",		ctypes.POINTER(wmWindow)),
	("ScrArea",		ctypes.POINTER(ScrArea)),
	("ar",		ctypes.POINTER(ARegion)),] )

draw_header = _rpythonic_function_(		"draw_header", ctypes.c_void_p, [
	("bContext",		ctypes.POINTER(bContext)),
	("Panel",		ctypes.POINTER(Panel)),] )

BKE_spacetype_from_id = _rpythonic_function_(		"BKE_spacetype_from_id", ctypes.POINTER(SpaceType), [
	("spaceid",		ctypes.c_int),] )

BKE_regiontype_from_id = _rpythonic_function_(		"BKE_regiontype_from_id", ctypes.POINTER(ARegionType), [
	("st",		ctypes.POINTER(SpaceType)),
	("regionid",		ctypes.c_int),] )

BKE_spacetypes_list = _rpythonic_function_(		"BKE_spacetypes_list", ctypes.POINTER(ListBase), [] )

BKE_spacetype_register = _rpythonic_function_(		"BKE_spacetype_register", ctypes.c_void_p, [
	("st",		ctypes.POINTER(SpaceType)),] )

BKE_spacetypes_free = _rpythonic_function_(		"BKE_spacetypes_free", ctypes.c_void_p, [] )

BKE_spacedata_freelist = _rpythonic_function_(		"BKE_spacedata_freelist", ctypes.c_void_p, [
	("lb",		ctypes.POINTER(ListBase)),] )

BKE_spacedata_copylist = _rpythonic_function_(		"BKE_spacedata_copylist", ctypes.c_void_p, [
	("lb1",		ctypes.POINTER(ListBase)),
	("lb2",		ctypes.POINTER(ListBase)),] )

BKE_spacedata_draw_locks = _rpythonic_function_(		"BKE_spacedata_draw_locks", ctypes.c_void_p, [
	("set",		ctypes.c_int),] )

BKE_area_region_copy = _rpythonic_function_(		"BKE_area_region_copy", ctypes.POINTER(ARegion), [
	("st",		ctypes.POINTER(SpaceType)),
	("ar",		ctypes.POINTER(ARegion)),] )

BKE_area_region_free = _rpythonic_function_(		"BKE_area_region_free", ctypes.c_void_p, [
	("st",		ctypes.POINTER(SpaceType)),
	("ar",		ctypes.POINTER(ARegion)),] )

BKE_screen_area_free = _rpythonic_function_(		"BKE_screen_area_free", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),] )

BKE_area_find_region_type = _rpythonic_function_(		"BKE_area_find_region_type", ctypes.POINTER(ARegion), [
	("sa",		ctypes.POINTER(ScrArea)),
	("C_type",		ctypes.c_int),] )

BKE_screen_find_big_area = _rpythonic_function_(		"BKE_screen_find_big_area", ctypes.POINTER(ScrArea), [
	("sc",		ctypes.POINTER(bScreen)),
	("spacetype",		ctypes.c_int),
	("min",		ctypes.c_short),] )

BKE_screen_view3d_sync = _rpythonic_function_(		"BKE_screen_view3d_sync", ctypes.c_void_p, [
	("v3d",		ctypes.POINTER(View3D)),
	("scene",		ctypes.POINTER(Scene)),] )

BKE_screen_view3d_scene_sync = _rpythonic_function_(		"BKE_screen_view3d_scene_sync", ctypes.c_void_p, [
	("sc",		ctypes.POINTER(bScreen)),] )

BKE_screen_view3d_main_sync = _rpythonic_function_(		"BKE_screen_view3d_main_sync", ctypes.c_void_p, [
	("screen_lb",		ctypes.POINTER(ListBase)),
	("scene",		ctypes.POINTER(Scene)),] )

BKE_screen_view3d_zoom_to_fac = _rpythonic_function_(		"BKE_screen_view3d_zoom_to_fac", ctypes.c_float, [
	("camzoom",		ctypes.c_float),] )

BKE_screen_view3d_zoom_from_fac = _rpythonic_function_(		"BKE_screen_view3d_zoom_from_fac", ctypes.c_float, [
	("zoomfac",		ctypes.c_float),] )

free_screen = _rpythonic_function_(		"free_screen", ctypes.c_void_p, [
	("sc",		ctypes.POINTER(bScreen)),] )

BKE_screen_visible_layers = _rpythonic_function_(		"BKE_screen_visible_layers", ctypes.c_uint, [
	("screen",		ctypes.POINTER(bScreen)),
	("scene",		ctypes.POINTER(Scene)),] )

BKE_idcode_to_name = _rpythonic_function_(		"BKE_idcode_to_name", ctypes.POINTER(ctypes.c_char), [
	("code",		ctypes.c_int),] )

BKE_idcode_to_name_plural = _rpythonic_function_(		"BKE_idcode_to_name_plural", ctypes.POINTER(ctypes.c_char), [
	("code",		ctypes.c_int),] )

BKE_idcode_from_name = _rpythonic_function_(		"BKE_idcode_from_name", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_idcode_is_linkable = _rpythonic_function_(		"BKE_idcode_is_linkable", ctypes.c_int, [
	("code",		ctypes.c_int),] )

BKE_idcode_is_valid = _rpythonic_function_(		"BKE_idcode_is_valid", ctypes.c_int, [
	("code",		ctypes.c_int),] )

BKE_idcode_iter_step = _rpythonic_function_(		"BKE_idcode_iter_step", ctypes.c_int, [
	("index",		ctypes.POINTER(ctypes.c_int)),] )

free_image = _rpythonic_function_(		"free_image", ctypes.c_void_p, [
	("me",		ctypes.POINTER(Image)),] )

BKE_stamp_info = _rpythonic_function_(		"BKE_stamp_info", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("camera",		ctypes.POINTER(Object)),
	("ibuf",		ctypes.POINTER(ImBuf)),] )

BKE_stamp_buf = _rpythonic_function_(		"BKE_stamp_buf", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("camera",		ctypes.POINTER(Object)),
	("rect",		ctypes.POINTER(ctypes.c_ubyte)),
	("rectf",		ctypes.POINTER(ctypes.c_float)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("channels",		ctypes.c_int),] )

BKE_alphatest_ibuf = _rpythonic_function_(		"BKE_alphatest_ibuf", ctypes.c_int, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

BKE_write_ibuf_stamp = _rpythonic_function_(		"BKE_write_ibuf_stamp", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("camera",		ctypes.POINTER(Object)),
	("ibuf",		ctypes.POINTER(ImBuf)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("imf",		ctypes.POINTER(ImageFormatData)),] )

BKE_write_ibuf = _rpythonic_function_(		"BKE_write_ibuf", ctypes.c_int, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("imf",		ctypes.POINTER(ImageFormatData)),] )

BKE_write_ibuf_as = _rpythonic_function_(		"BKE_write_ibuf_as", ctypes.c_int, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("imf",		ctypes.POINTER(ImageFormatData)),
	("is_copy",		ctypes.c_short),] )

BKE_makepicstring = _rpythonic_function_(		"BKE_makepicstring", ctypes.c_void_p, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("base",		ctypes.POINTER(ctypes.c_char)),
	("relbase",		ctypes.POINTER(ctypes.c_char)),
	("frame",		ctypes.c_int),
	("imtype",		ctypes.c_char),
	("use_ext",		ctypes.c_short),
	("use_frames",		ctypes.c_short),] )

BKE_add_image_extension = _rpythonic_function_(		"BKE_add_image_extension", ctypes.c_int, [
	("string",		ctypes.POINTER(ctypes.c_char)),
	("imtype",		ctypes.c_char),] )

BKE_ftype_to_imtype = _rpythonic_function_(		"BKE_ftype_to_imtype", ctypes.c_char, [
	("ftype",		ctypes.c_int),] )

BKE_imtype_to_ftype = _rpythonic_function_(		"BKE_imtype_to_ftype", ctypes.c_int, [
	("imtype",		ctypes.c_char),] )

BKE_imtype_is_movie = _rpythonic_function_(		"BKE_imtype_is_movie", ctypes.c_int, [
	("imtype",		ctypes.c_char),] )

BKE_imtype_supports_zbuf = _rpythonic_function_(		"BKE_imtype_supports_zbuf", ctypes.c_int, [
	("imtype",		ctypes.c_char),] )

BKE_imtype_supports_compress = _rpythonic_function_(		"BKE_imtype_supports_compress", ctypes.c_int, [
	("imtype",		ctypes.c_char),] )

BKE_imtype_supports_quality = _rpythonic_function_(		"BKE_imtype_supports_quality", ctypes.c_int, [
	("imtype",		ctypes.c_char),] )

BKE_imtype_valid_channels = _rpythonic_function_(		"BKE_imtype_valid_channels", ctypes.c_char, [
	("imtype",		ctypes.c_char),] )

BKE_imtype_valid_depths = _rpythonic_function_(		"BKE_imtype_valid_depths", ctypes.c_char, [
	("imtype",		ctypes.c_char),] )

BKE_imtype_from_arg = _rpythonic_function_(		"BKE_imtype_from_arg", ctypes.c_char, [
	("arg",		ctypes.POINTER(ctypes.c_char)),] )

openanim = _rpythonic_function_(		"openanim", ctypes.POINTER(anim), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),
	("streamindex",		ctypes.c_int),] )

image_de_interlace = _rpythonic_function_(		"image_de_interlace", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("odd",		ctypes.c_int),] )

make_local_image = _rpythonic_function_(		"make_local_image", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),] )

tag_image_time = _rpythonic_function_(		"tag_image_time", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),] )

free_old_images = _rpythonic_function_(		"free_old_images", ctypes.c_void_p, [] )

BKE_image_get_ibuf = _rpythonic_function_(		"BKE_image_get_ibuf", ctypes.POINTER(ImBuf), [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),] )

BKE_image_acquire_ibuf = _rpythonic_function_(		"BKE_image_acquire_ibuf", ctypes.POINTER(ImBuf), [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),
	("lock_r",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

BKE_image_release_ibuf = _rpythonic_function_(		"BKE_image_release_ibuf", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("lock",		ctypes.POINTER(ctypes.c_void_p)),] )

BKE_add_image_file = _rpythonic_function_(		"BKE_add_image_file", ctypes.POINTER(Image), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_add_image_size = _rpythonic_function_(		"BKE_add_image_size", ctypes.POINTER(Image), [
	("width",		ctypes.c_uint),
	("height",		ctypes.c_uint),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("depth",		ctypes.c_int),
	("floatbuf",		ctypes.c_int),
	("uvtestgrid",		ctypes.c_short),
	("color",		( ctypes.c_float * 4 )),] )

BKE_add_image_imbuf = _rpythonic_function_(		"BKE_add_image_imbuf", ctypes.POINTER(Image), [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

BKE_image_signal = _rpythonic_function_(		"BKE_image_signal", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),
	("signal",		ctypes.c_int),] )

BKE_image_verify_viewer = _rpythonic_function_(		"BKE_image_verify_viewer", ctypes.POINTER(Image), [
	("C_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_image_assign_ibuf = _rpythonic_function_(		"BKE_image_assign_ibuf", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("ibuf",		ctypes.POINTER(ImBuf)),] )

BKE_image_user_calc_frame = _rpythonic_function_(		"BKE_image_user_calc_frame", ctypes.c_void_p, [
	("iuser",		ctypes.POINTER(ImageUser)),
	("cfra",		ctypes.c_int),
	("fieldnr",		ctypes.c_int),] )

BKE_image_user_get_frame = _rpythonic_function_(		"BKE_image_user_get_frame", ctypes.c_int, [
	("iuser",		ctypes.POINTER(ImageUser)),
	("cfra",		ctypes.c_int),
	("fieldnr",		ctypes.c_int),] )

BKE_image_user_new_image = _rpythonic_function_(		"BKE_image_user_new_image", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),] )

BKE_image_multilayer_index = _rpythonic_function_(		"BKE_image_multilayer_index", ctypes.POINTER(RenderPass), [
	("rr",		ctypes.POINTER(RenderResult)),
	("iuser",		ctypes.POINTER(ImageUser)),] )

BKE_image_acquire_renderresult = _rpythonic_function_(		"BKE_image_acquire_renderresult", ctypes.POINTER(RenderResult), [
	("scene",		ctypes.POINTER(Scene)),
	("ima",		ctypes.POINTER(Image)),] )

BKE_image_release_renderresult = _rpythonic_function_(		"BKE_image_release_renderresult", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ima",		ctypes.POINTER(Image)),] )

BKE_image_backup_render = _rpythonic_function_(		"BKE_image_backup_render", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ima",		ctypes.POINTER(Image)),] )

BKE_image_free_all_textures = _rpythonic_function_(		"BKE_image_free_all_textures", ctypes.c_void_p, [] )

BKE_image_free_anim_ibufs = _rpythonic_function_(		"BKE_image_free_anim_ibufs", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("except_frame",		ctypes.c_int),] )

BKE_image_all_free_anim_ibufs = _rpythonic_function_(		"BKE_image_all_free_anim_ibufs", ctypes.c_void_p, [
	("except_frame",		ctypes.c_int),] )

BKE_image_memorypack = _rpythonic_function_(		"BKE_image_memorypack", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),] )

BKE_image_print_memlist = _rpythonic_function_(		"BKE_image_print_memlist", ctypes.c_void_p, [] )

copy_image = _rpythonic_function_(		"copy_image", ctypes.POINTER(Image), [
	("ima",		ctypes.POINTER(Image)),] )

BKE_image_merge = _rpythonic_function_(		"BKE_image_merge", ctypes.c_void_p, [
	("dest",		ctypes.POINTER(Image)),
	("source",		ctypes.POINTER(Image)),] )

BKE_image_has_alpha = _rpythonic_function_(		"BKE_image_has_alpha", ctypes.c_int, [
	("image",		ctypes.POINTER(Image)),] )

BKE_image_buf_fill_color = _rpythonic_function_(		"BKE_image_buf_fill_color", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(ctypes.c_ubyte)),
	("rect_float",		ctypes.POINTER(ctypes.c_float)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("color",		( ctypes.c_float * 4 )),] )

BKE_image_buf_fill_checker = _rpythonic_function_(		"BKE_image_buf_fill_checker", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(ctypes.c_ubyte)),
	("rect_float",		ctypes.POINTER(ctypes.c_float)),
	("height",		ctypes.c_int),
	("width",		ctypes.c_int),] )

BKE_image_buf_fill_checker_color = _rpythonic_function_(		"BKE_image_buf_fill_checker_color", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(ctypes.c_ubyte)),
	("rect_float",		ctypes.POINTER(ctypes.c_float)),
	("height",		ctypes.c_int),
	("width",		ctypes.c_int),] )

CustomData_copy = _rpythonic_function_(		"CustomData_copy", ctypes.c_void_p, [
	("source",		ctypes.POINTER(CustomData)),
	("dest",		ctypes.POINTER(CustomData)),
	("mask",		ctypes.c_uint),
	("alloctype",		ctypes.c_int),
	("totelem",		ctypes.c_int),] )

CustomData_merge = _rpythonic_function_(		"CustomData_merge", ctypes.c_void_p, [
	("source",		ctypes.POINTER(CustomData)),
	("dest",		ctypes.POINTER(CustomData)),
	("mask",		ctypes.c_uint),
	("alloctype",		ctypes.c_int),
	("totelem",		ctypes.c_int),] )

CustomData_free = _rpythonic_function_(		"CustomData_free", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("totelem",		ctypes.c_int),] )

CustomData_free_temporary = _rpythonic_function_(		"CustomData_free_temporary", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("totelem",		ctypes.c_int),] )

CustomData_add_layer = _rpythonic_function_(		"CustomData_add_layer", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("alloctype",		ctypes.c_int),
	("layer",		ctypes.POINTER(ctypes.c_void_p)),
	("totelem",		ctypes.c_int),] )

CustomData_add_layer_named = _rpythonic_function_(		"CustomData_add_layer_named", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("alloctype",		ctypes.c_int),
	("layer",		ctypes.POINTER(ctypes.c_void_p)),
	("totelem",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

CustomData_free_layer = _rpythonic_function_(		"CustomData_free_layer", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("totelem",		ctypes.c_int),
	("index",		ctypes.c_int),] )

CustomData_free_layer_active = _rpythonic_function_(		"CustomData_free_layer_active", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("totelem",		ctypes.c_int),] )

CustomData_free_layers = _rpythonic_function_(		"CustomData_free_layers", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("totelem",		ctypes.c_int),] )

CustomData_has_layer = _rpythonic_function_(		"CustomData_has_layer", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_number_of_layers = _rpythonic_function_(		"CustomData_number_of_layers", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_duplicate_referenced_layer = _rpythonic_function_(		"CustomData_duplicate_referenced_layer", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("totelem",		ctypes.c_int),] )

CustomData_duplicate_referenced_layer_named = _rpythonic_function_(		"CustomData_duplicate_referenced_layer_named", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("totelem",		ctypes.c_int),] )

CustomData_set_only_copy = _rpythonic_function_(		"CustomData_set_only_copy", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("mask",		ctypes.c_uint),] )

CustomData_copy_data = _rpythonic_function_(		"CustomData_copy_data", ctypes.c_void_p, [
	("source",		ctypes.POINTER(CustomData)),
	("dest",		ctypes.POINTER(CustomData)),
	("source_index",		ctypes.c_int),
	("dest_index",		ctypes.c_int),
	("count",		ctypes.c_int),] )

CustomData_em_copy_data = _rpythonic_function_(		"CustomData_em_copy_data", ctypes.c_void_p, [
	("source",		ctypes.POINTER(CustomData)),
	("dest",		ctypes.POINTER(CustomData)),
	("src_block",		ctypes.POINTER(ctypes.c_void_p)),
	("dest_block",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

CustomData_bmesh_copy_data = _rpythonic_function_(		"CustomData_bmesh_copy_data", ctypes.c_void_p, [
	("source",		ctypes.POINTER(CustomData)),
	("dest",		ctypes.POINTER(CustomData)),
	("src_block",		ctypes.POINTER(ctypes.c_void_p)),
	("dest_block",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

CustomData_em_validate_data = _rpythonic_function_(		"CustomData_em_validate_data", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.c_void_p)),
	("sub_elements",		ctypes.c_int),] )

CustomData_free_elem = _rpythonic_function_(		"CustomData_free_elem", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("index",		ctypes.c_int),
	("count",		ctypes.c_int),] )

CustomData_interp = _rpythonic_function_(		"CustomData_interp", ctypes.c_void_p, [
	("source",		ctypes.POINTER(CustomData)),
	("dest",		ctypes.POINTER(CustomData)),
	("src_indices",		ctypes.POINTER(ctypes.c_int)),
	("weights",		ctypes.POINTER(ctypes.c_float)),
	("sub_weights",		ctypes.POINTER(ctypes.c_float)),
	("count",		ctypes.c_int),
	("dest_index",		ctypes.c_int),] )

CustomData_em_interp = _rpythonic_function_(		"CustomData_em_interp", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("src_blocks",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("weights",		ctypes.POINTER(ctypes.c_float)),
	("sub_weights",		ctypes.POINTER(ctypes.c_float)),
	("count",		ctypes.c_int),
	("dest_block",		ctypes.POINTER(ctypes.c_void_p)),] )

CustomData_bmesh_interp = _rpythonic_function_(		"CustomData_bmesh_interp", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("src_blocks",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("weights",		ctypes.POINTER(ctypes.c_float)),
	("sub_weights",		ctypes.POINTER(ctypes.c_float)),
	("count",		ctypes.c_int),
	("dest_block",		ctypes.POINTER(ctypes.c_void_p)),] )

CustomData_swap = _rpythonic_function_(		"CustomData_swap", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("index",		ctypes.c_int),
	("corner_indices",		ctypes.POINTER(ctypes.c_int)),] )

CustomData_get = _rpythonic_function_(		"CustomData_get", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),] )

CustomData_em_get = _rpythonic_function_(		"CustomData_em_get", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_int),] )

CustomData_em_get_n = _rpythonic_function_(		"CustomData_em_get_n", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_bmesh_get = _rpythonic_function_(		"CustomData_bmesh_get", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_int),] )

CustomData_bmesh_get_n = _rpythonic_function_(		"CustomData_bmesh_get_n", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_get_layer = _rpythonic_function_(		"CustomData_get_layer", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_get_layer_n = _rpythonic_function_(		"CustomData_get_layer_n", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_get_layer_named = _rpythonic_function_(		"CustomData_get_layer_named", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

CustomData_get_layer_index = _rpythonic_function_(		"CustomData_get_layer_index", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_get_named_layer_index = _rpythonic_function_(		"CustomData_get_named_layer_index", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

CustomData_get_active_layer_index = _rpythonic_function_(		"CustomData_get_active_layer_index", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_get_render_layer_index = _rpythonic_function_(		"CustomData_get_render_layer_index", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_get_clone_layer_index = _rpythonic_function_(		"CustomData_get_clone_layer_index", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_get_stencil_layer_index = _rpythonic_function_(		"CustomData_get_stencil_layer_index", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_get_active_layer = _rpythonic_function_(		"CustomData_get_active_layer", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_get_render_layer = _rpythonic_function_(		"CustomData_get_render_layer", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_get_clone_layer = _rpythonic_function_(		"CustomData_get_clone_layer", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_get_stencil_layer = _rpythonic_function_(		"CustomData_get_stencil_layer", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_set = _rpythonic_function_(		"CustomData_set", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("source",		ctypes.POINTER(ctypes.c_void_p)),] )

CustomData_em_set = _rpythonic_function_(		"CustomData_em_set", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_int),
	("source",		ctypes.POINTER(ctypes.c_void_p)),] )

CustomData_em_set_n = _rpythonic_function_(		"CustomData_em_set_n", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),
	("source",		ctypes.POINTER(ctypes.c_void_p)),] )

CustomData_bmesh_set = _rpythonic_function_(		"CustomData_bmesh_set", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_int),
	("source",		ctypes.POINTER(ctypes.c_void_p)),] )

CustomData_bmesh_set_n = _rpythonic_function_(		"CustomData_bmesh_set_n", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),
	("source",		ctypes.POINTER(ctypes.c_void_p)),] )

CustomData_set_layer = _rpythonic_function_(		"CustomData_set_layer", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),] )

CustomData_set_layer_n = _rpythonic_function_(		"CustomData_set_layer_n", ctypes.POINTER(ctypes.c_void_p), [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),] )

CustomData_set_layer_active = _rpythonic_function_(		"CustomData_set_layer_active", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_set_layer_render = _rpythonic_function_(		"CustomData_set_layer_render", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_set_layer_clone = _rpythonic_function_(		"CustomData_set_layer_clone", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_set_layer_stencil = _rpythonic_function_(		"CustomData_set_layer_stencil", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_set_layer_active_index = _rpythonic_function_(		"CustomData_set_layer_active_index", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_set_layer_render_index = _rpythonic_function_(		"CustomData_set_layer_render_index", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_set_layer_clone_index = _rpythonic_function_(		"CustomData_set_layer_clone_index", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_set_layer_stencil_index = _rpythonic_function_(		"CustomData_set_layer_stencil_index", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("n",		ctypes.c_int),] )

CustomData_set_layer_flag = _rpythonic_function_(		"CustomData_set_layer_flag", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("flag",		ctypes.c_int),] )

CustomData_em_set_default = _rpythonic_function_(		"CustomData_em_set_default", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

CustomData_em_free_block = _rpythonic_function_(		"CustomData_em_free_block", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

CustomData_bmesh_set_default = _rpythonic_function_(		"CustomData_bmesh_set_default", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

CustomData_bmesh_free_block = _rpythonic_function_(		"CustomData_bmesh_free_block", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

CustomData_to_em_block = _rpythonic_function_(		"CustomData_to_em_block", ctypes.c_void_p, [
	("source",		ctypes.POINTER(CustomData)),
	("dest",		ctypes.POINTER(CustomData)),
	("index",		ctypes.c_int),
	("block",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

CustomData_from_em_block = _rpythonic_function_(		"CustomData_from_em_block", ctypes.c_void_p, [
	("source",		ctypes.POINTER(CustomData)),
	("dest",		ctypes.POINTER(CustomData)),
	("block",		ctypes.POINTER(ctypes.c_void_p)),
	("index",		ctypes.c_int),] )

CustomData_to_bmesh_block = _rpythonic_function_(		"CustomData_to_bmesh_block", ctypes.c_void_p, [
	("source",		ctypes.POINTER(CustomData)),
	("dest",		ctypes.POINTER(CustomData)),
	("src_index",		ctypes.c_int),
	("dest_block",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

CustomData_from_bmesh_block = _rpythonic_function_(		"CustomData_from_bmesh_block", ctypes.c_void_p, [
	("source",		ctypes.POINTER(CustomData)),
	("dest",		ctypes.POINTER(CustomData)),
	("src_block",		ctypes.POINTER(ctypes.c_void_p)),
	("dest_index",		ctypes.c_int),] )

CustomData_file_write_info = _rpythonic_function_(		"CustomData_file_write_info", ctypes.c_void_p, [
	("C_type",		ctypes.c_int),
	("structname",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
	("structnum",		ctypes.POINTER(ctypes.c_int)),] )

CustomData_sizeof = _rpythonic_function_(		"CustomData_sizeof", ctypes.c_int, [
	("C_type",		ctypes.c_int),] )

CustomData_layertype_name = _rpythonic_function_(		"CustomData_layertype_name", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_int),] )

CustomData_set_layer_unique_name = _rpythonic_function_(		"CustomData_set_layer_unique_name", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("index",		ctypes.c_int),] )

CustomData_validate_layer_name = _rpythonic_function_(		"CustomData_validate_layer_name", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("outname",		ctypes.POINTER(ctypes.c_char)),] )

CustomData_verify_versions = _rpythonic_function_(		"CustomData_verify_versions", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("index",		ctypes.c_int),] )

CustomData_to_bmeshpoly = _rpythonic_function_(		"CustomData_to_bmeshpoly", ctypes.c_void_p, [
	("fdata",		ctypes.POINTER(CustomData)),
	("pdata",		ctypes.POINTER(CustomData)),
	("ldata",		ctypes.POINTER(CustomData)),] )

CustomData_from_bmeshpoly = _rpythonic_function_(		"CustomData_from_bmeshpoly", ctypes.c_void_p, [
	("fdata",		ctypes.POINTER(CustomData)),
	("pdata",		ctypes.POINTER(CustomData)),
	("ldata",		ctypes.POINTER(CustomData)),
	("total",		ctypes.c_int),] )

CustomData_bmesh_init_pool = _rpythonic_function_(		"CustomData_bmesh_init_pool", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("allocsize",		ctypes.c_int),] )

CustomData_external_add = _rpythonic_function_(		"CustomData_external_add", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_id",		ctypes.POINTER(ID)),
	("C_type",		ctypes.c_int),
	("totelem",		ctypes.c_int),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

CustomData_external_remove = _rpythonic_function_(		"CustomData_external_remove", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_id",		ctypes.POINTER(ID)),
	("C_type",		ctypes.c_int),
	("totelem",		ctypes.c_int),] )

CustomData_external_test = _rpythonic_function_(		"CustomData_external_test", ctypes.c_int, [
	("data",		ctypes.POINTER(CustomData)),
	("C_type",		ctypes.c_int),] )

CustomData_external_write = _rpythonic_function_(		"CustomData_external_write", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_id",		ctypes.POINTER(ID)),
	("mask",		ctypes.c_uint),
	("totelem",		ctypes.c_int),
	("free",		ctypes.c_int),] )

CustomData_external_read = _rpythonic_function_(		"CustomData_external_read", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_id",		ctypes.POINTER(ID)),
	("mask",		ctypes.c_uint),
	("totelem",		ctypes.c_int),] )

CustomData_external_reload = _rpythonic_function_(		"CustomData_external_reload", ctypes.c_void_p, [
	("data",		ctypes.POINTER(CustomData)),
	("C_id",		ctypes.POINTER(ID)),
	("mask",		ctypes.c_uint),
	("totelem",		ctypes.c_int),] )

BVHTree_NearestPointCallback = _rpythonic_function_(		"BVHTree_NearestPointCallback", ctypes.c_void_p, [
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("index",		ctypes.c_int),
	("co",		ctypes.POINTER(ctypes.c_float)),
	("nearest",		ctypes.POINTER(BVHTreeNearest)),] )

BVHTree_RayCastCallback = _rpythonic_function_(		"BVHTree_RayCastCallback", ctypes.c_void_p, [
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("index",		ctypes.c_int),
	("ray",		ctypes.POINTER(BVHTreeRay)),
	("hit",		ctypes.POINTER(BVHTreeRayHit)),] )

BVHTree_RangeQuery = _rpythonic_function_(		"BVHTree_RangeQuery", ctypes.c_void_p, [
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("index",		ctypes.c_int),
	("squared_dist",		ctypes.c_float),] )

BLI_bvhtree_new = _rpythonic_function_(		"BLI_bvhtree_new", ctypes.POINTER(BVHTree), [
	("maxsize",		ctypes.c_int),
	("epsilon",		ctypes.c_float),
	("tree_type",		ctypes.c_char),
	("axis",		ctypes.c_char),] )

BLI_bvhtree_free = _rpythonic_function_(		"BLI_bvhtree_free", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(BVHTree)),] )

BLI_bvhtree_insert = _rpythonic_function_(		"BLI_bvhtree_insert", ctypes.c_int, [
	("tree",		ctypes.POINTER(BVHTree)),
	("index",		ctypes.c_int),
	("co",		ctypes.POINTER(ctypes.c_float)),
	("numpoints",		ctypes.c_int),] )

BLI_bvhtree_balance = _rpythonic_function_(		"BLI_bvhtree_balance", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(BVHTree)),] )

BLI_bvhtree_update_node = _rpythonic_function_(		"BLI_bvhtree_update_node", ctypes.c_int, [
	("tree",		ctypes.POINTER(BVHTree)),
	("index",		ctypes.c_int),
	("co",		ctypes.POINTER(ctypes.c_float)),
	("co_moving",		ctypes.POINTER(ctypes.c_float)),
	("numpoints",		ctypes.c_int),] )

BLI_bvhtree_update_tree = _rpythonic_function_(		"BLI_bvhtree_update_tree", ctypes.c_void_p, [
	("tree",		ctypes.POINTER(BVHTree)),] )

BLI_bvhtree_overlap = _rpythonic_function_(		"BLI_bvhtree_overlap", ctypes.POINTER(BVHTreeOverlap), [
	("tree1",		ctypes.POINTER(BVHTree)),
	("tree2",		ctypes.POINTER(BVHTree)),
	("result",		ctypes.POINTER(ctypes.c_uint)),] )

BLI_bvhtree_getepsilon = _rpythonic_function_(		"BLI_bvhtree_getepsilon", ctypes.c_float, [
	("tree",		ctypes.POINTER(BVHTree)),] )

BLI_bvhtree_find_nearest = _rpythonic_function_(		"BLI_bvhtree_find_nearest", ctypes.c_int, [
	("tree",		ctypes.POINTER(BVHTree)),
	("co",		( ctypes.c_float * 3 )),
	("nearest",		ctypes.POINTER(BVHTreeNearest)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,ctypes.POINTER(ctypes.c_float),ctypes.POINTER(BVHTreeNearest),)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_bvhtree_ray_cast = _rpythonic_function_(		"BLI_bvhtree_ray_cast", ctypes.c_int, [
	("tree",		ctypes.POINTER(BVHTree)),
	("co",		( ctypes.c_float * 3 )),
	("dir",		ctypes.POINTER(ctypes.c_float)),
	("radius",		ctypes.c_float),
	("hit",		ctypes.POINTER(BVHTreeRayHit)),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,ctypes.POINTER(BVHTreeRay),ctypes.POINTER(BVHTreeRayHit),)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

BLI_bvhtree_bb_raycast = _rpythonic_function_(		"BLI_bvhtree_bb_raycast", ctypes.c_float, [
	("bv",		ctypes.POINTER(ctypes.c_float)),
	("light_start",		( ctypes.c_float * 3 )),
	("light_end",		( ctypes.c_float * 3 )),
	("pos",		( ctypes.c_float * 3 )),] )

BLI_bvhtree_range_query = _rpythonic_function_(		"BLI_bvhtree_range_query", ctypes.c_int, [
	("tree",		ctypes.POINTER(BVHTree)),
	("co",		( ctypes.c_float * 3 )),
	("radius",		ctypes.c_float),
	("callback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,ctypes.c_float,)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

bvhtree_from_mesh_verts = _rpythonic_function_(		"bvhtree_from_mesh_verts", ctypes.POINTER(BVHTree), [
	("data",		ctypes.POINTER(BVHTreeFromMesh)),
	("mesh",		ctypes.POINTER(DerivedMesh)),
	("epsilon",		ctypes.c_float),
	("tree_type",		ctypes.c_int),
	("axis",		ctypes.c_int),] )

bvhtree_from_mesh_faces = _rpythonic_function_(		"bvhtree_from_mesh_faces", ctypes.POINTER(BVHTree), [
	("data",		ctypes.POINTER(BVHTreeFromMesh)),
	("mesh",		ctypes.POINTER(DerivedMesh)),
	("epsilon",		ctypes.c_float),
	("tree_type",		ctypes.c_int),
	("axis",		ctypes.c_int),] )

bvhtree_from_mesh_edges = _rpythonic_function_(		"bvhtree_from_mesh_edges", ctypes.POINTER(BVHTree), [
	("data",		ctypes.POINTER(BVHTreeFromMesh)),
	("mesh",		ctypes.POINTER(DerivedMesh)),
	("epsilon",		ctypes.c_float),
	("tree_type",		ctypes.c_int),
	("axis",		ctypes.c_int),] )

free_bvhtree_from_mesh = _rpythonic_function_(		"free_bvhtree_from_mesh", ctypes.c_void_p, [
	("data",		ctypes.POINTER(BVHTreeFromMesh)),] )

bvhtree_ray_tri_intersection = _rpythonic_function_(		"bvhtree_ray_tri_intersection", ctypes.c_float, [
	("ray",		ctypes.POINTER(BVHTreeRay)),
	("m_dist",		ctypes.c_float),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),] )

nearest_point_in_tri_surface = _rpythonic_function_(		"nearest_point_in_tri_surface", ctypes.c_float, [
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("p",		( ctypes.c_float * 3 )),
	("v",		ctypes.POINTER(ctypes.c_int)),
	("e",		ctypes.POINTER(ctypes.c_int)),
	("nearest",		( ctypes.c_float * 3 )),] )

bvhcache_find = _rpythonic_function_(		"bvhcache_find", ctypes.POINTER(BVHTree), [
	("cache",		ctypes.POINTER(ctypes.POINTER(LinkNode))),
	("C_type",		ctypes.c_int),] )

bvhcache_insert = _rpythonic_function_(		"bvhcache_insert", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(ctypes.POINTER(LinkNode))),
	("tree",		ctypes.POINTER(BVHTree)),
	("C_type",		ctypes.c_int),] )

bvhcache_init = _rpythonic_function_(		"bvhcache_init", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(ctypes.POINTER(LinkNode))),] )

bvhcache_free = _rpythonic_function_(		"bvhcache_free", ctypes.c_void_p, [
	("cache",		ctypes.POINTER(ctypes.POINTER(LinkNode))),] )

getNumVerts = _rpythonic_function_(		"getNumVerts", ctypes.c_int, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getNumFaces = _rpythonic_function_(		"getNumFaces", ctypes.c_int, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getNumEdges = _rpythonic_function_(		"getNumEdges", ctypes.c_int, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getVert = _rpythonic_function_(		"getVert", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("vert_r",		ctypes.POINTER(MVert)),] )

getEdge = _rpythonic_function_(		"getEdge", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("edge_r",		ctypes.POINTER(MEdge)),] )

getFace = _rpythonic_function_(		"getFace", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("face_r",		ctypes.POINTER(MFace)),] )

getVertArray = _rpythonic_function_(		"getVertArray", ctypes.POINTER(MVert), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getEdgeArray = _rpythonic_function_(		"getEdgeArray", ctypes.POINTER(MEdge), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getFaceArray = _rpythonic_function_(		"getFaceArray", ctypes.POINTER(MFace), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

copyVertArray = _rpythonic_function_(		"copyVertArray", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("vert_r",		ctypes.POINTER(MVert)),] )

copyEdgeArray = _rpythonic_function_(		"copyEdgeArray", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("edge_r",		ctypes.POINTER(MEdge)),] )

copyFaceArray = _rpythonic_function_(		"copyFaceArray", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("face_r",		ctypes.POINTER(MFace)),] )

dupVertArray = _rpythonic_function_(		"dupVertArray", ctypes.POINTER(MVert), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

dupEdgeArray = _rpythonic_function_(		"dupEdgeArray", ctypes.POINTER(MEdge), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

dupFaceArray = _rpythonic_function_(		"dupFaceArray", ctypes.POINTER(MFace), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getVertData = _rpythonic_function_(		"getVertData", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),] )

getEdgeData = _rpythonic_function_(		"getEdgeData", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),] )

getFaceData = _rpythonic_function_(		"getFaceData", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),] )

getVertDataArray = _rpythonic_function_(		"getVertDataArray", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),] )

getEdgeDataArray = _rpythonic_function_(		"getEdgeDataArray", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),] )

getFaceDataArray = _rpythonic_function_(		"getFaceDataArray", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),] )

getNumGrids = _rpythonic_function_(		"getNumGrids", ctypes.c_int, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getGridSize = _rpythonic_function_(		"getGridSize", ctypes.c_int, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getGridData = _rpythonic_function_(		"getGridData", ctypes.POINTER(ctypes.POINTER(DMGridData)), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getGridAdjacency = _rpythonic_function_(		"getGridAdjacency", ctypes.POINTER(DMGridAdjacency), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getGridOffset = _rpythonic_function_(		"getGridOffset", ctypes.POINTER(ctypes.c_int), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

foreachMappedVert = _rpythonic_function_(		"foreachMappedVert", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("func",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

foreachMappedEdge = _rpythonic_function_(		"foreachMappedEdge", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("func",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

foreachMappedFaceCenter = _rpythonic_function_(		"foreachMappedFaceCenter", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("func",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

getMinMax = _rpythonic_function_(		"getMinMax", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("min_r",		( ctypes.c_float * 3 )),
	("max_r",		( ctypes.c_float * 3 )),] )

getVertCo = _rpythonic_function_(		"getVertCo", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("co_r",		( ctypes.c_float * 3 )),] )

getVertCos = _rpythonic_function_(		"getVertCos", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("cos_r",		ctypes.POINTER(ctypes.c_float)),] )

getVertNo = _rpythonic_function_(		"getVertNo", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("no_r",		( ctypes.c_float * 3 )),] )

getFaceMap = _rpythonic_function_(		"getFaceMap", ctypes.POINTER(ListBase), [
	("ob",		ctypes.POINTER(Object)),
	("dm",		ctypes.POINTER(DerivedMesh)),] )

getPBVH = _rpythonic_function_(		"getPBVH", ctypes.POINTER(PBVH), [
	("ob",		ctypes.POINTER(Object)),
	("dm",		ctypes.POINTER(DerivedMesh)),] )

drawVerts = _rpythonic_function_(		"drawVerts", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

drawUVEdges = _rpythonic_function_(		"drawUVEdges", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

drawEdges = _rpythonic_function_(		"drawEdges", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("drawLooseEdges",		ctypes.c_int),
	("drawAllEdges",		ctypes.c_int),] )

drawLooseEdges = _rpythonic_function_(		"drawLooseEdges", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

drawFacesSolid = _rpythonic_function_(		"drawFacesSolid", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("partial_redraw_planes",		ctypes.POINTER(ctypes.c_float)),
	("fast",		ctypes.c_int),
	("setMaterial",		ctypes.c_void_p),] )

setMaterial = _rpythonic_function_(		"setMaterial", ctypes.c_int, [
	("none",		ctypes.c_int),
	("attribs",		ctypes.POINTER(ctypes.c_void_p)),] )

drawFacesColored = _rpythonic_function_(		"drawFacesColored", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("useTwoSided",		ctypes.c_int),
	("col1",		ctypes.POINTER(ctypes.c_ubyte)),
	("col2",		ctypes.POINTER(ctypes.c_ubyte)),] )

drawFacesTex = _rpythonic_function_(		"drawFacesTex", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("setDrawOptions",		ctypes.c_void_p),
	("compareDrawOptions",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

setDrawOptions = _rpythonic_function_(		"setDrawOptions", ctypes.c_int, [
	("tface",		ctypes.POINTER(MTFace)),
	("has_mcol",		ctypes.c_int),
	("matnr",		ctypes.c_int),] )

compareDrawOptions = _rpythonic_function_(		"compareDrawOptions", ctypes.c_int, [
	("userData",		ctypes.POINTER(ctypes.c_void_p)),
	("cur_index",		ctypes.c_int),
	("next_index",		ctypes.c_int),] )

drawFacesGLSL = _rpythonic_function_(		"drawFacesGLSL", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("setMaterial",		ctypes.c_void_p),] )

drawMappedFaces = _rpythonic_function_(		"drawMappedFaces", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("setDrawOptions",		ctypes.c_void_p),
	("setMaterial",		ctypes.c_void_p),
	("compareDrawOptions",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),
	("useColors",		ctypes.c_int),] )

drawMappedFacesTex = _rpythonic_function_(		"drawMappedFacesTex", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("setDrawOptions",		ctypes.c_void_p),
	("compareDrawOptions",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

drawMappedFacesGLSL = _rpythonic_function_(		"drawMappedFacesGLSL", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("setMaterial",		ctypes.c_void_p),
	("setDrawOptions",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

drawMappedEdges = _rpythonic_function_(		"drawMappedEdges", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("setDrawOptions",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

drawMappedEdgesInterp = _rpythonic_function_(		"drawMappedEdgesInterp", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("setDrawOptions",		ctypes.c_void_p),
	("setDrawInterpOptions",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

setDrawInterpOptions = _rpythonic_function_(		"setDrawInterpOptions", ctypes.c_void_p, [
	("userData",		ctypes.POINTER(ctypes.c_void_p)),
	("index",		ctypes.c_int),
	("t",		ctypes.c_float),] )

drawMappedFacesMat = _rpythonic_function_(		"drawMappedFacesMat", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("setMaterial",		ctypes.c_void_p),
	("setFace",		ctypes.c_void_p),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

setFace = _rpythonic_function_(		"setFace", ctypes.c_int, [
	("userData",		ctypes.POINTER(ctypes.c_void_p)),
	("index",		ctypes.c_int),] )

DM_init_funcs = _rpythonic_function_(		"DM_init_funcs", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

release = _rpythonic_function_(		"release", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

DM_init = _rpythonic_function_(		"DM_init", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),
	("numVerts",		ctypes.c_int),
	("numEdges",		ctypes.c_int),
	("numFaces",		ctypes.c_int),] )

DM_from_template = _rpythonic_function_(		"DM_from_template", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("source",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),
	("numVerts",		ctypes.c_int),
	("numEdges",		ctypes.c_int),
	("numFaces",		ctypes.c_int),] )

DM_release = _rpythonic_function_(		"DM_release", ctypes.c_int, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

DM_to_mesh = _rpythonic_function_(		"DM_to_mesh", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("me",		ctypes.POINTER(Mesh)),] )

DM_to_meshkey = _rpythonic_function_(		"DM_to_meshkey", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("me",		ctypes.POINTER(Mesh)),
	("kb",		ctypes.POINTER(KeyBlock)),] )

DM_set_only_copy = _rpythonic_function_(		"DM_set_only_copy", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("mask",		ctypes.c_uint),] )

DM_add_vert_layer = _rpythonic_function_(		"DM_add_vert_layer", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),
	("alloctype",		ctypes.c_int),
	("layer",		ctypes.POINTER(ctypes.c_void_p)),] )

DM_add_edge_layer = _rpythonic_function_(		"DM_add_edge_layer", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),
	("alloctype",		ctypes.c_int),
	("layer",		ctypes.POINTER(ctypes.c_void_p)),] )

DM_add_face_layer = _rpythonic_function_(		"DM_add_face_layer", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),
	("alloctype",		ctypes.c_int),
	("layer",		ctypes.POINTER(ctypes.c_void_p)),] )

DM_get_vert_data = _rpythonic_function_(		"DM_get_vert_data", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),] )

DM_get_edge_data = _rpythonic_function_(		"DM_get_edge_data", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),] )

DM_get_face_data = _rpythonic_function_(		"DM_get_face_data", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),] )

DM_get_vert_data_layer = _rpythonic_function_(		"DM_get_vert_data_layer", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),] )

DM_get_edge_data_layer = _rpythonic_function_(		"DM_get_edge_data_layer", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),] )

DM_get_face_data_layer = _rpythonic_function_(		"DM_get_face_data_layer", ctypes.POINTER(ctypes.c_void_p), [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("C_type",		ctypes.c_int),] )

DM_set_vert_data = _rpythonic_function_(		"DM_set_vert_data", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

DM_set_edge_data = _rpythonic_function_(		"DM_set_edge_data", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

DM_set_face_data = _rpythonic_function_(		"DM_set_face_data", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

DM_copy_vert_data = _rpythonic_function_(		"DM_copy_vert_data", ctypes.c_void_p, [
	("source",		ctypes.POINTER(DerivedMesh)),
	("dest",		ctypes.POINTER(DerivedMesh)),
	("source_index",		ctypes.c_int),
	("dest_index",		ctypes.c_int),
	("count",		ctypes.c_int),] )

DM_copy_edge_data = _rpythonic_function_(		"DM_copy_edge_data", ctypes.c_void_p, [
	("source",		ctypes.POINTER(DerivedMesh)),
	("dest",		ctypes.POINTER(DerivedMesh)),
	("source_index",		ctypes.c_int),
	("dest_index",		ctypes.c_int),
	("count",		ctypes.c_int),] )

DM_copy_face_data = _rpythonic_function_(		"DM_copy_face_data", ctypes.c_void_p, [
	("source",		ctypes.POINTER(DerivedMesh)),
	("dest",		ctypes.POINTER(DerivedMesh)),
	("source_index",		ctypes.c_int),
	("dest_index",		ctypes.c_int),
	("count",		ctypes.c_int),] )

DM_free_vert_data = _rpythonic_function_(		"DM_free_vert_data", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("count",		ctypes.c_int),] )

DM_free_edge_data = _rpythonic_function_(		"DM_free_edge_data", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("count",		ctypes.c_int),] )

DM_free_face_data = _rpythonic_function_(		"DM_free_face_data", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("count",		ctypes.c_int),] )

DM_interp_vert_data = _rpythonic_function_(		"DM_interp_vert_data", ctypes.c_void_p, [
	("source",		ctypes.POINTER(DerivedMesh)),
	("dest",		ctypes.POINTER(DerivedMesh)),
	("src_indices",		ctypes.POINTER(ctypes.c_int)),
	("weights",		ctypes.POINTER(ctypes.c_float)),
	("count",		ctypes.c_int),
	("dest_index",		ctypes.c_int),] )

DM_interp_edge_data = _rpythonic_function_(		"DM_interp_edge_data", ctypes.c_void_p, [
	("source",		ctypes.POINTER(DerivedMesh)),
	("dest",		ctypes.POINTER(DerivedMesh)),
	("src_indices",		ctypes.POINTER(ctypes.c_int)),
	("weights",		ctypes.POINTER(ctypes.c_float)),
	("vert_weights",		ctypes.POINTER(( ctypes.c_float * 2 ))),
	("count",		ctypes.c_int),
	("dest_index",		ctypes.c_int),] )

DM_interp_face_data = _rpythonic_function_(		"DM_interp_face_data", ctypes.c_void_p, [
	("source",		ctypes.POINTER(DerivedMesh)),
	("dest",		ctypes.POINTER(DerivedMesh)),
	("src_indices",		ctypes.POINTER(ctypes.c_int)),
	("weights",		ctypes.POINTER(ctypes.c_float)),
	("vert_weights",		ctypes.POINTER(( ctypes.c_float * 4 ))),
	("count",		ctypes.c_int),
	("dest_index",		ctypes.c_int),] )

DM_swap_face_data = _rpythonic_function_(		"DM_swap_face_data", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("index",		ctypes.c_int),
	("corner_indices",		ctypes.POINTER(ctypes.c_int)),] )

vDM_ColorBand_store = _rpythonic_function_(		"vDM_ColorBand_store", ctypes.c_void_p, [
	("coba",		ctypes.POINTER(ColorBand)),] )

mesh_get_mapped_verts_nors = _rpythonic_function_(		"mesh_get_mapped_verts_nors", ctypes.POINTER(ctypes.c_float), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),] )

mesh_get_derived_final = _rpythonic_function_(		"mesh_get_derived_final", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("dataMask",		ctypes.c_uint),] )

mesh_get_derived_deform = _rpythonic_function_(		"mesh_get_derived_deform", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("dataMask",		ctypes.c_uint),] )

mesh_create_derived_for_modifier = _rpythonic_function_(		"mesh_create_derived_for_modifier", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("md",		ctypes.POINTER(ModifierData)),] )

mesh_create_derived_render = _rpythonic_function_(		"mesh_create_derived_render", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("dataMask",		ctypes.c_uint),] )

mesh_create_derived_index_render = _rpythonic_function_(		"mesh_create_derived_index_render", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("dataMask",		ctypes.c_uint),
	("index",		ctypes.c_int),] )

mesh_create_derived = _rpythonic_function_(		"mesh_create_derived", ctypes.POINTER(DerivedMesh), [
	("me",		ctypes.POINTER(Mesh)),
	("ob",		ctypes.POINTER(Object)),
	("vertCos",		ctypes.POINTER(ctypes.c_float)),] )

mesh_create_derived_view = _rpythonic_function_(		"mesh_create_derived_view", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("dataMask",		ctypes.c_uint),] )

mesh_create_derived_no_deform = _rpythonic_function_(		"mesh_create_derived_no_deform", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("vertCos",		ctypes.POINTER(ctypes.c_float)),
	("dataMask",		ctypes.c_uint),] )

mesh_create_derived_no_deform_render = _rpythonic_function_(		"mesh_create_derived_no_deform_render", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("vertCos",		ctypes.POINTER(ctypes.c_float)),
	("dataMask",		ctypes.c_uint),] )

mesh_create_derived_no_virtual = _rpythonic_function_(		"mesh_create_derived_no_virtual", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("vertCos",		ctypes.POINTER(ctypes.c_float)),
	("dataMask",		ctypes.c_uint),] )

mesh_create_derived_physics = _rpythonic_function_(		"mesh_create_derived_physics", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("vertCos",		ctypes.POINTER(ctypes.c_float)),
	("dataMask",		ctypes.c_uint),] )

editmesh_get_derived = _rpythonic_function_(		"editmesh_get_derived", ctypes.POINTER(DerivedMesh), [
	("em",		ctypes.POINTER(EditMesh)),
	("vertexCos",		ctypes.POINTER(ctypes.c_float)),] )

editmesh_get_derived_base = _rpythonic_function_(		"editmesh_get_derived_base", ctypes.POINTER(DerivedMesh), [
	("Object",		ctypes.POINTER(Object)),
	("em",		ctypes.POINTER(EditMesh)),] )

editmesh_get_derived_cage = _rpythonic_function_(		"editmesh_get_derived_cage", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("Object",		ctypes.POINTER(Object)),
	("em",		ctypes.POINTER(EditMesh)),
	("dataMask",		ctypes.c_uint),] )

editmesh_get_derived_cage_and_final = _rpythonic_function_(		"editmesh_get_derived_cage_and_final", ctypes.POINTER(DerivedMesh), [
	("scene",		ctypes.POINTER(Scene)),
	("Object",		ctypes.POINTER(Object)),
	("em",		ctypes.POINTER(EditMesh)),
	("final_r",		ctypes.POINTER(ctypes.POINTER(DerivedMesh))),
	("dataMask",		ctypes.c_uint),] )

editmesh_get_vertex_cos = _rpythonic_function_(		"editmesh_get_vertex_cos", ctypes.POINTER(ctypes.c_float), [
	("em",		ctypes.POINTER(EditMesh)),
	("numVerts_r",		ctypes.POINTER(ctypes.c_int)),] )

editmesh_modifier_is_enabled = _rpythonic_function_(		"editmesh_modifier_is_enabled", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("md",		ctypes.POINTER(ModifierData)),
	("dm",		ctypes.POINTER(DerivedMesh)),] )

makeDerivedMesh = _rpythonic_function_(		"makeDerivedMesh", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("em",		ctypes.POINTER(EditMesh)),
	("dataMask",		ctypes.c_uint),] )

editmesh_get_first_deform_matrices = _rpythonic_function_(		"editmesh_get_first_deform_matrices", ctypes.c_int, [
	("Scene",		ctypes.POINTER(Scene)),
	("Object",		ctypes.POINTER(Object)),
	("em",		ctypes.POINTER(EditMesh)),
	("deformmats",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("deformcos",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),] )

sculpt_get_deform_matrices = _rpythonic_function_(		"sculpt_get_deform_matrices", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("deformmats",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("deformcos",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),] )

weight_to_rgb = _rpythonic_function_(		"weight_to_rgb", ctypes.c_void_p, [
	("r_rgb",		( ctypes.c_float * 3 )),
	("weight",		ctypes.c_float),] )

DM_vertex_attributes_from_gpu = _rpythonic_function_(		"DM_vertex_attributes_from_gpu", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("gattribs",		ctypes.POINTER(GPUVertexAttribs)),
	("attribs",		ctypes.POINTER(DMVertexAttribs)),] )

DM_add_tangent_layer = _rpythonic_function_(		"DM_add_tangent_layer", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

DM_calc_auto_bump_scale = _rpythonic_function_(		"DM_calc_auto_bump_scale", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

DM_set_object_boundbox = _rpythonic_function_(		"DM_set_object_boundbox", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("dm",		ctypes.POINTER(DerivedMesh)),] )

bvhtree_build_from_mvert = _rpythonic_function_(		"bvhtree_build_from_mvert", ctypes.POINTER(BVHTree), [
	("mfaces",		ctypes.POINTER(MFace)),
	("numfaces",		ctypes.c_uint),
	("x",		ctypes.POINTER(MVert)),
	("numverts",		ctypes.c_uint),
	("epsilon",		ctypes.c_float),] )

bvhtree_update_from_mvert = _rpythonic_function_(		"bvhtree_update_from_mvert", ctypes.c_void_p, [
	("bvhtree",		ctypes.POINTER(BVHTree)),
	("faces",		ctypes.POINTER(MFace)),
	("numfaces",		ctypes.c_int),
	("x",		ctypes.POINTER(MVert)),
	("xnew",		ctypes.POINTER(MVert)),
	("numverts",		ctypes.c_int),
	("moving",		ctypes.c_int),] )

BLI_linklist_append_fast = _rpythonic_function_(		"BLI_linklist_append_fast", ctypes.POINTER(LinkNode), [
	("listp",		ctypes.POINTER(ctypes.POINTER(LinkNode))),
	("ptr",		ctypes.POINTER(ctypes.c_void_p)),] )

collision_move_object = _rpythonic_function_(		"collision_move_object", ctypes.c_void_p, [
	("collmd",		ctypes.POINTER(CollisionModifierData)),
	("step",		ctypes.c_float),
	("prevstep",		ctypes.c_float),] )

collisions_compute_barycentric = _rpythonic_function_(		"collisions_compute_barycentric", ctypes.c_void_p, [
	("pv",		( ctypes.c_float * 3 )),
	("p1",		( ctypes.c_float * 3 )),
	("p2",		( ctypes.c_float * 3 )),
	("p3",		( ctypes.c_float * 3 )),
	("w1",		ctypes.POINTER(ctypes.c_float)),
	("w2",		ctypes.POINTER(ctypes.c_float)),
	("w3",		ctypes.POINTER(ctypes.c_float)),] )

interpolateOnTriangle = _rpythonic_function_(		"interpolateOnTriangle", ctypes.c_void_p, [
	("to",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),
	("v3",		( ctypes.c_float * 3 )),
	("w1",		ctypes.c_double),
	("w2",		ctypes.c_double),
	("w3",		ctypes.c_double),] )

get_collisionobjects = _rpythonic_function_(		"get_collisionobjects", ctypes.POINTER(ctypes.POINTER(Object)), [
	("scene",		ctypes.POINTER(Scene)),
	("C_self",		ctypes.POINTER(Object)),
	("group",		ctypes.POINTER(Group)),
	("numcollobj",		ctypes.POINTER(ctypes.c_uint)),] )

get_collider_cache = _rpythonic_function_(		"get_collider_cache", ctypes.POINTER(ListBase), [
	("scene",		ctypes.POINTER(Scene)),
	("C_self",		ctypes.POINTER(Object)),
	("group",		ctypes.POINTER(Group)),] )

free_collider_cache = _rpythonic_function_(		"free_collider_cache", ctypes.c_void_p, [
	("colliders",		ctypes.POINTER(ctypes.POINTER(ListBase))),] )

cloth_bvh_objcollision = _rpythonic_function_(		"cloth_bvh_objcollision", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),
	("clmd",		ctypes.POINTER(ClothModifierData)),
	("step",		ctypes.c_float),
	("dt",		ctypes.c_float),] )

implicit_init = _rpythonic_function_(		"implicit_init", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),
	("clmd",		ctypes.POINTER(ClothModifierData)),] )

implicit_free = _rpythonic_function_(		"implicit_free", ctypes.c_int, [
	("clmd",		ctypes.POINTER(ClothModifierData)),] )

implicit_solver = _rpythonic_function_(		"implicit_solver", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),
	("frame",		ctypes.c_float),
	("clmd",		ctypes.POINTER(ClothModifierData)),
	("effectors",		ctypes.POINTER(ListBase)),] )

implicit_set_positions = _rpythonic_function_(		"implicit_set_positions", ctypes.c_void_p, [
	("clmd",		ctypes.POINTER(ClothModifierData)),] )

clmdSetInterruptCallBack = _rpythonic_function_(		"clmdSetInterruptCallBack", ctypes.c_void_p, [
	("f",		ctypes.c_void_p),] )

cloth_free_modifier_extern = _rpythonic_function_(		"cloth_free_modifier_extern", ctypes.c_void_p, [
	("clmd",		ctypes.POINTER(ClothModifierData)),] )

cloth_free_modifier = _rpythonic_function_(		"cloth_free_modifier", ctypes.c_void_p, [
	("clmd",		ctypes.POINTER(ClothModifierData)),] )

cloth_init = _rpythonic_function_(		"cloth_init", ctypes.c_void_p, [
	("clmd",		ctypes.POINTER(ClothModifierData)),] )

clothModifier_do = _rpythonic_function_(		"clothModifier_do", ctypes.POINTER(DerivedMesh), [
	("clmd",		ctypes.POINTER(ClothModifierData)),
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("dm",		ctypes.POINTER(DerivedMesh)),] )

cloth_update_normals = _rpythonic_function_(		"cloth_update_normals", ctypes.c_void_p, [
	("verts",		ctypes.POINTER(ClothVertex)),
	("nVerts",		ctypes.c_int),
	("face",		ctypes.POINTER(MFace)),
	("totface",		ctypes.c_int),] )

cloth_uses_vgroup = _rpythonic_function_(		"cloth_uses_vgroup", ctypes.c_int, [
	("clmd",		ctypes.POINTER(ClothModifierData)),] )

bvhtree_update_from_cloth = _rpythonic_function_(		"bvhtree_update_from_cloth", ctypes.c_void_p, [
	("clmd",		ctypes.POINTER(ClothModifierData)),
	("moving",		ctypes.c_int),] )

bvhselftree_update_from_cloth = _rpythonic_function_(		"bvhselftree_update_from_cloth", ctypes.c_void_p, [
	("clmd",		ctypes.POINTER(ClothModifierData)),
	("moving",		ctypes.c_int),] )

cloth_clear_cache = _rpythonic_function_(		"cloth_clear_cache", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("clmd",		ctypes.POINTER(ClothModifierData)),
	("framenr",		ctypes.c_float),] )

cloth_add_spring = _rpythonic_function_(		"cloth_add_spring", ctypes.c_int, [
	("clmd",		ctypes.POINTER(ClothModifierData)),
	("indexA",		ctypes.c_uint),
	("indexB",		ctypes.c_uint),
	("restlength",		ctypes.c_float),
	("spring_type",		ctypes.c_int),] )

solver = _rpythonic_function_(		"solver", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),
	("framenr",		ctypes.c_float),
	("clmd",		ctypes.POINTER(ClothModifierData)),
	("effectors",		ctypes.POINTER(ListBase)),] )

BKE_tracking_init_settings = _rpythonic_function_(		"BKE_tracking_init_settings", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),] )

BKE_tracking_clamp_track = _rpythonic_function_(		"BKE_tracking_clamp_track", ctypes.c_void_p, [
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("event",		ctypes.c_int),] )

BKE_tracking_track_flag = _rpythonic_function_(		"BKE_tracking_track_flag", ctypes.c_void_p, [
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("area",		ctypes.c_int),
	("flag",		ctypes.c_int),
	("clear",		ctypes.c_int),] )

BKE_tracking_add_track = _rpythonic_function_(		"BKE_tracking_add_track", ctypes.POINTER(MovieTrackingTrack), [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("framenr",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

BKE_tracking_insert_marker = _rpythonic_function_(		"BKE_tracking_insert_marker", ctypes.c_void_p, [
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("marker",		ctypes.POINTER(MovieTrackingMarker)),] )

BKE_tracking_delete_marker = _rpythonic_function_(		"BKE_tracking_delete_marker", ctypes.c_void_p, [
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("framenr",		ctypes.c_int),] )

BKE_tracking_get_marker = _rpythonic_function_(		"BKE_tracking_get_marker", ctypes.POINTER(MovieTrackingMarker), [
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("framenr",		ctypes.c_int),] )

BKE_tracking_ensure_marker = _rpythonic_function_(		"BKE_tracking_ensure_marker", ctypes.POINTER(MovieTrackingMarker), [
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("framenr",		ctypes.c_int),] )

BKE_tracking_exact_marker = _rpythonic_function_(		"BKE_tracking_exact_marker", ctypes.POINTER(MovieTrackingMarker), [
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("framenr",		ctypes.c_int),] )

BKE_tracking_has_marker = _rpythonic_function_(		"BKE_tracking_has_marker", ctypes.c_int, [
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("framenr",		ctypes.c_int),] )

BKE_tracking_free_track = _rpythonic_function_(		"BKE_tracking_free_track", ctypes.c_void_p, [
	("track",		ctypes.POINTER(MovieTrackingTrack)),] )

BKE_tracking_clear_path = _rpythonic_function_(		"BKE_tracking_clear_path", ctypes.c_void_p, [
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("ref_frame",		ctypes.c_int),
	("action",		ctypes.c_int),] )

BKE_tracking_test_join_tracks = _rpythonic_function_(		"BKE_tracking_test_join_tracks", ctypes.c_int, [
	("dst_track",		ctypes.POINTER(MovieTrackingTrack)),
	("src_track",		ctypes.POINTER(MovieTrackingTrack)),] )

BKE_tracking_join_tracks = _rpythonic_function_(		"BKE_tracking_join_tracks", ctypes.c_void_p, [
	("dst_track",		ctypes.POINTER(MovieTrackingTrack)),
	("src_track",		ctypes.POINTER(MovieTrackingTrack)),] )

BKE_tracking_free = _rpythonic_function_(		"BKE_tracking_free", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),] )

BKE_tracking_get_pattern_imbuf = _rpythonic_function_(		"BKE_tracking_get_pattern_imbuf", ctypes.POINTER(ImBuf), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("marker",		ctypes.POINTER(MovieTrackingMarker)),
	("margin",		ctypes.c_int),
	("anchored",		ctypes.c_int),
	("pos",		( ctypes.c_float * 2 )),
	("origin",		( ctypes.c_int * 2 )),] )

BKE_tracking_get_search_imbuf = _rpythonic_function_(		"BKE_tracking_get_search_imbuf", ctypes.POINTER(ImBuf), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("marker",		ctypes.POINTER(MovieTrackingMarker)),
	("margin",		ctypes.c_int),
	("anchored",		ctypes.c_int),
	("pos",		( ctypes.c_float * 2 )),
	("origin",		( ctypes.c_int * 2 )),] )

BKE_track_unique_name = _rpythonic_function_(		"BKE_track_unique_name", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("track",		ctypes.POINTER(MovieTrackingTrack)),] )

BKE_tracking_named_track = _rpythonic_function_(		"BKE_tracking_named_track", ctypes.POINTER(MovieTrackingTrack), [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

BKE_tracking_indexed_track = _rpythonic_function_(		"BKE_tracking_indexed_track", ctypes.POINTER(MovieTrackingTrack), [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("tracknr",		ctypes.c_int),] )

BKE_tracking_camera_shift = _rpythonic_function_(		"BKE_tracking_camera_shift", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("winx",		ctypes.c_int),
	("winy",		ctypes.c_int),
	("shiftx",		ctypes.POINTER(ctypes.c_float)),
	("shifty",		ctypes.POINTER(ctypes.c_float)),] )

BKE_tracking_camera_to_blender = _rpythonic_function_(		"BKE_tracking_camera_to_blender", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("scene",		ctypes.POINTER(Scene)),
	("camera",		ctypes.POINTER(Camera)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

BKE_get_tracking_mat = _rpythonic_function_(		"BKE_get_tracking_mat", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("mat",		( ctypes.c_float * 4 )),] )

BKE_tracking_projection_matrix = _rpythonic_function_(		"BKE_tracking_projection_matrix", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("framenr",		ctypes.c_int),
	("winx",		ctypes.c_int),
	("winy",		ctypes.c_int),
	("mat",		( ctypes.c_float * 4 )),] )

BKE_tracking_context_new = _rpythonic_function_(		"BKE_tracking_context_new", ctypes.POINTER(MovieTrackingContext), [
	("clip",		ctypes.POINTER(MovieClip)),
	("user",		ctypes.POINTER(MovieClipUser)),
	("backwards",		ctypes.c_short),
	("disable_failed",		ctypes.c_short),
	("sequence",		ctypes.c_short),] )

BKE_tracking_context_free = _rpythonic_function_(		"BKE_tracking_context_free", ctypes.c_void_p, [
	("context",		ctypes.POINTER(MovieTrackingContext)),] )

BKE_tracking_sync = _rpythonic_function_(		"BKE_tracking_sync", ctypes.c_void_p, [
	("context",		ctypes.POINTER(MovieTrackingContext)),] )

BKE_tracking_sync_user = _rpythonic_function_(		"BKE_tracking_sync_user", ctypes.c_void_p, [
	("user",		ctypes.POINTER(MovieClipUser)),
	("context",		ctypes.POINTER(MovieTrackingContext)),] )

BKE_tracking_next = _rpythonic_function_(		"BKE_tracking_next", ctypes.c_int, [
	("context",		ctypes.POINTER(MovieTrackingContext)),] )

BKE_tracking_can_reconstruct = _rpythonic_function_(		"BKE_tracking_can_reconstruct", ctypes.c_int, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("error_msg",		ctypes.POINTER(ctypes.c_char)),
	("error_size",		ctypes.c_int),] )

BKE_tracking_reconstruction_context_new = _rpythonic_function_(		"BKE_tracking_reconstruction_context_new", ctypes.POINTER(MovieReconstructContext), [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("keyframe1",		ctypes.c_int),
	("keyframe2",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

BKE_tracking_reconstruction_context_free = _rpythonic_function_(		"BKE_tracking_reconstruction_context_free", ctypes.c_void_p, [
	("context",		ctypes.POINTER(MovieReconstructContext)),] )

BKE_tracking_solve_reconstruction = _rpythonic_function_(		"BKE_tracking_solve_reconstruction", ctypes.c_void_p, [
	("context",		ctypes.POINTER(MovieReconstructContext)),
	("stop",		ctypes.POINTER(ctypes.c_short)),
	("do_update",		ctypes.POINTER(ctypes.c_short)),
	("progress",		ctypes.POINTER(ctypes.c_float)),
	("stats_message",		ctypes.POINTER(ctypes.c_char)),
	("message_size",		ctypes.c_int),] )

BKE_tracking_finish_reconstruction = _rpythonic_function_(		"BKE_tracking_finish_reconstruction", ctypes.c_int, [
	("context",		ctypes.POINTER(MovieReconstructContext)),
	("tracking",		ctypes.POINTER(MovieTracking)),] )

BKE_tracking_get_reconstructed_camera = _rpythonic_function_(		"BKE_tracking_get_reconstructed_camera", ctypes.POINTER(MovieReconstructedCamera), [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("framenr",		ctypes.c_int),] )

BKE_tracking_get_interpolated_camera = _rpythonic_function_(		"BKE_tracking_get_interpolated_camera", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("framenr",		ctypes.c_int),
	("mat",		( ctypes.c_float * 4 )),] )

BKE_tracking_detect_fast = _rpythonic_function_(		"BKE_tracking_detect_fast", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("imbuf",		ctypes.POINTER(ImBuf)),
	("framenr",		ctypes.c_int),
	("margin",		ctypes.c_int),
	("min_trackness",		ctypes.c_int),
	("min_distance",		ctypes.c_int),
	("layer",		ctypes.POINTER(bGPDlayer)),
	("place_outside_layer",		ctypes.c_int),] )

BKE_tracking_stabilization_data = _rpythonic_function_(		"BKE_tracking_stabilization_data", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("framenr",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("loc",		( ctypes.c_float * 2 )),
	("scale",		ctypes.POINTER(ctypes.c_float)),
	("angle",		ctypes.POINTER(ctypes.c_float)),] )

BKE_tracking_stabilize = _rpythonic_function_(		"BKE_tracking_stabilize", ctypes.POINTER(ImBuf), [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("framenr",		ctypes.c_int),
	("ibuf",		ctypes.POINTER(ImBuf)),
	("loc",		( ctypes.c_float * 2 )),
	("scale",		ctypes.POINTER(ctypes.c_float)),
	("angle",		ctypes.POINTER(ctypes.c_float)),] )

BKE_tracking_stabdata_to_mat4 = _rpythonic_function_(		"BKE_tracking_stabdata_to_mat4", ctypes.c_void_p, [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("loc",		( ctypes.c_float * 2 )),
	("scale",		ctypes.c_float),
	("angle",		ctypes.c_float),
	("mat",		( ctypes.c_float * 4 )),] )

BKE_tracking_apply_intrinsics = _rpythonic_function_(		"BKE_tracking_apply_intrinsics", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("co",		( ctypes.c_float * 2 )),
	("nco",		( ctypes.c_float * 2 )),] )

BKE_tracking_invert_intrinsics = _rpythonic_function_(		"BKE_tracking_invert_intrinsics", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("co",		( ctypes.c_float * 2 )),
	("nco",		( ctypes.c_float * 2 )),] )

BKE_tracking_distortion_create = _rpythonic_function_(		"BKE_tracking_distortion_create", ctypes.POINTER(MovieDistortion), [] )

BKE_tracking_distortion_copy = _rpythonic_function_(		"BKE_tracking_distortion_copy", ctypes.POINTER(MovieDistortion), [
	("distortion",		ctypes.POINTER(MovieDistortion)),] )

BKE_tracking_distortion_exec = _rpythonic_function_(		"BKE_tracking_distortion_exec", ctypes.POINTER(ImBuf), [
	("distortion",		ctypes.POINTER(MovieDistortion)),
	("tracking",		ctypes.POINTER(MovieTracking)),
	("ibuf",		ctypes.POINTER(ImBuf)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("overscan",		ctypes.c_float),
	("undistort",		ctypes.c_int),] )

BKE_tracking_distortion_destroy = _rpythonic_function_(		"BKE_tracking_distortion_destroy", ctypes.c_void_p, [
	("distortion",		ctypes.POINTER(MovieDistortion)),] )

BKE_tracking_undistort = _rpythonic_function_(		"BKE_tracking_undistort", ctypes.POINTER(ImBuf), [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("ibuf",		ctypes.POINTER(ImBuf)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("overscan",		ctypes.c_float),] )

BKE_tracking_distort = _rpythonic_function_(		"BKE_tracking_distort", ctypes.POINTER(ImBuf), [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("ibuf",		ctypes.POINTER(ImBuf)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("overscan",		ctypes.c_float),] )

BKE_tracking_select_track = _rpythonic_function_(		"BKE_tracking_select_track", ctypes.c_void_p, [
	("tracking",		ctypes.POINTER(MovieTracking)),
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("area",		ctypes.c_int),
	("extend",		ctypes.c_int),] )

BKE_tracking_deselect_track = _rpythonic_function_(		"BKE_tracking_deselect_track", ctypes.c_void_p, [
	("track",		ctypes.POINTER(MovieTrackingTrack)),
	("area",		ctypes.c_int),] )

IMB_init = _rpythonic_function_(		"IMB_init", ctypes.c_void_p, [] )

IMB_exit = _rpythonic_function_(		"IMB_exit", ctypes.c_void_p, [] )

IMB_ibImageFromMemory = _rpythonic_function_(		"IMB_ibImageFromMemory", ctypes.POINTER(ImBuf), [
	("mem",		ctypes.POINTER(ctypes.c_ubyte)),
	("size",		ctypes.c_uint),
	("flags",		ctypes.c_int),
	("descr",		ctypes.POINTER(ctypes.c_char)),] )

IMB_testiffname = _rpythonic_function_(		"IMB_testiffname", ctypes.POINTER(ImBuf), [
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

IMB_loadiffname = _rpythonic_function_(		"IMB_loadiffname", ctypes.POINTER(ImBuf), [
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

IMB_freeImBuf = _rpythonic_function_(		"IMB_freeImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_allocImBuf = _rpythonic_function_(		"IMB_allocImBuf", ctypes.POINTER(ImBuf), [
	("x",		ctypes.c_uint),
	("y",		ctypes.c_uint),
	("d",		ctypes.c_ubyte),
	("flags",		ctypes.c_uint),] )

IMB_refImBuf = _rpythonic_function_(		"IMB_refImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_makeSingleUser = _rpythonic_function_(		"IMB_makeSingleUser", ctypes.POINTER(ImBuf), [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_dupImBuf = _rpythonic_function_(		"IMB_dupImBuf", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

addzbufImBuf = _rpythonic_function_(		"addzbufImBuf", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

addzbuffloatImBuf = _rpythonic_function_(		"addzbuffloatImBuf", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_blend_color = _rpythonic_function_(		"IMB_blend_color", ctypes.c_uint, [
	("src1",		ctypes.c_uint),
	("src2",		ctypes.c_uint),
	("fac",		ctypes.c_int),
	("mode",		ctypes.c_int),] )

IMB_blend_color_float = _rpythonic_function_(		"IMB_blend_color_float", ctypes.c_void_p, [
	("dst",		ctypes.POINTER(ctypes.c_float)),
	("src1",		ctypes.POINTER(ctypes.c_float)),
	("src2",		ctypes.POINTER(ctypes.c_float)),
	("fac",		ctypes.c_float),
	("mode",		ctypes.c_int),] )

IMB_rectclip = _rpythonic_function_(		"IMB_rectclip", ctypes.c_void_p, [
	("dbuf",		ctypes.POINTER(ImBuf)),
	("sbuf",		ctypes.POINTER(ImBuf)),
	("destx",		ctypes.POINTER(ctypes.c_int)),
	("desty",		ctypes.POINTER(ctypes.c_int)),
	("srcx",		ctypes.POINTER(ctypes.c_int)),
	("srcy",		ctypes.POINTER(ctypes.c_int)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

IMB_rectcpy = _rpythonic_function_(		"IMB_rectcpy", ctypes.c_void_p, [
	("drect",		ctypes.POINTER(ImBuf)),
	("srect",		ctypes.POINTER(ImBuf)),
	("destx",		ctypes.c_int),
	("desty",		ctypes.c_int),
	("srcx",		ctypes.c_int),
	("srcy",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

IMB_rectblend = _rpythonic_function_(		"IMB_rectblend", ctypes.c_void_p, [
	("dbuf",		ctypes.POINTER(ImBuf)),
	("sbuf",		ctypes.POINTER(ImBuf)),
	("destx",		ctypes.c_int),
	("desty",		ctypes.c_int),
	("srcx",		ctypes.c_int),
	("srcy",		ctypes.c_int),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("mode",		ctypes.c_int),] )

IMB_anim_set_index_dir = _rpythonic_function_(		"IMB_anim_set_index_dir", ctypes.c_void_p, [
	("anim",		ctypes.POINTER(anim)),
	("dir",		ctypes.POINTER(ctypes.c_char)),] )

IMB_anim_index_get_frame_index = _rpythonic_function_(		"IMB_anim_index_get_frame_index", ctypes.c_int, [
	("anim",		ctypes.POINTER(anim)),
	("tc",		ctypes.c_int),
	("position",		ctypes.c_int),] )

IMB_anim_index_rebuild = _rpythonic_function_(		"IMB_anim_index_rebuild", ctypes.c_void_p, [
	("anim",		ctypes.POINTER(anim)),
	("build_tcs",		ctypes.c_int),
	("build_preview_sizes",		ctypes.c_int),
	("build_quality",		ctypes.c_int),
	("stop",		ctypes.POINTER(ctypes.c_short)),
	("do_update",		ctypes.POINTER(ctypes.c_short)),
	("progress",		ctypes.POINTER(ctypes.c_float)),] )

IMB_anim_get_duration = _rpythonic_function_(		"IMB_anim_get_duration", ctypes.c_int, [
	("anim",		ctypes.POINTER(anim)),
	("tc",		ctypes.c_int),] )

IMB_anim_get_fps = _rpythonic_function_(		"IMB_anim_get_fps", ctypes.c_int, [
	("anim",		ctypes.POINTER(anim)),
	("frs_sec",		ctypes.POINTER(ctypes.c_short)),
	("frs_sec_base",		ctypes.POINTER(ctypes.c_float)),] )

IMB_open_anim = _rpythonic_function_(		"IMB_open_anim", ctypes.POINTER(anim), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("ib_flags",		ctypes.c_int),
	("streamindex",		ctypes.c_int),] )

IMB_close_anim = _rpythonic_function_(		"IMB_close_anim", ctypes.c_void_p, [
	("anim",		ctypes.POINTER(anim)),] )

ismovie = _rpythonic_function_(		"ismovie", ctypes.c_int, [
	("filepath",		ctypes.POINTER(ctypes.c_char)),] )

IMB_anim_set_preseek = _rpythonic_function_(		"IMB_anim_set_preseek", ctypes.c_void_p, [
	("anim",		ctypes.POINTER(anim)),
	("preseek",		ctypes.c_int),] )

IMB_anim_get_preseek = _rpythonic_function_(		"IMB_anim_get_preseek", ctypes.c_int, [
	("anim",		ctypes.POINTER(anim)),] )

IMB_anim_absolute = _rpythonic_function_(		"IMB_anim_absolute", ctypes.POINTER(ImBuf), [
	("anim",		ctypes.POINTER(anim)),
	("position",		ctypes.c_int),
	("tc",		ctypes.c_int),
	("preview_size",		ctypes.c_int),] )

IMB_anim_previewframe = _rpythonic_function_(		"IMB_anim_previewframe", ctypes.POINTER(ImBuf), [
	("anim",		ctypes.POINTER(anim)),] )

IMB_free_anim = _rpythonic_function_(		"IMB_free_anim", ctypes.c_void_p, [
	("anim",		ctypes.POINTER(anim)),] )

IMB_filter = _rpythonic_function_(		"IMB_filter", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_filterN = _rpythonic_function_(		"IMB_filterN", ctypes.c_void_p, [
	("out",		ctypes.POINTER(ImBuf)),
	("C_in",		ctypes.POINTER(ImBuf)),] )

IMB_mask_filter_extend = _rpythonic_function_(		"IMB_mask_filter_extend", ctypes.c_void_p, [
	("mask",		ctypes.POINTER(ctypes.c_char)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

IMB_mask_clear = _rpythonic_function_(		"IMB_mask_clear", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("mask",		ctypes.POINTER(ctypes.c_char)),
	("val",		ctypes.c_int),] )

IMB_filter_extend = _rpythonic_function_(		"IMB_filter_extend", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("mask",		ctypes.POINTER(ctypes.c_char)),
	("filter",		ctypes.c_int),] )

IMB_makemipmap = _rpythonic_function_(		"IMB_makemipmap", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("use_filter",		ctypes.c_int),] )

IMB_remakemipmap = _rpythonic_function_(		"IMB_remakemipmap", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("use_filter",		ctypes.c_int),] )

IMB_getmipmap = _rpythonic_function_(		"IMB_getmipmap", ctypes.POINTER(ImBuf), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("level",		ctypes.c_int),] )

IMB_tile_cache_params = _rpythonic_function_(		"IMB_tile_cache_params", ctypes.c_void_p, [
	("totthread",		ctypes.c_int),
	("maxmem",		ctypes.c_int),] )

IMB_gettile = _rpythonic_function_(		"IMB_gettile", ctypes.POINTER(ctypes.c_uint), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("tx",		ctypes.c_int),
	("ty",		ctypes.c_int),
	("thread",		ctypes.c_int),] )

IMB_tiles_to_rect = _rpythonic_function_(		"IMB_tiles_to_rect", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_filtery = _rpythonic_function_(		"IMB_filtery", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_onehalf = _rpythonic_function_(		"IMB_onehalf", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_scaleImBuf = _rpythonic_function_(		"IMB_scaleImBuf", ctypes.POINTER(ImBuf), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("newx",		ctypes.c_uint),
	("newy",		ctypes.c_uint),] )

IMB_scalefastImBuf = _rpythonic_function_(		"IMB_scalefastImBuf", ctypes.POINTER(ImBuf), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("newx",		ctypes.c_uint),
	("newy",		ctypes.c_uint),] )

IMB_saveiff = _rpythonic_function_(		"IMB_saveiff", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("flags",		ctypes.c_int),] )

IMB_png_encode = _rpythonic_function_(		"IMB_png_encode", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("file",		ctypes.c_int),
	("flags",		ctypes.c_int),] )

IMB_ispic = _rpythonic_function_(		"IMB_ispic", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IMB_isanim = _rpythonic_function_(		"IMB_isanim", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

imb_get_anim_type = _rpythonic_function_(		"imb_get_anim_type", ctypes.c_int, [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

IMB_de_interlace = _rpythonic_function_(		"IMB_de_interlace", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_interlace = _rpythonic_function_(		"IMB_interlace", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_rect_from_float = _rpythonic_function_(		"IMB_rect_from_float", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_partial_rect_from_float = _rpythonic_function_(		"IMB_partial_rect_from_float", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("buffer",		ctypes.POINTER(ctypes.c_float)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

IMB_float_from_rect = _rpythonic_function_(		"IMB_float_from_rect", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_float_from_rect_simple = _rpythonic_function_(		"IMB_float_from_rect_simple", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_convert_profile = _rpythonic_function_(		"IMB_convert_profile", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("profile",		ctypes.c_int),] )

IMB_float_profile_ensure = _rpythonic_function_(		"IMB_float_profile_ensure", ctypes.POINTER(ctypes.c_float), [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("profile",		ctypes.c_int),
	("alloc",		ctypes.POINTER(ctypes.c_int)),] )

IMB_color_to_bw = _rpythonic_function_(		"IMB_color_to_bw", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_convert_rgba_to_abgr = _rpythonic_function_(		"IMB_convert_rgba_to_abgr", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_convert_bgra_to_rgba = _rpythonic_function_(		"IMB_convert_bgra_to_rgba", ctypes.c_void_p, [
	("size",		ctypes.c_int),
	("rect",		ctypes.POINTER(ctypes.c_uint)),] )

bicubic_interpolation = _rpythonic_function_(		"bicubic_interpolation", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("out",		ctypes.POINTER(ImBuf)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),
	("xout",		ctypes.c_int),
	("yout",		ctypes.c_int),] )

neareast_interpolation = _rpythonic_function_(		"neareast_interpolation", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("out",		ctypes.POINTER(ImBuf)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),
	("xout",		ctypes.c_int),
	("yout",		ctypes.c_int),] )

bilinear_interpolation = _rpythonic_function_(		"bilinear_interpolation", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("out",		ctypes.POINTER(ImBuf)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),
	("xout",		ctypes.c_int),
	("yout",		ctypes.c_int),] )

bicubic_interpolation_color = _rpythonic_function_(		"bicubic_interpolation_color", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("col",		ctypes.POINTER(ctypes.c_ubyte)),
	("col_float",		ctypes.POINTER(ctypes.c_float)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),] )

neareast_interpolation_color = _rpythonic_function_(		"neareast_interpolation_color", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("col",		ctypes.POINTER(ctypes.c_ubyte)),
	("col_float",		ctypes.POINTER(ctypes.c_float)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),] )

bilinear_interpolation_color = _rpythonic_function_(		"bilinear_interpolation_color", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("col",		ctypes.POINTER(ctypes.c_ubyte)),
	("col_float",		ctypes.POINTER(ctypes.c_float)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),] )

bilinear_interpolation_color_wrap = _rpythonic_function_(		"bilinear_interpolation_color_wrap", ctypes.c_void_p, [
	("C_in",		ctypes.POINTER(ImBuf)),
	("col",		ctypes.POINTER(ctypes.c_ubyte)),
	("col_float",		ctypes.POINTER(ctypes.c_float)),
	("u",		ctypes.c_float),
	("v",		ctypes.c_float),] )

IMB_loadiffmem = _rpythonic_function_(		"IMB_loadiffmem", ctypes.POINTER(ImBuf), [
	("mem",		ctypes.POINTER(ctypes.c_int)),
	("flags",		ctypes.c_int),] )

IMB_loadifffile = _rpythonic_function_(		"IMB_loadifffile", ctypes.POINTER(ImBuf), [
	("file",		ctypes.c_int),
	("flags",		ctypes.c_int),
	("descr",		ctypes.POINTER(ctypes.c_char)),] )

IMB_half_x = _rpythonic_function_(		"IMB_half_x", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_double_fast_x = _rpythonic_function_(		"IMB_double_fast_x", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_double_x = _rpythonic_function_(		"IMB_double_x", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_half_y = _rpythonic_function_(		"IMB_half_y", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_double_fast_y = _rpythonic_function_(		"IMB_double_fast_y", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_double_y = _rpythonic_function_(		"IMB_double_y", ctypes.POINTER(ImBuf), [
	("ibuf1",		ctypes.POINTER(ImBuf)),] )

IMB_flipx = _rpythonic_function_(		"IMB_flipx", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_flipy = _rpythonic_function_(		"IMB_flipy", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_premultiply_alpha = _rpythonic_function_(		"IMB_premultiply_alpha", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_freezbufImBuf = _rpythonic_function_(		"IMB_freezbufImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_freezbuffloatImBuf = _rpythonic_function_(		"IMB_freezbuffloatImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

IMB_rectfill = _rpythonic_function_(		"IMB_rectfill", ctypes.c_void_p, [
	("drect",		ctypes.POINTER(ImBuf)),
	("col",		( ctypes.c_float * 4 )),] )

IMB_rectfill_area = _rpythonic_function_(		"IMB_rectfill_area", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("col",		ctypes.POINTER(ctypes.c_float)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),] )

IMB_rectfill_alpha = _rpythonic_function_(		"IMB_rectfill_alpha", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("value",		ctypes.c_float),] )

buf_rectfill_area = _rpythonic_function_(		"buf_rectfill_area", ctypes.c_void_p, [
	("rect",		ctypes.POINTER(ctypes.c_ubyte)),
	("rectf",		ctypes.POINTER(ctypes.c_float)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("col",		( ctypes.c_float * 4 )),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),] )

IMB_metadata_change_field = _rpythonic_function_(		"IMB_metadata_change_field", ctypes.c_int, [
	("img",		ctypes.POINTER(ImBuf)),
	("key",		ctypes.POINTER(ctypes.c_char)),
	("field",		ctypes.POINTER(ctypes.c_char)),] )

imb_addrectImBuf = _rpythonic_function_(		"imb_addrectImBuf", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_freerectImBuf = _rpythonic_function_(		"imb_freerectImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_addrectfloatImBuf = _rpythonic_function_(		"imb_addrectfloatImBuf", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_freerectfloatImBuf = _rpythonic_function_(		"imb_freerectfloatImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_freemipmapImBuf = _rpythonic_function_(		"imb_freemipmapImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_addtilesImBuf = _rpythonic_function_(		"imb_addtilesImBuf", ctypes.c_short, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

imb_freetilesImBuf = _rpythonic_function_(		"imb_freetilesImBuf", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),] )

BPY_pyconstraint_exec = _rpythonic_function_(		"BPY_pyconstraint_exec", ctypes.c_void_p, [
	("con",		ctypes.POINTER(bPythonConstraint)),
	("cob",		ctypes.POINTER(bConstraintOb)),
	("targets",		ctypes.POINTER(ListBase)),] )

BPY_pyconstraint_target = _rpythonic_function_(		"BPY_pyconstraint_target", ctypes.c_void_p, [
	("con",		ctypes.POINTER(bPythonConstraint)),
	("ct",		ctypes.POINTER(bConstraintTarget)),] )

BPY_pyconstraint_update = _rpythonic_function_(		"BPY_pyconstraint_update", ctypes.c_void_p, [
	("owner",		ctypes.POINTER(Object)),
	("con",		ctypes.POINTER(bConstraint)),] )

BPY_is_pyconstraint = _rpythonic_function_(		"BPY_is_pyconstraint", ctypes.c_int, [
	("text",		ctypes.POINTER(Text)),] )

BPY_python_start = _rpythonic_function_(		"BPY_python_start", ctypes.c_void_p, [
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

BPY_python_end = _rpythonic_function_(		"BPY_python_end", ctypes.c_void_p, [] )

BPY_filepath_exec = _rpythonic_function_(		"BPY_filepath_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

BPY_text_exec = _rpythonic_function_(		"BPY_text_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("text",		ctypes.POINTER(Text)),
	("reports",		ctypes.POINTER(ReportList)),
	("do_jump",		ctypes.c_short),] )

BPY_text_free_code = _rpythonic_function_(		"BPY_text_free_code", ctypes.c_void_p, [
	("text",		ctypes.POINTER(Text)),] )

BPY_modules_update = _rpythonic_function_(		"BPY_modules_update", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BPY_modules_load_user = _rpythonic_function_(		"BPY_modules_load_user", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BPY_app_handlers_reset = _rpythonic_function_(		"BPY_app_handlers_reset", ctypes.c_void_p, [
	("do_all",		ctypes.c_short),] )

BPY_driver_reset = _rpythonic_function_(		"BPY_driver_reset", ctypes.c_void_p, [] )

BPY_driver_exec = _rpythonic_function_(		"BPY_driver_exec", ctypes.c_float, [
	("driver",		ctypes.POINTER(ChannelDriver)),
	("evaltime",		ctypes.c_float),] )

BPY_button_exec = _rpythonic_function_(		"BPY_button_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("expr",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_double)),
	("verbose",		ctypes.c_short),] )

BPY_string_exec = _rpythonic_function_(		"BPY_string_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("expr",		ctypes.POINTER(ctypes.c_char)),] )

BPY_DECREF = _rpythonic_function_(		"BPY_DECREF", ctypes.c_void_p, [("pyob_ptr",		ctypes.c_void_p)] )

BPY_context_member_get = _rpythonic_function_(		"BPY_context_member_get", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("member",		ctypes.POINTER(ctypes.c_char)),
	("result",		ctypes.POINTER(bContextDataResult)),] )

BPY_context_set = _rpythonic_function_(		"BPY_context_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BPY_id_release = _rpythonic_function_(		"BPY_id_release", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),] )

RE_NewRender = _rpythonic_function_(		"RE_NewRender", ctypes.POINTER(Render), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

RE_GetRender = _rpythonic_function_(		"RE_GetRender", ctypes.POINTER(Render), [
	("name",		ctypes.POINTER(ctypes.c_char)),] )

RE_RenderInProgress = _rpythonic_function_(		"RE_RenderInProgress", ctypes.c_int, [
	("re",		ctypes.POINTER(Render)),] )

RE_InitRenderCB = _rpythonic_function_(		"RE_InitRenderCB", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_FreeRender = _rpythonic_function_(		"RE_FreeRender", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_FreeAllRender = _rpythonic_function_(		"RE_FreeAllRender", ctypes.c_void_p, [] )

RE_FreeRenderResult = _rpythonic_function_(		"RE_FreeRenderResult", ctypes.c_void_p, [
	("rr",		ctypes.POINTER(RenderResult)),] )

RE_AcquireResultRead = _rpythonic_function_(		"RE_AcquireResultRead", ctypes.POINTER(RenderResult), [
	("re",		ctypes.POINTER(Render)),] )

RE_AcquireResultWrite = _rpythonic_function_(		"RE_AcquireResultWrite", ctypes.POINTER(RenderResult), [
	("re",		ctypes.POINTER(Render)),] )

RE_ReleaseResult = _rpythonic_function_(		"RE_ReleaseResult", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_AcquireResultImage = _rpythonic_function_(		"RE_AcquireResultImage", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("rr",		ctypes.POINTER(RenderResult)),] )

RE_ReleaseResultImage = _rpythonic_function_(		"RE_ReleaseResultImage", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_SwapResult = _rpythonic_function_(		"RE_SwapResult", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("rr",		ctypes.POINTER(ctypes.POINTER(RenderResult))),] )

RE_GetStats = _rpythonic_function_(		"RE_GetStats", ctypes.POINTER(RenderStats), [
	("re",		ctypes.POINTER(Render)),] )

RE_ResultGet32 = _rpythonic_function_(		"RE_ResultGet32", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("rect",		ctypes.POINTER(ctypes.c_uint)),] )

RE_GetRenderLayer = _rpythonic_function_(		"RE_GetRenderLayer", ctypes.POINTER(RenderLayer), [
	("rr",		ctypes.POINTER(RenderResult)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

RE_RenderLayerGetPass = _rpythonic_function_(		"RE_RenderLayerGetPass", ctypes.POINTER(ctypes.c_float), [
	("rl",		ctypes.POINTER(RenderLayer)),
	("passtype",		ctypes.c_int),] )

RE_InitState = _rpythonic_function_(		"RE_InitState", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("source",		ctypes.POINTER(Render)),
	("rd",		ctypes.POINTER(RenderData)),
	("srl",		ctypes.POINTER(SceneRenderLayer)),
	("winx",		ctypes.c_int),
	("winy",		ctypes.c_int),
	("disprect",		ctypes.POINTER(rcti)),] )

RE_SetDispRect = _rpythonic_function_(		"RE_SetDispRect", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("disprect",		ctypes.POINTER(rcti)),] )

RE_GetCamera = _rpythonic_function_(		"RE_GetCamera", ctypes.POINTER(Object), [
	("re",		ctypes.POINTER(Render)),] )

RE_SetCamera = _rpythonic_function_(		"RE_SetCamera", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("camera",		ctypes.POINTER(Object)),] )

RE_SetEnvmapCamera = _rpythonic_function_(		"RE_SetEnvmapCamera", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("cam_ob",		ctypes.POINTER(Object)),
	("viewscale",		ctypes.c_float),
	("clipsta",		ctypes.c_float),
	("clipend",		ctypes.c_float),] )

RE_SetWindow = _rpythonic_function_(		"RE_SetWindow", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("viewplane",		ctypes.POINTER(rctf)),
	("clipsta",		ctypes.c_float),
	("clipend",		ctypes.c_float),] )

RE_SetOrtho = _rpythonic_function_(		"RE_SetOrtho", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("viewplane",		ctypes.POINTER(rctf)),
	("clipsta",		ctypes.c_float),
	("clipend",		ctypes.c_float),] )

RE_SetPixelSize = _rpythonic_function_(		"RE_SetPixelSize", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("pixsize",		ctypes.c_float),] )

RE_SetView = _rpythonic_function_(		"RE_SetView", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("mat",		ctypes.c_float),] )

RE_Database_FromScene = _rpythonic_function_(		"RE_Database_FromScene", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("lay",		ctypes.c_uint),
	("use_camera_view",		ctypes.c_int),] )

RE_Database_Free = _rpythonic_function_(		"RE_Database_Free", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_DataBase_ApplyWindow = _rpythonic_function_(		"RE_DataBase_ApplyWindow", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_set_max_threads = _rpythonic_function_(		"RE_set_max_threads", ctypes.c_void_p, [
	("threads",		ctypes.c_int),] )

RE_init_threadcount = _rpythonic_function_(		"RE_init_threadcount", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_TileProcessor = _rpythonic_function_(		"RE_TileProcessor", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),] )

RE_BlenderFrame = _rpythonic_function_(		"RE_BlenderFrame", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("srl",		ctypes.POINTER(SceneRenderLayer)),
	("camera_override",		ctypes.POINTER(Object)),
	("lay",		ctypes.c_uint),
	("frame",		ctypes.c_int),
	("write_still",		ctypes.c_short),] )

RE_BlenderAnim = _rpythonic_function_(		"RE_BlenderAnim", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("camera_override",		ctypes.POINTER(Object)),
	("lay",		ctypes.c_uint),
	("sfra",		ctypes.c_int),
	("efra",		ctypes.c_int),
	("tfra",		ctypes.c_int),] )

RE_SetReports = _rpythonic_function_(		"RE_SetReports", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("reports",		ctypes.POINTER(ReportList)),] )

RE_PreviewRender = _rpythonic_function_(		"RE_PreviewRender", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),] )

RE_ReadRenderResult = _rpythonic_function_(		"RE_ReadRenderResult", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("scenode",		ctypes.POINTER(Scene)),] )

RE_WriteRenderResult = _rpythonic_function_(		"RE_WriteRenderResult", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),
	("rr",		ctypes.POINTER(RenderResult)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("compress",		ctypes.c_int),] )

RE_MultilayerConvert = _rpythonic_function_(		"RE_MultilayerConvert", ctypes.POINTER(RenderResult), [
	("exrhandle",		ctypes.POINTER(ctypes.c_void_p)),
	("rectx",		ctypes.c_int),
	("recty",		ctypes.c_int),] )

RE_WriteEnvmapResult = _rpythonic_function_(		"RE_WriteEnvmapResult", ctypes.c_int, [
	("reports",		ctypes.POINTER(ReportList)),
	("scene",		ctypes.POINTER(Scene)),
	("env",		ctypes.POINTER(EnvMap)),
	("relpath",		ctypes.POINTER(ctypes.c_char)),
	("imtype",		ctypes.c_char),
	("layout",		( ctypes.c_float * 12 )),] )

RE_MergeFullSample = _rpythonic_function_(		"RE_MergeFullSample", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("sce",		ctypes.POINTER(Scene)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

RE_make_stars = _rpythonic_function_(		"RE_make_stars", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("scenev3d",		ctypes.POINTER(Scene)),
	("initfunc",		ctypes.c_void_p),
	("vertexfunc",		ctypes.c_void_p),
	("termfunc",		ctypes.c_void_p),] )

vertexfunc = _rpythonic_function_(		"vertexfunc", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_float)),] )

termfunc = _rpythonic_function_(		"termfunc", ctypes.c_void_p, [] )

RE_display_init_cb = _rpythonic_function_(		"RE_display_init_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_display_clear_cb = _rpythonic_function_(		"RE_display_clear_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_display_draw_cb = _rpythonic_function_(		"RE_display_draw_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_stats_draw_cb = _rpythonic_function_(		"RE_stats_draw_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_progress_cb = _rpythonic_function_(		"RE_progress_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_draw_lock_cb = _rpythonic_function_(		"RE_draw_lock_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_test_break_cb = _rpythonic_function_(		"RE_test_break_cb", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),
	("f",		ctypes.c_void_p),] )

RE_filter_value = _rpythonic_function_(		"RE_filter_value", ctypes.c_float, [
	("C_type",		ctypes.c_int),
	("x",		ctypes.c_float),] )

RE_zbuf_accumulate_vecblur = _rpythonic_function_(		"RE_zbuf_accumulate_vecblur", ctypes.c_void_p, [
	("nbd",		ctypes.POINTER(NodeBlurData)),
	("xsize",		ctypes.c_int),
	("ysize",		ctypes.c_int),
	("newrect",		ctypes.POINTER(ctypes.c_float)),
	("imgrect",		ctypes.POINTER(ctypes.c_float)),
	("vecbufrect",		ctypes.POINTER(ctypes.c_float)),
	("zbufrect",		ctypes.POINTER(ctypes.c_float)),] )

RE_seq_render_active = _rpythonic_function_(		"RE_seq_render_active", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("rd",		ctypes.POINTER(RenderData)),] )

RE_Database_Baking = _rpythonic_function_(		"RE_Database_Baking", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("lay",		ctypes.c_uint),
	("C_type",		ctypes.c_int),
	("actob",		ctypes.POINTER(Object)),] )

RE_DataBase_GetView = _rpythonic_function_(		"RE_DataBase_GetView", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("mat",		ctypes.c_float),] )

RE_GetCameraWindow = _rpythonic_function_(		"RE_GetCameraWindow", ctypes.c_void_p, [
	("re",		ctypes.POINTER(Render)),
	("camera",		ctypes.POINTER(Object)),
	("frame",		ctypes.c_int),
	("mat",		ctypes.c_float),] )

RE_GetScene = _rpythonic_function_(		"RE_GetScene", ctypes.POINTER(Scene), [
	("re",		ctypes.POINTER(Render)),] )

RE_is_rendering_allowed = _rpythonic_function_(		"RE_is_rendering_allowed", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("camera_override",		ctypes.POINTER(Object)),
	("reports",		ctypes.POINTER(ReportList)),] )

multitex_ext = _rpythonic_function_(		"multitex_ext", ctypes.c_int, [
	("tex",		ctypes.POINTER(Tex)),
	("texvec",		ctypes.POINTER(ctypes.c_float)),
	("dxt",		ctypes.POINTER(ctypes.c_float)),
	("dyt",		ctypes.POINTER(ctypes.c_float)),
	("osatex",		ctypes.c_int),
	("texres",		ctypes.POINTER(TexResult)),] )

multitex_ext_safe = _rpythonic_function_(		"multitex_ext_safe", ctypes.c_int, [
	("tex",		ctypes.POINTER(Tex)),
	("texvec",		ctypes.POINTER(ctypes.c_float)),
	("texres",		ctypes.POINTER(TexResult)),] )

multitex_nodes = _rpythonic_function_(		"multitex_nodes", ctypes.c_int, [
	("tex",		ctypes.POINTER(Tex)),
	("texvec",		ctypes.POINTER(ctypes.c_float)),
	("dxt",		ctypes.POINTER(ctypes.c_float)),
	("dyt",		ctypes.POINTER(ctypes.c_float)),
	("osatex",		ctypes.c_int),
	("texres",		ctypes.POINTER(TexResult)),
	("thread",		ctypes.c_short),
	("which_output",		ctypes.c_short),
	("shi",		ctypes.POINTER(ShadeInput)),
	("mtex",		ctypes.POINTER(MTex)),] )

RE_bake_shade_all_selected = _rpythonic_function_(		"RE_bake_shade_all_selected", ctypes.c_int, [
	("re",		ctypes.POINTER(Render)),
	("C_type",		ctypes.c_int),
	("actob",		ctypes.POINTER(Object)),
	("do_update",		ctypes.POINTER(ctypes.c_short)),
	("progress",		ctypes.POINTER(ctypes.c_float)),] )

RE_bake_shade_get_image = _rpythonic_function_(		"RE_bake_shade_get_image", ctypes.POINTER(Image), [] )

RE_bake_ibuf_filter = _rpythonic_function_(		"RE_bake_ibuf_filter", ctypes.c_void_p, [
	("ibuf",		ctypes.POINTER(ImBuf)),
	("mask",		ctypes.POINTER(ctypes.c_char)),
	("filter",		ctypes.c_int),] )

render = _rpythonic_function_(		"render", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("scene",		ctypes.POINTER(Scene)),] )

view_update = _rpythonic_function_(		"view_update", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("context",		ctypes.POINTER(bContext)),] )

view_draw = _rpythonic_function_(		"view_draw", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("context",		ctypes.POINTER(bContext)),] )

RE_engine_create = _rpythonic_function_(		"RE_engine_create", ctypes.POINTER(RenderEngine), [
	("C_type",		ctypes.POINTER(RenderEngineType)),] )

RE_engine_free = _rpythonic_function_(		"RE_engine_free", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),] )

RE_layer_load_from_file = _rpythonic_function_(		"RE_layer_load_from_file", ctypes.c_void_p, [
	("layer",		ctypes.POINTER(RenderLayer)),
	("reports",		ctypes.POINTER(ReportList)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

RE_result_load_from_file = _rpythonic_function_(		"RE_result_load_from_file", ctypes.c_void_p, [
	("result",		ctypes.POINTER(RenderResult)),
	("reports",		ctypes.POINTER(ReportList)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

RE_engine_begin_result = _rpythonic_function_(		"RE_engine_begin_result", ctypes.POINTER(RenderResult), [
	("engine",		ctypes.POINTER(RenderEngine)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

RE_engine_update_result = _rpythonic_function_(		"RE_engine_update_result", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("result",		ctypes.POINTER(RenderResult)),] )

RE_engine_end_result = _rpythonic_function_(		"RE_engine_end_result", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("result",		ctypes.POINTER(RenderResult)),] )

RE_engine_test_break = _rpythonic_function_(		"RE_engine_test_break", ctypes.c_int, [
	("engine",		ctypes.POINTER(RenderEngine)),] )

RE_engine_update_stats = _rpythonic_function_(		"RE_engine_update_stats", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("stats",		ctypes.POINTER(ctypes.c_char)),
	("info",		ctypes.POINTER(ctypes.c_char)),] )

RE_engine_update_progress = _rpythonic_function_(		"RE_engine_update_progress", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("progress",		ctypes.c_float),] )

RE_engine_report = _rpythonic_function_(		"RE_engine_report", ctypes.c_void_p, [
	("engine",		ctypes.POINTER(RenderEngine)),
	("C_type",		ctypes.c_int),
	("msg",		ctypes.POINTER(ctypes.c_char)),] )

RE_engine_render = _rpythonic_function_(		"RE_engine_render", ctypes.c_int, [
	("re",		ctypes.POINTER(Render)),
	("do_all",		ctypes.c_int),] )

RE_engine_is_external = _rpythonic_function_(		"RE_engine_is_external", ctypes.c_int, [
	("re",		ctypes.POINTER(Render)),] )

RE_engines_init = _rpythonic_function_(		"RE_engines_init", ctypes.c_void_p, [] )

RE_engines_exit = _rpythonic_function_(		"RE_engines_exit", ctypes.c_void_p, [] )

RE_engines_find = _rpythonic_function_(		"RE_engines_find", ctypes.POINTER(RenderEngineType), [
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

ED_operatortypes_armature = _rpythonic_function_(		"ED_operatortypes_armature", ctypes.c_void_p, [] )

ED_operatormacros_armature = _rpythonic_function_(		"ED_operatormacros_armature", ctypes.c_void_p, [] )

ED_keymap_armature = _rpythonic_function_(		"ED_keymap_armature", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

ED_armature_from_edit = _rpythonic_function_(		"ED_armature_from_edit", ctypes.c_void_p, [
	("obedit",		ctypes.POINTER(Object)),] )

ED_armature_to_edit = _rpythonic_function_(		"ED_armature_to_edit", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),] )

ED_armature_edit_free = _rpythonic_function_(		"ED_armature_edit_free", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),] )

ED_armature_deselect_all = _rpythonic_function_(		"ED_armature_deselect_all", ctypes.c_void_p, [
	("obedit",		ctypes.POINTER(Object)),
	("toggle",		ctypes.c_int),] )

ED_armature_deselect_all_visible = _rpythonic_function_(		"ED_armature_deselect_all_visible", ctypes.c_void_p, [
	("obedit",		ctypes.POINTER(Object)),] )

ED_do_pose_selectbuffer = _rpythonic_function_(		"ED_do_pose_selectbuffer", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("base",		ctypes.POINTER(Base)),
	("buffer",		ctypes.POINTER(ctypes.c_uint)),
	("hits",		ctypes.c_short),
	("extend",		ctypes.c_short),] )

mouse_armature = _rpythonic_function_(		"mouse_armature", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("mval",		( ctypes.c_int * 2 )),
	("extend",		ctypes.c_int),] )

join_armature_exec = _rpythonic_function_(		"join_armature_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

get_indexed_bone = _rpythonic_function_(		"get_indexed_bone", ctypes.POINTER(Bone), [
	("ob",		ctypes.POINTER(Object)),
	("index",		ctypes.c_int),] )

ED_rollBoneToVector = _rpythonic_function_(		"ED_rollBoneToVector", ctypes.c_float, [
	("bone",		ctypes.POINTER(EditBone)),
	("new_up_axis",		( ctypes.c_float * 3 )),
	("axis_only",		ctypes.c_short),] )

ED_armature_bone_get_mirrored = _rpythonic_function_(		"ED_armature_bone_get_mirrored", ctypes.POINTER(EditBone), [
	("edbo",		ctypes.POINTER(ListBase)),
	("ebo",		ctypes.POINTER(EditBone)),] )

ED_armature_sync_selection = _rpythonic_function_(		"ED_armature_sync_selection", ctypes.c_void_p, [
	("edbo",		ctypes.POINTER(ListBase)),] )

ED_armature_validate_active = _rpythonic_function_(		"ED_armature_validate_active", ctypes.c_void_p, [
	("arm",		ctypes.POINTER(bArmature)),] )

add_primitive_bone = _rpythonic_function_(		"add_primitive_bone", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("v3d",		ctypes.POINTER(View3D)),
	("rv3d",		ctypes.POINTER(RegionView3D)),] )

ED_armature_edit_bone_add = _rpythonic_function_(		"ED_armature_edit_bone_add", ctypes.POINTER(EditBone), [
	("arm",		ctypes.POINTER(bArmature)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

ED_armature_edit_bone_remove = _rpythonic_function_(		"ED_armature_edit_bone_remove", ctypes.c_void_p, [
	("arm",		ctypes.POINTER(bArmature)),
	("exBone",		ctypes.POINTER(EditBone)),] )

transform_armature_mirror_update = _rpythonic_function_(		"transform_armature_mirror_update", ctypes.c_void_p, [
	("obedit",		ctypes.POINTER(Object)),] )

clear_armature = _rpythonic_function_(		"clear_armature", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("mode",		ctypes.c_char),] )

docenter_armature = _rpythonic_function_(		"docenter_armature", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("cursor",		( ctypes.c_float * 3 )),
	("centermode",		ctypes.c_int),
	("around",		ctypes.c_int),] )

ED_armature_apply_transform = _rpythonic_function_(		"ED_armature_apply_transform", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("mat",		( ctypes.c_float * 4 )),] )

create_vgroups_from_armature = _rpythonic_function_(		"create_vgroups_from_armature", ctypes.c_void_p, [
	("reports",		ctypes.POINTER(ReportList)),
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("par",		ctypes.POINTER(Object)),
	("mode",		ctypes.c_int),
	("mirror",		ctypes.c_int),] )

auto_align_armature = _rpythonic_function_(		"auto_align_armature", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("v3d",		ctypes.POINTER(View3D)),
	("mode",		ctypes.c_short),] )

unique_editbone_name = _rpythonic_function_(		"unique_editbone_name", ctypes.c_void_p, [
	("ebones",		ctypes.POINTER(ListBase)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("bone",		ctypes.POINTER(EditBone)),] )

ED_armature_bone_rename = _rpythonic_function_(		"ED_armature_bone_rename", ctypes.c_void_p, [
	("arm",		ctypes.POINTER(bArmature)),
	("oldnamep",		ctypes.POINTER(ctypes.c_char)),
	("newnamep",		ctypes.POINTER(ctypes.c_char)),] )

undo_push_armature = _rpythonic_function_(		"undo_push_armature", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

ED_armature_exit_posemode = _rpythonic_function_(		"ED_armature_exit_posemode", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("base",		ctypes.POINTER(Base)),] )

ED_armature_enter_posemode = _rpythonic_function_(		"ED_armature_enter_posemode", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("base",		ctypes.POINTER(Base)),] )

ED_pose_channel_in_IK_chain = _rpythonic_function_(		"ED_pose_channel_in_IK_chain", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),
	("pchan",		ctypes.POINTER(bPoseChannel)),] )

ED_pose_deselectall = _rpythonic_function_(		"ED_pose_deselectall", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("test",		ctypes.c_int),] )

ED_pose_recalculate_paths = _rpythonic_function_(		"ED_pose_recalculate_paths", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),] )

ED_operator_sketch_mode_active_stroke = _rpythonic_function_(		"ED_operator_sketch_mode_active_stroke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_sketch_full_mode = _rpythonic_function_(		"ED_operator_sketch_full_mode", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_sketch_mode = _rpythonic_function_(		"ED_operator_sketch_mode", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_convertSketch = _rpythonic_function_(		"BIF_convertSketch", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_deleteSketch = _rpythonic_function_(		"BIF_deleteSketch", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_selectAllSketch = _rpythonic_function_(		"BIF_selectAllSketch", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("mode",		ctypes.c_int),] )

BIF_makeListTemplates = _rpythonic_function_(		"BIF_makeListTemplates", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_listTemplates = _rpythonic_function_(		"BIF_listTemplates", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),] )

BIF_currentTemplate = _rpythonic_function_(		"BIF_currentTemplate", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_freeTemplates = _rpythonic_function_(		"BIF_freeTemplates", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_setTemplate = _rpythonic_function_(		"BIF_setTemplate", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("index",		ctypes.c_int),] )

BIF_nbJointsTemplate = _rpythonic_function_(		"BIF_nbJointsTemplate", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

BIF_nameBoneTemplate = _rpythonic_function_(		"BIF_nameBoneTemplate", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),] )

BDR_drawSketch = _rpythonic_function_(		"BDR_drawSketch", ctypes.c_void_p, [
	("vc",		ctypes.POINTER(bContext)),] )

BDR_drawSketchNames = _rpythonic_function_(		"BDR_drawSketchNames", ctypes.c_int, [
	("vc",		ctypes.POINTER(ViewContext)),] )

mesh_deform_bind = _rpythonic_function_(		"mesh_deform_bind", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("mmd",		ctypes.POINTER(MeshDeformModifierData)),
	("vertexcos",		ctypes.POINTER(ctypes.c_float)),
	("totvert",		ctypes.c_int),
	("cagemat",		ctypes.c_float),] )

ANIM_get_keyframing_flags = _rpythonic_function_(		"ANIM_get_keyframing_flags", ctypes.c_short, [
	("scene",		ctypes.POINTER(Scene)),
	("incl_mode",		ctypes.c_short),] )

verify_adt_action = _rpythonic_function_(		"verify_adt_action", ctypes.POINTER(bAction), [
	("C_id",		ctypes.POINTER(ID)),
	("add",		ctypes.c_short),] )

verify_fcurve = _rpythonic_function_(		"verify_fcurve", ctypes.POINTER(FCurve), [
	("act",		ctypes.POINTER(bAction)),
	("group",		ctypes.c_char),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("add",		ctypes.c_short),] )

insert_bezt_fcurve = _rpythonic_function_(		"insert_bezt_fcurve", ctypes.c_int, [
	("fcu",		ctypes.POINTER(FCurve)),
	("bezt",		ctypes.POINTER(BezTriple)),
	("flag",		ctypes.c_short),] )

insert_vert_fcurve = _rpythonic_function_(		"insert_vert_fcurve", ctypes.c_int, [
	("fcu",		ctypes.POINTER(FCurve)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("flag",		ctypes.c_short),] )

insert_keyframe_direct = _rpythonic_function_(		"insert_keyframe_direct", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("ptr",		PointerRNA),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("fcu",		ctypes.POINTER(FCurve)),
	("cfra",		ctypes.c_float),
	("flag",		ctypes.c_short),] )

insert_keyframe = _rpythonic_function_(		"insert_keyframe", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("act",		ctypes.POINTER(bAction)),
	("group",		ctypes.c_char),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("cfra",		ctypes.c_float),
	("flag",		ctypes.c_short),] )

delete_keyframe = _rpythonic_function_(		"delete_keyframe", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("act",		ctypes.POINTER(bAction)),
	("group",		ctypes.c_char),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("cfra",		ctypes.c_float),
	("flag",		ctypes.c_short),] )

cbKeyingSet_Poll = _rpythonic_function_(		"cbKeyingSet_Poll", ctypes.c_int, [
	("ksi",		ctypes.POINTER(KeyingSetInfo)),
	("C",		ctypes.POINTER(bContext)),] )

cbKeyingSet_Iterator = _rpythonic_function_(		"cbKeyingSet_Iterator", ctypes.c_void_p, [
	("ksi",		ctypes.POINTER(KeyingSetInfo)),
	("C",		ctypes.POINTER(bContext)),
	("ks",		ctypes.POINTER(KeyingSet)),] )

cbKeyingSet_Generate = _rpythonic_function_(		"cbKeyingSet_Generate", ctypes.c_void_p, [
	("ksi",		ctypes.POINTER(KeyingSetInfo)),
	("C",		ctypes.POINTER(bContext)),
	("ks",		ctypes.POINTER(KeyingSet)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

ANIM_relative_keyingset_add_source = _rpythonic_function_(		"ANIM_relative_keyingset_add_source", ctypes.c_void_p, [
	("dsources",		ctypes.POINTER(ListBase)),
	("C_id",		ctypes.POINTER(ID)),
	("srna",		ctypes.POINTER(StructRNA)),
	("data",		ctypes.POINTER(ctypes.c_void_p)),] )

ANIM_validate_keyingset = _rpythonic_function_(		"ANIM_validate_keyingset", ctypes.c_short, [
	("C",		ctypes.POINTER(bContext)),
	("dsources",		ctypes.POINTER(ListBase)),
	("ks",		ctypes.POINTER(KeyingSet)),] )

ANIM_apply_keyingset = _rpythonic_function_(		"ANIM_apply_keyingset", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("dsources",		ctypes.POINTER(ListBase)),
	("act",		ctypes.POINTER(bAction)),
	("ks",		ctypes.POINTER(KeyingSet)),
	("mode",		ctypes.c_short),
	("cfra",		ctypes.c_float),] )

ANIM_builtin_keyingset_get_named = _rpythonic_function_(		"ANIM_builtin_keyingset_get_named", ctypes.POINTER(KeyingSet), [
	("prevKS",		ctypes.POINTER(KeyingSet)),
	("name",		ctypes.c_char),] )

ANIM_keyingset_info_find_named = _rpythonic_function_(		"ANIM_keyingset_info_find_named", ctypes.POINTER(KeyingSetInfo), [
	("name",		ctypes.c_char),] )

ANIM_keyingset_info_register = _rpythonic_function_(		"ANIM_keyingset_info_register", ctypes.c_void_p, [
	("ksi",		ctypes.POINTER(KeyingSetInfo)),] )

ANIM_keyingset_info_unregister = _rpythonic_function_(		"ANIM_keyingset_info_unregister", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("ksi",		ctypes.POINTER(KeyingSetInfo)),] )

ANIM_keyingset_infos_exit = _rpythonic_function_(		"ANIM_keyingset_infos_exit", ctypes.c_void_p, [] )

ANIM_scene_get_active_keyingset = _rpythonic_function_(		"ANIM_scene_get_active_keyingset", ctypes.POINTER(KeyingSet), [
	("scene",		ctypes.POINTER(Scene)),] )

ANIM_scene_get_keyingset_index = _rpythonic_function_(		"ANIM_scene_get_keyingset_index", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("ks",		ctypes.POINTER(KeyingSet)),] )

ANIM_get_keyingset_for_autokeying = _rpythonic_function_(		"ANIM_get_keyingset_for_autokeying", ctypes.POINTER(KeyingSet), [
	("scene",		ctypes.POINTER(Scene)),
	("tranformKSName",		ctypes.POINTER(ctypes.c_char)),] )

ANIM_keying_sets_menu_setup = _rpythonic_function_(		"ANIM_keying_sets_menu_setup", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("title",		ctypes.c_char),
	("op_name",		ctypes.c_char),] )

ANIM_keying_sets_enum_itemf = _rpythonic_function_(		"ANIM_keying_sets_enum_itemf", ctypes.POINTER(EnumPropertyItem), [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("free",		ctypes.POINTER(ctypes.c_int)),] )

ANIM_keyingset_context_ok_poll = _rpythonic_function_(		"ANIM_keyingset_context_ok_poll", ctypes.c_short, [
	("C",		ctypes.POINTER(bContext)),
	("ks",		ctypes.POINTER(KeyingSet)),] )

verify_driver_fcurve = _rpythonic_function_(		"verify_driver_fcurve", ctypes.POINTER(FCurve), [
	("C_id",		ctypes.POINTER(ID)),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("add",		ctypes.c_short),] )

ANIM_driver_can_paste = _rpythonic_function_(		"ANIM_driver_can_paste", ctypes.c_short, [] )

ANIM_add_driver = _rpythonic_function_(		"ANIM_add_driver", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("flag",		ctypes.c_short),
	("C_type",		ctypes.c_int),] )

ANIM_remove_driver = _rpythonic_function_(		"ANIM_remove_driver", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("flag",		ctypes.c_short),] )

ANIM_copy_driver = _rpythonic_function_(		"ANIM_copy_driver", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("flag",		ctypes.c_short),] )

ANIM_paste_driver = _rpythonic_function_(		"ANIM_paste_driver", ctypes.c_short, [
	("reports",		ctypes.POINTER(ReportList)),
	("C_id",		ctypes.POINTER(ID)),
	("rna_path",		ctypes.c_char),
	("array_index",		ctypes.c_int),
	("flag",		ctypes.c_short),] )

autokeyframe_cfra_can_key = _rpythonic_function_(		"autokeyframe_cfra_can_key", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("C_id",		ctypes.POINTER(ID)),] )

fcurve_frame_has_keyframe = _rpythonic_function_(		"fcurve_frame_has_keyframe", ctypes.c_short, [
	("fcu",		ctypes.POINTER(FCurve)),
	("frame",		ctypes.c_float),
	("filter",		ctypes.c_short),] )

id_frame_has_keyframe = _rpythonic_function_(		"id_frame_has_keyframe", ctypes.c_short, [
	("C_id",		ctypes.POINTER(ID)),
	("frame",		ctypes.c_float),
	("filter",		ctypes.c_short),] )

ED_autokeyframe_object = _rpythonic_function_(		"ED_autokeyframe_object", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("ks",		ctypes.POINTER(KeyingSet)),] )

ED_autokeyframe_pchan = _rpythonic_function_(		"ED_autokeyframe_pchan", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("pchan",		ctypes.POINTER(bPoseChannel)),
	("ks",		ctypes.POINTER(KeyingSet)),] )

ED_init_node_butfuncs = _rpythonic_function_(		"ED_init_node_butfuncs", ctypes.c_void_p, [] )

ED_node_tree_update = _rpythonic_function_(		"ED_node_tree_update", ctypes.c_void_p, [
	("snode",		ctypes.POINTER(SpaceNode)),
	("scene",		ctypes.POINTER(Scene)),] )

ED_node_changed_update = _rpythonic_function_(		"ED_node_changed_update", ctypes.c_void_p, [
	("C_id",		ctypes.POINTER(ID)),
	("node",		ctypes.POINTER(bNode)),] )

ED_node_generic_update = _rpythonic_function_(		"ED_node_generic_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

ED_node_shader_default = _rpythonic_function_(		"ED_node_shader_default", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("C_id",		ctypes.POINTER(ID)),] )

ED_node_composit_default = _rpythonic_function_(		"ED_node_composit_default", ctypes.c_void_p, [
	("sce",		ctypes.POINTER(Scene)),] )

ED_node_texture_default = _rpythonic_function_(		"ED_node_texture_default", ctypes.c_void_p, [
	("tex",		ctypes.POINTER(Tex)),] )

ED_node_link_intersect_test = _rpythonic_function_(		"ED_node_link_intersect_test", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),
	("test",		ctypes.c_int),] )

ED_node_link_insert = _rpythonic_function_(		"ED_node_link_insert", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_node_update_hierarchy = _rpythonic_function_(		"ED_node_update_hierarchy", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ntree",		ctypes.POINTER(bNodeTree)),] )

ED_node_set_active = _rpythonic_function_(		"ED_node_set_active", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),] )

ED_operatormacros_node = _rpythonic_function_(		"ED_operatormacros_node", ctypes.c_void_p, [] )

ED_operatortypes_render = _rpythonic_function_(		"ED_operatortypes_render", ctypes.c_void_p, [] )

ED_render_id_flush_update = _rpythonic_function_(		"ED_render_id_flush_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("C_id",		ctypes.POINTER(ID)),] )

ED_render_engine_changed = _rpythonic_function_(		"ED_render_engine_changed", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),] )

ED_render_scene_update = _rpythonic_function_(		"ED_render_scene_update", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("updated",		ctypes.c_int),] )

ED_preview_init_dbase = _rpythonic_function_(		"ED_preview_init_dbase", ctypes.c_void_p, [] )

ED_preview_free_dbase = _rpythonic_function_(		"ED_preview_free_dbase", ctypes.c_void_p, [] )

ED_preview_shader_job = _rpythonic_function_(		"ED_preview_shader_job", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("C_id",		ctypes.POINTER(ID)),
	("parent",		ctypes.POINTER(ID)),
	("slot",		ctypes.POINTER(MTex)),
	("sizex",		ctypes.c_int),
	("sizey",		ctypes.c_int),
	("method",		ctypes.c_int),] )

ED_preview_icon_job = _rpythonic_function_(		"ED_preview_icon_job", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("C_id",		ctypes.POINTER(ID)),
	("rect",		ctypes.POINTER(ctypes.c_uint)),
	("sizex",		ctypes.c_int),
	("sizey",		ctypes.c_int),] )

ED_preview_kill_jobs = _rpythonic_function_(		"ED_preview_kill_jobs", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_preview_draw = _rpythonic_function_(		"ED_preview_draw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("idp",		ctypes.POINTER(ctypes.c_void_p)),
	("parentp",		ctypes.POINTER(ctypes.c_void_p)),
	("slot",		ctypes.POINTER(ctypes.c_void_p)),
	("rect",		ctypes.POINTER(rcti)),] )

ED_render_clear_mtex_copybuf = _rpythonic_function_(		"ED_render_clear_mtex_copybuf", ctypes.c_void_p, [] )

ED_spacetype_outliner = _rpythonic_function_(		"ED_spacetype_outliner", ctypes.c_void_p, [] )

ED_spacetype_time = _rpythonic_function_(		"ED_spacetype_time", ctypes.c_void_p, [] )

ED_spacetype_view3d = _rpythonic_function_(		"ED_spacetype_view3d", ctypes.c_void_p, [] )

ED_spacetype_ipo = _rpythonic_function_(		"ED_spacetype_ipo", ctypes.c_void_p, [] )

ED_spacetype_image = _rpythonic_function_(		"ED_spacetype_image", ctypes.c_void_p, [] )

ED_spacetype_node = _rpythonic_function_(		"ED_spacetype_node", ctypes.c_void_p, [] )

ED_spacetype_buttons = _rpythonic_function_(		"ED_spacetype_buttons", ctypes.c_void_p, [] )

ED_spacetype_info = _rpythonic_function_(		"ED_spacetype_info", ctypes.c_void_p, [] )

ED_spacetype_file = _rpythonic_function_(		"ED_spacetype_file", ctypes.c_void_p, [] )

ED_spacetype_action = _rpythonic_function_(		"ED_spacetype_action", ctypes.c_void_p, [] )

ED_spacetype_nla = _rpythonic_function_(		"ED_spacetype_nla", ctypes.c_void_p, [] )

ED_spacetype_script = _rpythonic_function_(		"ED_spacetype_script", ctypes.c_void_p, [] )

ED_spacetype_text = _rpythonic_function_(		"ED_spacetype_text", ctypes.c_void_p, [] )

ED_spacetype_sequencer = _rpythonic_function_(		"ED_spacetype_sequencer", ctypes.c_void_p, [] )

ED_spacetype_logic = _rpythonic_function_(		"ED_spacetype_logic", ctypes.c_void_p, [] )

ED_spacetype_console = _rpythonic_function_(		"ED_spacetype_console", ctypes.c_void_p, [] )

ED_spacetype_userpref = _rpythonic_function_(		"ED_spacetype_userpref", ctypes.c_void_p, [] )

ED_spacetype_clip = _rpythonic_function_(		"ED_spacetype_clip", ctypes.c_void_p, [] )

ED_file_init = _rpythonic_function_(		"ED_file_init", ctypes.c_void_p, [] )

ED_file_exit = _rpythonic_function_(		"ED_file_exit", ctypes.c_void_p, [] )

ED_region_draw_cb_activate = _rpythonic_function_(		"ED_region_draw_cb_activate", ctypes.POINTER(ctypes.c_void_p), [
	("ARegionType",		ctypes.POINTER(ARegionType)),
	("draw",		ctypes.c_void_p),
	("custumdata",		ctypes.POINTER(ctypes.c_void_p)),
	("C_type",		ctypes.c_int),] )

ED_region_draw_cb_draw = _rpythonic_function_(		"ED_region_draw_cb_draw", ctypes.c_void_p, [
	("bContext",		ctypes.POINTER(bContext)),
	("ARegion",		ctypes.POINTER(ARegion)),
	("none",		ctypes.c_int),] )

ED_region_draw_cb_exit = _rpythonic_function_(		"ED_region_draw_cb_exit", ctypes.c_void_p, [
	("ARegionType",		ctypes.POINTER(ARegionType)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

ED_region_draw_cb_customdata = _rpythonic_function_(		"ED_region_draw_cb_customdata", ctypes.POINTER(ctypes.c_void_p), [("handle",		ctypes.c_void_p)] )

ED_region_do_listen = _rpythonic_function_(		"ED_region_do_listen", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),
	("note",		ctypes.POINTER(wmNotifier)),] )

ED_region_do_draw = _rpythonic_function_(		"ED_region_do_draw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_exit = _rpythonic_function_(		"ED_region_exit", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_pixelspace = _rpythonic_function_(		"ED_region_pixelspace", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_set = _rpythonic_function_(		"ED_region_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_init = _rpythonic_function_(		"ED_region_init", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_tag_redraw = _rpythonic_function_(		"ED_region_tag_redraw", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_tag_redraw_partial = _rpythonic_function_(		"ED_region_tag_redraw_partial", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),
	("rct",		ctypes.POINTER(rcti)),] )

ED_region_tag_redraw_overlay = _rpythonic_function_(		"ED_region_tag_redraw_overlay", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_panels_init = _rpythonic_function_(		"ED_region_panels_init", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_panels = _rpythonic_function_(		"ED_region_panels", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),
	("vertical",		ctypes.c_int),
	("context",		ctypes.POINTER(ctypes.c_char)),
	("contextnr",		ctypes.c_int),] )

ED_region_header_init = _rpythonic_function_(		"ED_region_header_init", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_header = _rpythonic_function_(		"ED_region_header", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_region_toggle_hidden = _rpythonic_function_(		"ED_region_toggle_hidden", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

region_scissor_winrct = _rpythonic_function_(		"region_scissor_winrct", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),
	("winrct",		ctypes.POINTER(rcti)),] )

ED_region_info_draw = _rpythonic_function_(		"ED_region_info_draw", ctypes.c_void_p, [
	("ar",		ctypes.POINTER(ARegion)),
	("text",		ctypes.POINTER(ctypes.c_char)),
	("block",		ctypes.c_int),
	("alpha",		ctypes.c_float),] )

ED_spacetypes_init = _rpythonic_function_(		"ED_spacetypes_init", ctypes.c_void_p, [] )

ED_spacetypes_keymap = _rpythonic_function_(		"ED_spacetypes_keymap", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

ED_area_header_switchbutton = _rpythonic_function_(		"ED_area_header_switchbutton", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),
	("yco",		ctypes.c_int),] )

ED_area_header_standardbuttons = _rpythonic_function_(		"ED_area_header_standardbuttons", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),
	("yco",		ctypes.c_int),] )

ED_area_overdraw = _rpythonic_function_(		"ED_area_overdraw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_area_overdraw_flush = _rpythonic_function_(		"ED_area_overdraw_flush", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),
	("ar",		ctypes.POINTER(ARegion)),] )

ED_area_initialize = _rpythonic_function_(		"ED_area_initialize", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_area_exit = _rpythonic_function_(		"ED_area_exit", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_screen_area_active = _rpythonic_function_(		"ED_screen_area_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_area_do_listen = _rpythonic_function_(		"ED_area_do_listen", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),
	("note",		ctypes.POINTER(wmNotifier)),] )

ED_area_tag_redraw = _rpythonic_function_(		"ED_area_tag_redraw", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_area_tag_redraw_regiontype = _rpythonic_function_(		"ED_area_tag_redraw_regiontype", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),
	("C_type",		ctypes.c_int),] )

ED_area_tag_refresh = _rpythonic_function_(		"ED_area_tag_refresh", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_area_do_refresh = _rpythonic_function_(		"ED_area_do_refresh", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_area_headerprint = _rpythonic_function_(		"ED_area_headerprint", ctypes.c_void_p, [
	("sa",		ctypes.POINTER(ScrArea)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

ED_area_newspace = _rpythonic_function_(		"ED_area_newspace", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),
	("C_type",		ctypes.c_int),] )

ED_area_prevspace = _rpythonic_function_(		"ED_area_prevspace", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_area_swapspace = _rpythonic_function_(		"ED_area_swapspace", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa1",		ctypes.POINTER(ScrArea)),
	("sa2",		ctypes.POINTER(ScrArea)),] )

ED_area_headersize = _rpythonic_function_(		"ED_area_headersize", ctypes.c_int, [] )

ED_screens_initialize = _rpythonic_function_(		"ED_screens_initialize", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

ED_screen_draw = _rpythonic_function_(		"ED_screen_draw", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

ED_screen_refresh = _rpythonic_function_(		"ED_screen_refresh", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),] )

ED_screen_do_listen = _rpythonic_function_(		"ED_screen_do_listen", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("note",		ctypes.POINTER(wmNotifier)),] )

ED_screen_duplicate = _rpythonic_function_(		"ED_screen_duplicate", ctypes.POINTER(bScreen), [
	("win",		ctypes.POINTER(wmWindow)),
	("sc",		ctypes.POINTER(bScreen)),] )

ED_screen_add = _rpythonic_function_(		"ED_screen_add", ctypes.POINTER(bScreen), [
	("win",		ctypes.POINTER(wmWindow)),
	("scene",		ctypes.POINTER(Scene)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

ED_screen_set = _rpythonic_function_(		"ED_screen_set", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sc",		ctypes.POINTER(bScreen)),] )

ED_screen_delete = _rpythonic_function_(		"ED_screen_delete", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sc",		ctypes.POINTER(bScreen)),] )

ED_screen_set_scene = _rpythonic_function_(		"ED_screen_set_scene", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("scene",		ctypes.POINTER(Scene)),] )

ED_screen_delete_scene = _rpythonic_function_(		"ED_screen_delete_scene", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("scene",		ctypes.POINTER(Scene)),] )

ED_screen_set_subwinactive = _rpythonic_function_(		"ED_screen_set_subwinactive", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("event",		ctypes.POINTER(wmEvent)),] )

ED_screen_exit = _rpythonic_function_(		"ED_screen_exit", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("window",		ctypes.POINTER(wmWindow)),
	("screen",		ctypes.POINTER(bScreen)),] )

ED_screen_animation_timer = _rpythonic_function_(		"ED_screen_animation_timer", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("redraws",		ctypes.c_int),
	("refresh",		ctypes.c_int),
	("sync",		ctypes.c_int),
	("enable",		ctypes.c_int),] )

ED_screen_animation_timer_update = _rpythonic_function_(		"ED_screen_animation_timer_update", ctypes.c_void_p, [
	("screen",		ctypes.POINTER(bScreen)),
	("redraws",		ctypes.c_int),
	("refresh",		ctypes.c_int),] )

ED_screen_full_newspace = _rpythonic_function_(		"ED_screen_full_newspace", ctypes.POINTER(ScrArea), [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),
	("C_type",		ctypes.c_int),] )

ED_screen_full_prevspace = _rpythonic_function_(		"ED_screen_full_prevspace", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_screen_full_restore = _rpythonic_function_(		"ED_screen_full_restore", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_screen_full_toggle = _rpythonic_function_(		"ED_screen_full_toggle", ctypes.POINTER(ScrArea), [
	("C",		ctypes.POINTER(bContext)),
	("win",		ctypes.POINTER(wmWindow)),
	("sa",		ctypes.POINTER(ScrArea)),] )

ED_screen_new_window = _rpythonic_function_(		"ED_screen_new_window", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("position",		ctypes.POINTER(rcti)),
	("C_type",		ctypes.c_int),] )

ED_update_for_newframe = _rpythonic_function_(		"ED_update_for_newframe", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("screen",		ctypes.POINTER(bScreen)),
	("mute",		ctypes.c_int),] )

ED_refresh_viewport_fps = _rpythonic_function_(		"ED_refresh_viewport_fps", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_screen_animation_play = _rpythonic_function_(		"ED_screen_animation_play", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("sync",		ctypes.c_int),
	("mode",		ctypes.c_int),] )

ED_operatortypes_screen = _rpythonic_function_(		"ED_operatortypes_screen", ctypes.c_void_p, [] )

ED_keymap_screen = _rpythonic_function_(		"ED_keymap_screen", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

ED_operator_screenactive = _rpythonic_function_(		"ED_operator_screenactive", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_screen_mainwinactive = _rpythonic_function_(		"ED_operator_screen_mainwinactive", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_areaactive = _rpythonic_function_(		"ED_operator_areaactive", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_regionactive = _rpythonic_function_(		"ED_operator_regionactive", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_scene_editable = _rpythonic_function_(		"ED_operator_scene_editable", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_objectmode = _rpythonic_function_(		"ED_operator_objectmode", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_view3d_active = _rpythonic_function_(		"ED_operator_view3d_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_region_view3d_active = _rpythonic_function_(		"ED_operator_region_view3d_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_animview_active = _rpythonic_function_(		"ED_operator_animview_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_timeline_active = _rpythonic_function_(		"ED_operator_timeline_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_outliner_active = _rpythonic_function_(		"ED_operator_outliner_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_outliner_active_no_editobject = _rpythonic_function_(		"ED_operator_outliner_active_no_editobject", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_file_active = _rpythonic_function_(		"ED_operator_file_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_action_active = _rpythonic_function_(		"ED_operator_action_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_buttons_active = _rpythonic_function_(		"ED_operator_buttons_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_node_active = _rpythonic_function_(		"ED_operator_node_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_graphedit_active = _rpythonic_function_(		"ED_operator_graphedit_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_sequencer_active = _rpythonic_function_(		"ED_operator_sequencer_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_image_active = _rpythonic_function_(		"ED_operator_image_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_nla_active = _rpythonic_function_(		"ED_operator_nla_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_logic_active = _rpythonic_function_(		"ED_operator_logic_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_info_active = _rpythonic_function_(		"ED_operator_info_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_console_active = _rpythonic_function_(		"ED_operator_console_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_object_active = _rpythonic_function_(		"ED_operator_object_active", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_object_active_editable = _rpythonic_function_(		"ED_operator_object_active_editable", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_object_active_editable_mesh = _rpythonic_function_(		"ED_operator_object_active_editable_mesh", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_object_active_editable_font = _rpythonic_function_(		"ED_operator_object_active_editable_font", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editmesh = _rpythonic_function_(		"ED_operator_editmesh", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editmesh_view3d = _rpythonic_function_(		"ED_operator_editmesh_view3d", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editmesh_region_view3d = _rpythonic_function_(		"ED_operator_editmesh_region_view3d", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editarmature = _rpythonic_function_(		"ED_operator_editarmature", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editcurve = _rpythonic_function_(		"ED_operator_editcurve", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editcurve_3d = _rpythonic_function_(		"ED_operator_editcurve_3d", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editsurf = _rpythonic_function_(		"ED_operator_editsurf", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editsurfcurve = _rpythonic_function_(		"ED_operator_editsurfcurve", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editsurfcurve_region_view3d = _rpythonic_function_(		"ED_operator_editsurfcurve_region_view3d", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editfont = _rpythonic_function_(		"ED_operator_editfont", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editlattice = _rpythonic_function_(		"ED_operator_editlattice", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_editmball = _rpythonic_function_(		"ED_operator_editmball", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_uvedit = _rpythonic_function_(		"ED_operator_uvedit", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_uvmap = _rpythonic_function_(		"ED_operator_uvmap", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_operator_posemode = _rpythonic_function_(		"ED_operator_posemode", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

ED_editors_init = _rpythonic_function_(		"ED_editors_init", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_editors_exit = _rpythonic_function_(		"ED_editors_exit", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_undo_push = _rpythonic_function_(		"ED_undo_push", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

ED_undo_push_op = _rpythonic_function_(		"ED_undo_push_op", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

ED_undo_pop_op = _rpythonic_function_(		"ED_undo_pop_op", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

ED_undo_pop = _rpythonic_function_(		"ED_undo_pop", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_undo_redo = _rpythonic_function_(		"ED_undo_redo", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

ED_OT_undo = _rpythonic_function_(		"ED_OT_undo", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

ED_OT_undo_push = _rpythonic_function_(		"ED_OT_undo_push", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

ED_OT_redo = _rpythonic_function_(		"ED_OT_redo", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

ED_OT_undo_history = _rpythonic_function_(		"ED_OT_undo_history", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

ED_undo_operator_repeat = _rpythonic_function_(		"ED_undo_operator_repeat", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

ED_undo_operator_repeat_cb = _rpythonic_function_(		"ED_undo_operator_repeat_cb", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg_op",		ctypes.POINTER(ctypes.c_void_p)),
	("arg_unused",		ctypes.POINTER(ctypes.c_void_p)),] )

ED_undo_operator_repeat_cb_evt = _rpythonic_function_(		"ED_undo_operator_repeat_cb_evt", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg_op",		ctypes.POINTER(ctypes.c_void_p)),
	("arg_unused",		ctypes.c_int),] )

ED_undo_valid = _rpythonic_function_(		"ED_undo_valid", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("undoname",		ctypes.POINTER(ctypes.c_char)),] )

undo_editmode_push = _rpythonic_function_(		"undo_editmode_push", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("getdata",		ctypes.POINTER(ctypes.c_void_p)),
	("freedata",		ctypes.c_void_p),
	("to_editmode",		ctypes.c_void_p),
	("from_editmode",		ctypes.POINTER(ctypes.c_void_p)),
	("validate_undo",		ctypes.c_void_p),] )

getdata = _rpythonic_function_(		"getdata", ctypes.POINTER(ctypes.c_void_p), [
	("C",		ctypes.POINTER(bContext)),] )

freedata = _rpythonic_function_(		"freedata", ctypes.c_void_p, [] )

to_editmode = _rpythonic_function_(		"to_editmode", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

from_editmode = _rpythonic_function_(		"from_editmode", ctypes.POINTER(ctypes.c_void_p), [] )

validate_undo = _rpythonic_function_(		"validate_undo", ctypes.c_int, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

undo_editmode_clear = _rpythonic_function_(		"undo_editmode_clear", ctypes.c_void_p, [] )

crazyspace_get_mapped_editverts = _rpythonic_function_(		"crazyspace_get_mapped_editverts", ctypes.POINTER(ctypes.c_float), [
	("scene",		ctypes.POINTER(Scene)),
	("obedit",		ctypes.POINTER(Object)),] )

crazyspace_set_quats_editmesh = _rpythonic_function_(		"crazyspace_set_quats_editmesh", ctypes.c_void_p, [
	("em",		ctypes.POINTER(EditMesh)),
	("origcos",		ctypes.POINTER(ctypes.c_float)),
	("mappedcos",		ctypes.POINTER(ctypes.c_float)),
	("quats",		ctypes.POINTER(ctypes.c_float)),] )

crazyspace_set_quats_mesh = _rpythonic_function_(		"crazyspace_set_quats_mesh", ctypes.c_void_p, [
	("me",		ctypes.POINTER(Mesh)),
	("origcos",		ctypes.POINTER(ctypes.c_float)),
	("mappedcos",		ctypes.POINTER(ctypes.c_float)),
	("quats",		ctypes.POINTER(ctypes.c_float)),] )

sculpt_get_first_deform_matrices = _rpythonic_function_(		"sculpt_get_first_deform_matrices", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("deformmats",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("deformcos",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),] )

crazyspace_build_sculpt = _rpythonic_function_(		"crazyspace_build_sculpt", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("deformmats",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
	("deformcos",		ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),] )

apply_keyb_grid = _rpythonic_function_(		"apply_keyb_grid", ctypes.c_void_p, [
	("shift",		ctypes.c_int),
	("ctrl",		ctypes.c_int),
	("val",		ctypes.POINTER(ctypes.c_float)),
	("fac1",		ctypes.c_float),
	("fac2",		ctypes.c_float),
	("fac3",		ctypes.c_float),
	("invert",		ctypes.c_int),] )

GetButStringLength = _rpythonic_function_(		"GetButStringLength", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

unpack_menu = _rpythonic_function_(		"unpack_menu", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("id_name",		ctypes.POINTER(ctypes.c_char)),
	("abs_name",		ctypes.POINTER(ctypes.c_char)),
	("folder",		ctypes.POINTER(ctypes.c_char)),
	("pf",		ctypes.POINTER(PackedFile)),] )

ED_space_image = _rpythonic_function_(		"ED_space_image", ctypes.POINTER(Image), [
	("sima",		ctypes.POINTER(SpaceImage)),] )

ED_space_image_set = _rpythonic_function_(		"ED_space_image_set", ctypes.c_void_p, [
	("sima",		ctypes.POINTER(SpaceImage)),
	("scene",		ctypes.POINTER(Scene)),
	("obedit",		ctypes.POINTER(Object)),
	("ima",		ctypes.POINTER(Image)),] )

ED_space_image_acquire_buffer = _rpythonic_function_(		"ED_space_image_acquire_buffer", ctypes.POINTER(ImBuf), [
	("sima",		ctypes.POINTER(SpaceImage)),
	("lock_r",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),] )

ED_space_image_release_buffer = _rpythonic_function_(		"ED_space_image_release_buffer", ctypes.c_void_p, [
	("sima",		ctypes.POINTER(SpaceImage)),
	("lock",		ctypes.POINTER(ctypes.c_void_p)),] )

ED_space_image_has_buffer = _rpythonic_function_(		"ED_space_image_has_buffer", ctypes.c_int, [
	("sima",		ctypes.POINTER(SpaceImage)),] )

ED_space_image_size = _rpythonic_function_(		"ED_space_image_size", ctypes.c_void_p, [
	("sima",		ctypes.POINTER(SpaceImage)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

ED_space_image_aspect = _rpythonic_function_(		"ED_space_image_aspect", ctypes.c_void_p, [
	("sima",		ctypes.POINTER(SpaceImage)),
	("aspx",		ctypes.POINTER(ctypes.c_float)),
	("aspy",		ctypes.POINTER(ctypes.c_float)),] )

ED_space_image_zoom = _rpythonic_function_(		"ED_space_image_zoom", ctypes.c_void_p, [
	("sima",		ctypes.POINTER(SpaceImage)),
	("ar",		ctypes.POINTER(ARegion)),
	("zoomx",		ctypes.POINTER(ctypes.c_float)),
	("zoomy",		ctypes.POINTER(ctypes.c_float)),] )

ED_space_image_uv_aspect = _rpythonic_function_(		"ED_space_image_uv_aspect", ctypes.c_void_p, [
	("sima",		ctypes.POINTER(SpaceImage)),
	("aspx",		ctypes.POINTER(ctypes.c_float)),
	("aspy",		ctypes.POINTER(ctypes.c_float)),] )

ED_space_image_paint_update = _rpythonic_function_(		"ED_space_image_paint_update", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("settings",		ctypes.POINTER(ToolSettings)),] )

ED_image_size = _rpythonic_function_(		"ED_image_size", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("width",		ctypes.POINTER(ctypes.c_int)),
	("height",		ctypes.POINTER(ctypes.c_int)),] )

ED_image_aspect = _rpythonic_function_(		"ED_image_aspect", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("aspx",		ctypes.POINTER(ctypes.c_float)),
	("aspy",		ctypes.POINTER(ctypes.c_float)),] )

ED_image_uv_aspect = _rpythonic_function_(		"ED_image_uv_aspect", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("aspx",		ctypes.POINTER(ctypes.c_float)),
	("aspy",		ctypes.POINTER(ctypes.c_float)),] )

ED_space_image_show_render = _rpythonic_function_(		"ED_space_image_show_render", ctypes.c_int, [
	("sima",		ctypes.POINTER(SpaceImage)),] )

ED_space_image_show_paint = _rpythonic_function_(		"ED_space_image_show_paint", ctypes.c_int, [
	("sima",		ctypes.POINTER(SpaceImage)),] )

ED_space_image_show_uvedit = _rpythonic_function_(		"ED_space_image_show_uvedit", ctypes.c_int, [
	("sima",		ctypes.POINTER(SpaceImage)),
	("obedit",		ctypes.POINTER(Object)),] )

ED_space_image_show_uvshadow = _rpythonic_function_(		"ED_space_image_show_uvshadow", ctypes.c_int, [
	("sima",		ctypes.POINTER(SpaceImage)),
	("obedit",		ctypes.POINTER(Object)),] )

ED_image_update_frame = _rpythonic_function_(		"ED_image_update_frame", ctypes.c_void_p, [
	("mainp",		ctypes.POINTER(Main)),
	("cfra",		ctypes.c_int),] )

ED_operatortypes_uvedit = _rpythonic_function_(		"ED_operatortypes_uvedit", ctypes.c_void_p, [] )

ED_keymap_uvedit = _rpythonic_function_(		"ED_keymap_uvedit", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

ED_uvedit_assign_image = _rpythonic_function_(		"ED_uvedit_assign_image", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("scene",		ctypes.POINTER(Scene)),
	("obedit",		ctypes.POINTER(Object)),
	("ima",		ctypes.POINTER(Image)),
	("previma",		ctypes.POINTER(Image)),] )

ED_uvedit_minmax = _rpythonic_function_(		"ED_uvedit_minmax", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("ima",		ctypes.POINTER(Image)),
	("obedit",		ctypes.POINTER(Object)),
	("min",		ctypes.POINTER(ctypes.c_float)),
	("max",		ctypes.POINTER(ctypes.c_float)),] )

ED_object_get_active_image = _rpythonic_function_(		"ED_object_get_active_image", ctypes.c_int, [
	("ob",		ctypes.POINTER(Object)),
	("mat_nr",		ctypes.c_int),
	("ima",		ctypes.POINTER(ctypes.POINTER(Image))),
	("iuser",		ctypes.POINTER(ctypes.POINTER(ImageUser))),
	("node",		ctypes.POINTER(ctypes.POINTER(bNode))),] )

ED_object_assign_active_image = _rpythonic_function_(		"ED_object_assign_active_image", ctypes.c_void_p, [
	("bmain",		ctypes.POINTER(Main)),
	("ob",		ctypes.POINTER(Object)),
	("mat_nr",		ctypes.c_int),
	("ima",		ctypes.POINTER(Image)),] )

ED_uvedit_test_silent = _rpythonic_function_(		"ED_uvedit_test_silent", ctypes.c_int, [
	("obedit",		ctypes.POINTER(Object)),] )

ED_uvedit_test = _rpythonic_function_(		"ED_uvedit_test", ctypes.c_int, [
	("obedit",		ctypes.POINTER(Object)),] )

uvedit_edge_selected = _rpythonic_function_(		"uvedit_edge_selected", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("efa",		ctypes.POINTER(EditFace)),
	("tf",		ctypes.POINTER(MTFace)),
	("i",		ctypes.c_int),] )

uvedit_face_selected = _rpythonic_function_(		"uvedit_face_selected", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("efa",		ctypes.POINTER(EditFace)),
	("tf",		ctypes.POINTER(MTFace)),] )

uvedit_face_visible_nolocal = _rpythonic_function_(		"uvedit_face_visible_nolocal", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("efa",		ctypes.POINTER(EditFace)),] )

uvedit_face_visible = _rpythonic_function_(		"uvedit_face_visible", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("ima",		ctypes.POINTER(Image)),
	("efa",		ctypes.POINTER(EditFace)),
	("tf",		ctypes.POINTER(MTFace)),] )

uvedit_uv_selected = _rpythonic_function_(		"uvedit_uv_selected", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("efa",		ctypes.POINTER(EditFace)),
	("tf",		ctypes.POINTER(MTFace)),
	("i",		ctypes.c_int),] )

uvedit_edge_deselect = _rpythonic_function_(		"uvedit_edge_deselect", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("efa",		ctypes.POINTER(EditFace)),
	("tf",		ctypes.POINTER(MTFace)),
	("i",		ctypes.c_int),] )

uvedit_edge_select = _rpythonic_function_(		"uvedit_edge_select", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("efa",		ctypes.POINTER(EditFace)),
	("tf",		ctypes.POINTER(MTFace)),
	("i",		ctypes.c_int),] )

uvedit_face_deselect = _rpythonic_function_(		"uvedit_face_deselect", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("efa",		ctypes.POINTER(EditFace)),
	("tf",		ctypes.POINTER(MTFace)),] )

uvedit_face_select = _rpythonic_function_(		"uvedit_face_select", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("efa",		ctypes.POINTER(EditFace)),
	("tf",		ctypes.POINTER(MTFace)),] )

uvedit_uv_deselect = _rpythonic_function_(		"uvedit_uv_deselect", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("efa",		ctypes.POINTER(EditFace)),
	("tf",		ctypes.POINTER(MTFace)),
	("i",		ctypes.c_int),] )

uvedit_uv_select = _rpythonic_function_(		"uvedit_uv_select", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("efa",		ctypes.POINTER(EditFace)),
	("tf",		ctypes.POINTER(MTFace)),
	("i",		ctypes.c_int),] )

ED_uvedit_nearest_uv = _rpythonic_function_(		"ED_uvedit_nearest_uv", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("obedit",		ctypes.POINTER(Object)),
	("ima",		ctypes.POINTER(Image)),
	("co",		( ctypes.c_float * 2 )),
	("uv",		( ctypes.c_float * 2 )),] )

ED_uvedit_live_unwrap_begin = _rpythonic_function_(		"ED_uvedit_live_unwrap_begin", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("obedit",		ctypes.POINTER(Object)),] )

ED_uvedit_live_unwrap_re_solve = _rpythonic_function_(		"ED_uvedit_live_unwrap_re_solve", ctypes.c_void_p, [] )

ED_uvedit_live_unwrap_end = _rpythonic_function_(		"ED_uvedit_live_unwrap_end", ctypes.c_void_p, [
	("cancel",		ctypes.c_short),] )

ED_unwrap_lscm = _rpythonic_function_(		"ED_unwrap_lscm", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("obedit",		ctypes.POINTER(Object)),
	("sel",		ctypes.c_short),] )

draw_uvedit_main = _rpythonic_function_(		"draw_uvedit_main", ctypes.c_void_p, [
	("sima",		ctypes.POINTER(SpaceImage)),
	("ar",		ctypes.POINTER(ARegion)),
	("scene",		ctypes.POINTER(Scene)),
	("obedit",		ctypes.POINTER(Object)),] )

ED_uvedit_buttons_register = _rpythonic_function_(		"ED_uvedit_buttons_register", ctypes.c_void_p, [
	("art",		ctypes.POINTER(ARegionType)),] )

WM_keyconfig_new = _rpythonic_function_(		"WM_keyconfig_new", ctypes.POINTER(wmKeyConfig), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_keyconfig_new_user = _rpythonic_function_(		"WM_keyconfig_new_user", ctypes.POINTER(wmKeyConfig), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_keyconfig_remove = _rpythonic_function_(		"WM_keyconfig_remove", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

WM_keyconfig_free = _rpythonic_function_(		"WM_keyconfig_free", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

WM_keyconfig_set_active = _rpythonic_function_(		"WM_keyconfig_set_active", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_keyconfig_update = _rpythonic_function_(		"WM_keyconfig_update", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

WM_keyconfig_update_tag = _rpythonic_function_(		"WM_keyconfig_update_tag", ctypes.c_void_p, [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("kmi",		ctypes.POINTER(wmKeyMapItem)),] )

WM_keymap_init = _rpythonic_function_(		"WM_keymap_init", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_keymap_free = _rpythonic_function_(		"WM_keymap_free", ctypes.c_void_p, [
	("keymap",		ctypes.POINTER(wmKeyMap)),] )

WM_keymap_verify_item = _rpythonic_function_(		"WM_keymap_verify_item", ctypes.POINTER(wmKeyMapItem), [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("val",		ctypes.c_int),
	("modifier",		ctypes.c_int),
	("keymodifier",		ctypes.c_int),] )

WM_keymap_add_item = _rpythonic_function_(		"WM_keymap_add_item", ctypes.POINTER(wmKeyMapItem), [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("val",		ctypes.c_int),
	("modifier",		ctypes.c_int),
	("keymodifier",		ctypes.c_int),] )

WM_keymap_add_menu = _rpythonic_function_(		"WM_keymap_add_menu", ctypes.POINTER(wmKeyMapItem), [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("val",		ctypes.c_int),
	("modifier",		ctypes.c_int),
	("keymodifier",		ctypes.c_int),] )

WM_keymap_remove_item = _rpythonic_function_(		"WM_keymap_remove_item", ctypes.c_void_p, [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("kmi",		ctypes.POINTER(wmKeyMapItem)),] )

WM_keymap_item_to_string = _rpythonic_function_(		"WM_keymap_item_to_string", ctypes.POINTER(ctypes.c_char), [
	("kmi",		ctypes.POINTER(wmKeyMapItem)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

WM_keymap_list_find = _rpythonic_function_(		"WM_keymap_list_find", ctypes.POINTER(wmKeyMap), [
	("lb",		ctypes.POINTER(ListBase)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("spaceid",		ctypes.c_int),
	("regionid",		ctypes.c_int),] )

WM_keymap_find = _rpythonic_function_(		"WM_keymap_find", ctypes.POINTER(wmKeyMap), [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("spaceid",		ctypes.c_int),
	("regionid",		ctypes.c_int),] )

WM_keymap_find_all = _rpythonic_function_(		"WM_keymap_find_all", ctypes.POINTER(wmKeyMap), [
	("C",		ctypes.POINTER(bContext)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("spaceid",		ctypes.c_int),
	("regionid",		ctypes.c_int),] )

WM_keymap_active = _rpythonic_function_(		"WM_keymap_active", ctypes.POINTER(wmKeyMap), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("keymap",		ctypes.POINTER(wmKeyMap)),] )

WM_keymap_guess_opname = _rpythonic_function_(		"WM_keymap_guess_opname", ctypes.POINTER(wmKeyMap), [
	("C",		ctypes.POINTER(bContext)),
	("opname",		ctypes.POINTER(ctypes.c_char)),] )

WM_keymap_item_find_id = _rpythonic_function_(		"WM_keymap_item_find_id", ctypes.POINTER(wmKeyMapItem), [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("C_id",		ctypes.c_int),] )

WM_keymap_item_compare = _rpythonic_function_(		"WM_keymap_item_compare", ctypes.c_int, [
	("k1",		ctypes.POINTER(wmKeyMapItem)),
	("k2",		ctypes.POINTER(wmKeyMapItem)),] )

WM_modalkeymap_add = _rpythonic_function_(		"WM_modalkeymap_add", ctypes.POINTER(wmKeyMap), [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("items",		ctypes.POINTER(EnumPropertyItem)),] )

WM_modalkeymap_get = _rpythonic_function_(		"WM_modalkeymap_get", ctypes.POINTER(wmKeyMap), [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_modalkeymap_add_item = _rpythonic_function_(		"WM_modalkeymap_add_item", ctypes.POINTER(wmKeyMapItem), [
	("km",		ctypes.POINTER(wmKeyMap)),
	("C_type",		ctypes.c_int),
	("val",		ctypes.c_int),
	("modifier",		ctypes.c_int),
	("keymodifier",		ctypes.c_int),
	("value",		ctypes.c_int),] )

WM_modalkeymap_assign = _rpythonic_function_(		"WM_modalkeymap_assign", ctypes.c_void_p, [
	("km",		ctypes.POINTER(wmKeyMap)),
	("opname",		ctypes.POINTER(ctypes.c_char)),] )

WM_keymap_restore_to_default = _rpythonic_function_(		"WM_keymap_restore_to_default", ctypes.c_void_p, [
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("C",		ctypes.POINTER(bContext)),] )

WM_keymap_properties_reset = _rpythonic_function_(		"WM_keymap_properties_reset", ctypes.c_void_p, [
	("kmi",		ctypes.POINTER(wmKeyMapItem)),
	("properties",		ctypes.POINTER(IDProperty)),] )

WM_keymap_restore_item_to_default = _rpythonic_function_(		"WM_keymap_restore_item_to_default", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("kmi",		ctypes.POINTER(wmKeyMapItem)),] )

WM_key_event_string = _rpythonic_function_(		"WM_key_event_string", ctypes.POINTER(ctypes.c_char), [
	("C_type",		ctypes.c_short),] )

WM_key_event_operator_id = _rpythonic_function_(		"WM_key_event_operator_id", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("properties",		ctypes.POINTER(IDProperty)),
	("hotkey",		ctypes.c_int),
	("keymap_r",		ctypes.POINTER(ctypes.POINTER(wmKeyMap))),] )

WM_key_event_operator_string = _rpythonic_function_(		"WM_key_event_operator_string", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("properties",		ctypes.POINTER(IDProperty)),
	("sloppy",		ctypes.c_short),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("C_len",		ctypes.c_int),] )

WM_setprefsize = _rpythonic_function_(		"WM_setprefsize", ctypes.c_void_p, [
	("stax",		ctypes.c_int),
	("stay",		ctypes.c_int),
	("sizx",		ctypes.c_int),
	("sizy",		ctypes.c_int),] )

WM_setinitialstate_fullscreen = _rpythonic_function_(		"WM_setinitialstate_fullscreen", ctypes.c_void_p, [] )

WM_setinitialstate_normal = _rpythonic_function_(		"WM_setinitialstate_normal", ctypes.c_void_p, [] )

WM_init = _rpythonic_function_(		"WM_init", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("argc",		ctypes.c_int),
	("argv",		ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),] )

WM_exit_ext = _rpythonic_function_(		"WM_exit_ext", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("do_python",		ctypes.c_short),] )

WM_exit = _rpythonic_function_(		"WM_exit", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_main = _rpythonic_function_(		"WM_main", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_init_game = _rpythonic_function_(		"WM_init_game", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

WM_init_splash = _rpythonic_function_(		"WM_init_splash", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_check = _rpythonic_function_(		"WM_check", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_window_open = _rpythonic_function_(		"WM_window_open", ctypes.POINTER(wmWindow), [
	("C",		ctypes.POINTER(bContext)),
	("rect",		ctypes.POINTER(rcti)),] )

WM_window_open_temp = _rpythonic_function_(		"WM_window_open_temp", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("position",		ctypes.POINTER(rcti)),
	("C_type",		ctypes.c_int),] )

WM_read_homefile_exec = _rpythonic_function_(		"WM_read_homefile_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_read_homefile = _rpythonic_function_(		"WM_read_homefile", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("reports",		ctypes.POINTER(ReportList)),
	("from_memory",		ctypes.c_short),] )

WM_write_homefile = _rpythonic_function_(		"WM_write_homefile", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_read_file = _rpythonic_function_(		"WM_read_file", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

WM_write_file = _rpythonic_function_(		"WM_write_file", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("target",		ctypes.POINTER(ctypes.c_char)),
	("fileflags",		ctypes.c_int),
	("reports",		ctypes.POINTER(ReportList)),
	("copy",		ctypes.c_int),] )

WM_read_autosavefile = _rpythonic_function_(		"WM_read_autosavefile", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_autosave_init = _rpythonic_function_(		"WM_autosave_init", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

WM_cursor_set = _rpythonic_function_(		"WM_cursor_set", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("curs",		ctypes.c_int),] )

WM_cursor_modal = _rpythonic_function_(		"WM_cursor_modal", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("curs",		ctypes.c_int),] )

WM_cursor_restore = _rpythonic_function_(		"WM_cursor_restore", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

WM_cursor_wait = _rpythonic_function_(		"WM_cursor_wait", ctypes.c_void_p, [
	("val",		ctypes.c_int),] )

WM_cursor_grab = _rpythonic_function_(		"WM_cursor_grab", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("wrap",		ctypes.c_int),
	("hide",		ctypes.c_int),
	("bounds",		ctypes.POINTER(ctypes.c_int)),] )

WM_cursor_ungrab = _rpythonic_function_(		"WM_cursor_ungrab", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

WM_timecursor = _rpythonic_function_(		"WM_timecursor", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("nr",		ctypes.c_int),] )

WM_paint_cursor_activate = _rpythonic_function_(		"WM_paint_cursor_activate", ctypes.POINTER(ctypes.c_void_p), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("poll",		ctypes.c_void_p),
	("draw",		ctypes.c_void_p),
	("customdata",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_paint_cursor_end = _rpythonic_function_(		"WM_paint_cursor_end", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("handle",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_cursor_warp = _rpythonic_function_(		"WM_cursor_warp", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

WM_userdef_event_map = _rpythonic_function_(		"WM_userdef_event_map", ctypes.c_int, [
	("kmitype",		ctypes.c_int),] )

WM_event_add_keymap_handler = _rpythonic_function_(		"WM_event_add_keymap_handler", ctypes.POINTER(wmEventHandler), [
	("handlers",		ctypes.POINTER(ListBase)),
	("keymap",		ctypes.POINTER(wmKeyMap)),] )

WM_event_add_keymap_handler_bb = _rpythonic_function_(		"WM_event_add_keymap_handler_bb", ctypes.POINTER(wmEventHandler), [
	("handlers",		ctypes.POINTER(ListBase)),
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("bb",		ctypes.POINTER(rcti)),
	("swinbb",		ctypes.POINTER(rcti)),] )

WM_event_add_keymap_handler_priority = _rpythonic_function_(		"WM_event_add_keymap_handler_priority", ctypes.POINTER(wmEventHandler), [
	("handlers",		ctypes.POINTER(ListBase)),
	("keymap",		ctypes.POINTER(wmKeyMap)),
	("priority",		ctypes.c_int),] )

WM_event_remove_keymap_handler = _rpythonic_function_(		"WM_event_remove_keymap_handler", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),
	("keymap",		ctypes.POINTER(wmKeyMap)),] )

WM_event_add_ui_handler = _rpythonic_function_(		"WM_event_add_ui_handler", ctypes.POINTER(wmEventHandler), [
	("C",		ctypes.POINTER(bContext)),
	("handlers",		ctypes.POINTER(ListBase)),
	("func",		ctypes.c_void_p),
	("remove",		ctypes.c_void_p),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_event_remove_ui_handler = _rpythonic_function_(		"WM_event_remove_ui_handler", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),
	("func",		ctypes.c_void_p),
	("remove",		ctypes.c_void_p),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),
	("postpone",		ctypes.c_int),] )

WM_event_remove_area_handler = _rpythonic_function_(		"WM_event_remove_area_handler", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),
	("area",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_event_add_modal_handler = _rpythonic_function_(		"WM_event_add_modal_handler", ctypes.POINTER(wmEventHandler), [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_event_remove_handlers = _rpythonic_function_(		"WM_event_remove_handlers", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("handlers",		ctypes.POINTER(ListBase)),] )

WM_event_add_dropbox_handler = _rpythonic_function_(		"WM_event_add_dropbox_handler", ctypes.POINTER(wmEventHandler), [
	("handlers",		ctypes.POINTER(ListBase)),
	("dropboxes",		ctypes.POINTER(ListBase)),] )

WM_event_add_mousemove = _rpythonic_function_(		"WM_event_add_mousemove", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_modal_tweak_exit = _rpythonic_function_(		"WM_modal_tweak_exit", ctypes.c_int, [
	("evt",		ctypes.POINTER(wmEvent)),
	("tweak_event",		ctypes.c_int),] )

WM_event_add_notifier = _rpythonic_function_(		"WM_event_add_notifier", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_type",		ctypes.c_uint),
	("reference",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_main_add_notifier = _rpythonic_function_(		"WM_main_add_notifier", ctypes.c_void_p, [
	("C_type",		ctypes.c_uint),
	("reference",		ctypes.POINTER(ctypes.c_void_p)),] )

wm_event_add = _rpythonic_function_(		"wm_event_add", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("event_to_add",		ctypes.POINTER(wmEvent)),] )

WM_event_add_timer = _rpythonic_function_(		"WM_event_add_timer", ctypes.POINTER(wmTimer), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("event_type",		ctypes.c_int),
	("timestep",		ctypes.c_double),] )

WM_event_remove_timer = _rpythonic_function_(		"WM_event_remove_timer", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("timer",		ctypes.POINTER(wmTimer)),] )

WM_event_timer_sleep = _rpythonic_function_(		"WM_event_timer_sleep", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("timer",		ctypes.POINTER(wmTimer)),
	("dosleep",		ctypes.c_int),] )

WM_menu_invoke = _rpythonic_function_(		"WM_menu_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_enum_search_invoke = _rpythonic_function_(		"WM_enum_search_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_operator_confirm = _rpythonic_function_(		"WM_operator_confirm", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_operator_filesel = _rpythonic_function_(		"WM_operator_filesel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_operator_winactive = _rpythonic_function_(		"WM_operator_winactive", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

WM_operator_props_popup = _rpythonic_function_(		"WM_operator_props_popup", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_operator_props_dialog_popup = _rpythonic_function_(		"WM_operator_props_dialog_popup", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

WM_operator_redo_popup = _rpythonic_function_(		"WM_operator_redo_popup", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_ui_popup = _rpythonic_function_(		"WM_operator_ui_popup", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

WM_operator_confirm_message = _rpythonic_function_(		"WM_operator_confirm_message", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("message",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_free = _rpythonic_function_(		"WM_operator_free", ctypes.c_void_p, [
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_stack_clear = _rpythonic_function_(		"WM_operator_stack_clear", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

WM_operatortype_find = _rpythonic_function_(		"WM_operatortype_find", ctypes.POINTER(wmOperatorType), [
	("idnamem",		ctypes.POINTER(ctypes.c_char)),
	("quiet",		ctypes.c_int),] )

WM_operatortype_iter = _rpythonic_function_(		"WM_operatortype_iter", ctypes.POINTER(GHashIterator), [] )

WM_operatortype_append = _rpythonic_function_(		"WM_operatortype_append", ctypes.c_void_p, [
	("opfunc",		ctypes.c_void_p),] )

opfunc = _rpythonic_function_(		"opfunc", ctypes.c_void_p, [
	("wmOperatorType",		ctypes.POINTER(wmOperatorType)),] )

WM_operatortype_append_ptr = _rpythonic_function_(		"WM_operatortype_append_ptr", ctypes.c_void_p, [
	("opfunc",		ctypes.c_void_p),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_operatortype_append_macro_ptr = _rpythonic_function_(		"WM_operatortype_append_macro_ptr", ctypes.c_void_p, [
	("opfunc",		ctypes.c_void_p),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_operatortype_remove = _rpythonic_function_(		"WM_operatortype_remove", ctypes.c_int, [
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_operatortype_append_macro = _rpythonic_function_(		"WM_operatortype_append_macro", ctypes.POINTER(wmOperatorType), [
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flag",		ctypes.c_int),] )

WM_operatortype_macro_define = _rpythonic_function_(		"WM_operatortype_macro_define", ctypes.POINTER(wmOperatorTypeMacro), [
	("ot",		ctypes.POINTER(wmOperatorType)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_poll = _rpythonic_function_(		"WM_operator_poll", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("ot",		ctypes.POINTER(wmOperatorType)),] )

WM_operator_poll_context = _rpythonic_function_(		"WM_operator_poll_context", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("ot",		ctypes.POINTER(wmOperatorType)),
	("context",		ctypes.c_int),] )

WM_operator_call = _rpythonic_function_(		"WM_operator_call", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_call_notest = _rpythonic_function_(		"WM_operator_call_notest", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_repeat = _rpythonic_function_(		"WM_operator_repeat", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_repeat_check = _rpythonic_function_(		"WM_operator_repeat_check", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_operator_name_call = _rpythonic_function_(		"WM_operator_name_call", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("opstring",		ctypes.POINTER(ctypes.c_char)),
	("context",		ctypes.c_int),
	("properties",		ctypes.POINTER(PointerRNA)),] )

WM_operator_call_py = _rpythonic_function_(		"WM_operator_call_py", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("ot",		ctypes.POINTER(wmOperatorType)),
	("context",		ctypes.c_int),
	("properties",		ctypes.POINTER(PointerRNA)),
	("reports",		ctypes.POINTER(ReportList)),] )

WM_operator_properties_alloc = _rpythonic_function_(		"WM_operator_properties_alloc", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(ctypes.POINTER(PointerRNA))),
	("properties",		ctypes.POINTER(ctypes.POINTER(IDProperty))),
	("opstring",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_properties_sanitize = _rpythonic_function_(		"WM_operator_properties_sanitize", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("no_context",		ctypes.c_short),] )

WM_operator_properties_create = _rpythonic_function_(		"WM_operator_properties_create", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("opstring",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_properties_create_ptr = _rpythonic_function_(		"WM_operator_properties_create_ptr", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),
	("ot",		ctypes.POINTER(wmOperatorType)),] )

WM_operator_properties_free = _rpythonic_function_(		"WM_operator_properties_free", ctypes.c_void_p, [
	("ptr",		ctypes.POINTER(PointerRNA)),] )

WM_operator_properties_filesel = _rpythonic_function_(		"WM_operator_properties_filesel", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),
	("filter",		ctypes.c_int),
	("C_type",		ctypes.c_short),
	("action",		ctypes.c_short),
	("flag",		ctypes.c_short),] )

WM_operator_properties_gesture_border = _rpythonic_function_(		"WM_operator_properties_gesture_border", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),
	("extend",		ctypes.c_int),] )

WM_operator_properties_gesture_straightline = _rpythonic_function_(		"WM_operator_properties_gesture_straightline", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),
	("cursor",		ctypes.c_int),] )

WM_operator_properties_select_all = _rpythonic_function_(		"WM_operator_properties_select_all", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

WM_operator_check_ui_enabled = _rpythonic_function_(		"WM_operator_check_ui_enabled", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_last_redo = _rpythonic_function_(		"WM_operator_last_redo", ctypes.POINTER(wmOperator), [
	("C",		ctypes.POINTER(bContext)),] )

WM_operator_pystring = _rpythonic_function_(		"WM_operator_pystring", ctypes.POINTER(ctypes.c_char), [
	("C",		ctypes.POINTER(bContext)),
	("ot",		ctypes.POINTER(wmOperatorType)),
	("opptr",		ctypes.POINTER(PointerRNA)),
	("all_args",		ctypes.c_int),] )

WM_operator_bl_idname = _rpythonic_function_(		"WM_operator_bl_idname", ctypes.c_void_p, [
	("to",		ctypes.POINTER(ctypes.c_char)),
	("from",		ctypes.POINTER(ctypes.c_char)),] )

WM_operator_py_idname = _rpythonic_function_(		"WM_operator_py_idname", ctypes.c_void_p, [
	("to",		ctypes.POINTER(ctypes.c_char)),
	("from",		ctypes.POINTER(ctypes.c_char)),] )

WM_menutype_init = _rpythonic_function_(		"WM_menutype_init", ctypes.c_void_p, [] )

WM_menutype_find = _rpythonic_function_(		"WM_menutype_find", ctypes.POINTER(MenuType), [
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("quiet",		ctypes.c_int),] )

WM_menutype_add = _rpythonic_function_(		"WM_menutype_add", ctypes.c_int, [
	("mt",		ctypes.POINTER(MenuType)),] )

WM_menutype_freelink = _rpythonic_function_(		"WM_menutype_freelink", ctypes.c_void_p, [
	("mt",		ctypes.POINTER(MenuType)),] )

WM_menutype_free = _rpythonic_function_(		"WM_menutype_free", ctypes.c_void_p, [] )

WM_border_select_invoke = _rpythonic_function_(		"WM_border_select_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_border_select_modal = _rpythonic_function_(		"WM_border_select_modal", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_border_select_cancel = _rpythonic_function_(		"WM_border_select_cancel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_gesture_circle_invoke = _rpythonic_function_(		"WM_gesture_circle_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_circle_modal = _rpythonic_function_(		"WM_gesture_circle_modal", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_circle_cancel = _rpythonic_function_(		"WM_gesture_circle_cancel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_gesture_lines_invoke = _rpythonic_function_(		"WM_gesture_lines_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_lines_modal = _rpythonic_function_(		"WM_gesture_lines_modal", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_lines_cancel = _rpythonic_function_(		"WM_gesture_lines_cancel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_gesture_lasso_invoke = _rpythonic_function_(		"WM_gesture_lasso_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_lasso_modal = _rpythonic_function_(		"WM_gesture_lasso_modal", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_lasso_cancel = _rpythonic_function_(		"WM_gesture_lasso_cancel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_gesture_straightline_invoke = _rpythonic_function_(		"WM_gesture_straightline_invoke", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_straightline_modal = _rpythonic_function_(		"WM_gesture_straightline_modal", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("event",		ctypes.POINTER(wmEvent)),] )

WM_gesture_straightline_cancel = _rpythonic_function_(		"WM_gesture_straightline_cancel", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_OT_tweak_gesture = _rpythonic_function_(		"WM_OT_tweak_gesture", ctypes.c_void_p, [
	("ot",		ctypes.POINTER(wmOperatorType)),] )

WM_gesture_new = _rpythonic_function_(		"WM_gesture_new", ctypes.POINTER(wmGesture), [
	("C",		ctypes.POINTER(bContext)),
	("event",		ctypes.POINTER(wmEvent)),
	("C_type",		ctypes.c_int),] )

WM_gesture_end = _rpythonic_function_(		"WM_gesture_end", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("gesture",		ctypes.POINTER(wmGesture)),] )

WM_gestures_remove = _rpythonic_function_(		"WM_gestures_remove", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

WM_event_add_fileselect = _rpythonic_function_(		"WM_event_add_fileselect", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

WM_event_fileselect_event = _rpythonic_function_(		"WM_event_fileselect_event", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ophandle",		ctypes.POINTER(ctypes.c_void_p)),
	("eventval",		ctypes.c_int),] )

WM_event_print = _rpythonic_function_(		"WM_event_print", ctypes.c_void_p, [
	("event",		ctypes.POINTER(wmEvent)),] )

WM_event_start_drag = _rpythonic_function_(		"WM_event_start_drag", ctypes.POINTER(wmDrag), [
	("C",		ctypes.POINTER(bContext)),
	("icon",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("value",		ctypes.c_double),] )

WM_event_drag_image = _rpythonic_function_(		"WM_event_drag_image", ctypes.c_void_p, [
	("wmDrag",		ctypes.POINTER(wmDrag)),
	("ImBuf",		ctypes.POINTER(ImBuf)),
	("scale",		ctypes.c_float),
	("sx",		ctypes.c_int),
	("sy",		ctypes.c_int),] )

WM_dropbox_add = _rpythonic_function_(		"WM_dropbox_add", ctypes.POINTER(wmDropBox), [
	("lb",		ctypes.POINTER(ListBase)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("poll",		ctypes.c_void_p),
	("copy",		ctypes.c_void_p),] )

copy = _rpythonic_function_(		"copy", ctypes.c_void_p, [
	("wmDrag",		ctypes.POINTER(wmDrag)),
	("wmDropBox",		ctypes.POINTER(wmDropBox)),] )

WM_dropboxmap_find = _rpythonic_function_(		"WM_dropboxmap_find", ctypes.POINTER(ListBase), [
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("spaceid",		ctypes.c_int),
	("regionid",		ctypes.c_int),] )

wmSubWindowSet = _rpythonic_function_(		"wmSubWindowSet", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),] )

wmSubWindowScissorSet = _rpythonic_function_(		"wmSubWindowScissorSet", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),
	("srct",		ctypes.POINTER(rcti)),] )

wmFrustum = _rpythonic_function_(		"wmFrustum", ctypes.c_void_p, [
	("x1",		ctypes.c_float),
	("x2",		ctypes.c_float),
	("y1",		ctypes.c_float),
	("y2",		ctypes.c_float),
	("n",		ctypes.c_float),
	("f",		ctypes.c_float),] )

wmOrtho = _rpythonic_function_(		"wmOrtho", ctypes.c_void_p, [
	("x1",		ctypes.c_float),
	("x2",		ctypes.c_float),
	("y1",		ctypes.c_float),
	("y2",		ctypes.c_float),
	("n",		ctypes.c_float),
	("f",		ctypes.c_float),] )

wmOrtho2 = _rpythonic_function_(		"wmOrtho2", ctypes.c_void_p, [
	("x1",		ctypes.c_float),
	("x2",		ctypes.c_float),
	("y1",		ctypes.c_float),
	("y2",		ctypes.c_float),] )

WM_set_framebuffer_index_color = _rpythonic_function_(		"WM_set_framebuffer_index_color", ctypes.c_void_p, [
	("index",		ctypes.c_int),] )

WM_framebuffer_to_index = _rpythonic_function_(		"WM_framebuffer_to_index", ctypes.c_int, [
	("col",		ctypes.c_uint),] )

WM_jobs_get = _rpythonic_function_(		"WM_jobs_get", ctypes.POINTER(wmJob), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("flag",		ctypes.c_int),] )

WM_jobs_test = _rpythonic_function_(		"WM_jobs_test", ctypes.c_int, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_jobs_progress = _rpythonic_function_(		"WM_jobs_progress", ctypes.c_float, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_jobs_name = _rpythonic_function_(		"WM_jobs_name", ctypes.POINTER(ctypes.c_char), [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_jobs_is_running = _rpythonic_function_(		"WM_jobs_is_running", ctypes.c_int, [
	("wmJob",		ctypes.POINTER(wmJob)),] )

WM_jobs_get_customdata = _rpythonic_function_(		"WM_jobs_get_customdata", ctypes.POINTER(ctypes.c_void_p), [
	("wmJob",		ctypes.POINTER(wmJob)),] )

WM_jobs_customdata = _rpythonic_function_(		"WM_jobs_customdata", ctypes.c_void_p, [
	("wmJob",		ctypes.POINTER(wmJob)),
	("customdata",		ctypes.POINTER(ctypes.c_void_p)),
	("free",		ctypes.c_void_p),] )

WM_jobs_timer = _rpythonic_function_(		"WM_jobs_timer", ctypes.c_void_p, [
	("wmJob",		ctypes.POINTER(wmJob)),
	("timestep",		ctypes.c_double),
	("note",		ctypes.c_uint),
	("endnote",		ctypes.c_uint),] )

WM_jobs_callbacks = _rpythonic_function_(		"WM_jobs_callbacks", ctypes.c_void_p, [
	("wmJob",		ctypes.POINTER(wmJob)),
	("startjob",		ctypes.c_void_p),
	("initjob",		ctypes.c_void_p),
	("update",		ctypes.c_void_p),
	("endjob",		ctypes.c_void_p),] )

startjob = _rpythonic_function_(		"startjob", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.POINTER(ctypes.c_short)),
	("none",		ctypes.POINTER(ctypes.c_short)),
	("none",		ctypes.POINTER(ctypes.c_float)),] )

initjob = _rpythonic_function_(		"initjob", ctypes.c_void_p, [] )

endjob = _rpythonic_function_(		"endjob", ctypes.c_void_p, [] )

WM_jobs_start = _rpythonic_function_(		"WM_jobs_start", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("wmJob",		ctypes.POINTER(wmJob)),] )

WM_jobs_stop = _rpythonic_function_(		"WM_jobs_stop", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("startjob",		ctypes.POINTER(ctypes.c_void_p)),] )

WM_jobs_kill = _rpythonic_function_(		"WM_jobs_kill", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("owner",		ctypes.POINTER(ctypes.c_void_p)),
	("none",		ctypes.c_void_p),] )

WM_jobs_stop_all = _rpythonic_function_(		"WM_jobs_stop_all", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

WM_jobs_has_running = _rpythonic_function_(		"WM_jobs_has_running", ctypes.c_int, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

WM_clipboard_text_get = _rpythonic_function_(		"WM_clipboard_text_get", ctypes.POINTER(ctypes.c_char), [
	("selection",		ctypes.c_int),] )

WM_clipboard_text_set = _rpythonic_function_(		"WM_clipboard_text_set", ctypes.c_void_p, [
	("buf",		ctypes.POINTER(ctypes.c_char)),
	("selection",		ctypes.c_int),] )

WM_progress_set = _rpythonic_function_(		"WM_progress_set", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("progress",		ctypes.c_float),] )

WM_progress_clear = _rpythonic_function_(		"WM_progress_clear", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

WM_redraw_windows = _rpythonic_function_(		"WM_redraw_windows", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

write_crash_blend = _rpythonic_function_(		"write_crash_blend", ctypes.c_int, [] )

wm_init_cursor_data = _rpythonic_function_(		"wm_init_cursor_data", ctypes.c_void_p, [] )

wm_cursor_arrow_move = _rpythonic_function_(		"wm_cursor_arrow_move", ctypes.c_int, [
	("win",		ctypes.POINTER(wmWindow)),
	("event",		ctypes.POINTER(wmEvent)),] )

wmUIHandlerFunc = _rpythonic_function_(		"wmUIHandlerFunc", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("event",		ctypes.POINTER(wmEvent)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

wmUIHandlerRemoveFunc = _rpythonic_function_(		"wmUIHandlerRemoveFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

C_exec = _rpythonic_function_(		"C_exec", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),] )

check = _rpythonic_function_(		"check", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),] )

invoke = _rpythonic_function_(		"invoke", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),
	("wmEvent",		ctypes.POINTER(wmEvent)),] )

cancel = _rpythonic_function_(		"cancel", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),] )

modal = _rpythonic_function_(		"modal", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),
	("wmEvent",		ctypes.POINTER(wmEvent)),] )

ui = _rpythonic_function_(		"ui", ctypes.c_void_p, [
	("bContext",		ctypes.POINTER(bContext)),
	("wmOperator",		ctypes.POINTER(wmOperator)),] )

pyop_poll = _rpythonic_function_(		"pyop_poll", ctypes.c_int, [
	("bContext",		ctypes.POINTER(bContext)),
	("ot",		ctypes.POINTER(wmOperatorType)),] )

wmPaintCursorDraw = _rpythonic_function_(		"wmPaintCursorDraw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("none",		ctypes.c_int),
	("none",		ctypes.c_int),
	("customdata",		ctypes.POINTER(ctypes.c_void_p)),] )

wm_close_and_free = _rpythonic_function_(		"wm_close_and_free", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

wm_close_and_free_all = _rpythonic_function_(		"wm_close_and_free_all", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

wm_add_default = _rpythonic_function_(		"wm_add_default", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_clear_default_size = _rpythonic_function_(		"wm_clear_default_size", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_operator_register = _rpythonic_function_(		"wm_operator_register", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

wm_report_free = _rpythonic_function_(		"wm_report_free", ctypes.c_void_p, [
	("report",		ctypes.POINTER(wmReport)),] )

wm_operatortype_free = _rpythonic_function_(		"wm_operatortype_free", ctypes.c_void_p, [] )

wm_operatortype_init = _rpythonic_function_(		"wm_operatortype_init", ctypes.c_void_p, [] )

wm_window_keymap = _rpythonic_function_(		"wm_window_keymap", ctypes.c_void_p, [
	("keyconf",		ctypes.POINTER(wmKeyConfig)),] )

wm_tweakevent_test = _rpythonic_function_(		"wm_tweakevent_test", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("event",		ctypes.POINTER(wmEvent)),
	("action",		ctypes.c_int),] )

wm_gesture_draw = _rpythonic_function_(		"wm_gesture_draw", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_gesture_evaluate = _rpythonic_function_(		"wm_gesture_evaluate", ctypes.c_int, [
	("gesture",		ctypes.POINTER(wmGesture)),] )

wm_gesture_tag_redraw = _rpythonic_function_(		"wm_gesture_tag_redraw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_jobs_timer = _rpythonic_function_(		"wm_jobs_timer", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),
	("wt",		ctypes.POINTER(wmTimer)),] )

wm_jobs_timer_ended = _rpythonic_function_(		"wm_jobs_timer_ended", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("wt",		ctypes.POINTER(wmTimer)),] )

wm_autosave_timer = _rpythonic_function_(		"wm_autosave_timer", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),
	("wt",		ctypes.POINTER(wmTimer)),] )

wm_autosave_timer_ended = _rpythonic_function_(		"wm_autosave_timer_ended", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),] )

wm_autosave_delete = _rpythonic_function_(		"wm_autosave_delete", ctypes.c_void_p, [] )

wm_autosave_read = _rpythonic_function_(		"wm_autosave_read", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("reports",		ctypes.POINTER(ReportList)),] )

wm_autosave_location = _rpythonic_function_(		"wm_autosave_location", ctypes.c_void_p, [
	("filepath",		ctypes.POINTER(ctypes.c_char)),] )

wm_event_free_all = _rpythonic_function_(		"wm_event_free_all", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_event_free = _rpythonic_function_(		"wm_event_free", ctypes.c_void_p, [
	("event",		ctypes.POINTER(wmEvent)),] )

wm_event_free_handler = _rpythonic_function_(		"wm_event_free_handler", ctypes.c_void_p, [
	("handler",		ctypes.POINTER(wmEventHandler)),] )

wm_event_do_handlers = _rpythonic_function_(		"wm_event_do_handlers", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_event_add_ghostevent = _rpythonic_function_(		"wm_event_add_ghostevent", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),
	("C_type",		ctypes.c_int),
	("time",		ctypes.c_int),
	("customdata",		ctypes.POINTER(ctypes.c_void_p)),] )

wm_event_do_notifiers = _rpythonic_function_(		"wm_event_do_notifiers", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_dropbox_free = _rpythonic_function_(		"wm_dropbox_free", ctypes.c_void_p, [] )

wm_drags_check_ops = _rpythonic_function_(		"wm_drags_check_ops", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("event",		ctypes.POINTER(wmEvent)),] )

wm_drags_draw = _rpythonic_function_(		"wm_drags_draw", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("win",		ctypes.POINTER(wmWindow)),
	("rect",		ctypes.POINTER(rcti)),] )

wm_draw_update = _rpythonic_function_(		"wm_draw_update", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_draw_window_clear = _rpythonic_function_(		"wm_draw_window_clear", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_draw_region_clear = _rpythonic_function_(		"wm_draw_region_clear", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("ar",		ctypes.POINTER(ARegion)),] )

wm_tag_redraw_overlay = _rpythonic_function_(		"wm_tag_redraw_overlay", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("ar",		ctypes.POINTER(ARegion)),] )

wm_ghost_init = _rpythonic_function_(		"wm_ghost_init", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_ghost_exit = _rpythonic_function_(		"wm_ghost_exit", ctypes.c_void_p, [] )

wm_get_screensize = _rpythonic_function_(		"wm_get_screensize", ctypes.c_void_p, [
	("width_r",		ctypes.POINTER(ctypes.c_int)),
	("height_r",		ctypes.POINTER(ctypes.c_int)),] )

wm_window_new = _rpythonic_function_(		"wm_window_new", ctypes.POINTER(wmWindow), [
	("C",		ctypes.POINTER(bContext)),] )

wm_window_free = _rpythonic_function_(		"wm_window_free", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_close = _rpythonic_function_(		"wm_window_close", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_title = _rpythonic_function_(		"wm_window_title", ctypes.c_void_p, [
	("wm",		ctypes.POINTER(wmWindowManager)),
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_add_ghostwindows = _rpythonic_function_(		"wm_window_add_ghostwindows", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("wm",		ctypes.POINTER(wmWindowManager)),] )

wm_window_process_events = _rpythonic_function_(		"wm_window_process_events", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

wm_window_process_events_nosleep = _rpythonic_function_(		"wm_window_process_events_nosleep", ctypes.c_void_p, [] )

wm_window_make_drawable = _rpythonic_function_(		"wm_window_make_drawable", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_raise = _rpythonic_function_(		"wm_window_raise", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_lower = _rpythonic_function_(		"wm_window_lower", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_window_set_size = _rpythonic_function_(		"wm_window_set_size", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

wm_window_get_size = _rpythonic_function_(		"wm_window_get_size", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("width_r",		ctypes.POINTER(ctypes.c_int)),
	("height_r",		ctypes.POINTER(ctypes.c_int)),] )

wm_window_get_size_ghost = _rpythonic_function_(		"wm_window_get_size_ghost", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("width_r",		ctypes.POINTER(ctypes.c_int)),
	("height_r",		ctypes.POINTER(ctypes.c_int)),] )

wm_window_get_position = _rpythonic_function_(		"wm_window_get_position", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("posx_r",		ctypes.POINTER(ctypes.c_int)),
	("posy_r",		ctypes.POINTER(ctypes.c_int)),] )

wm_window_swap_buffers = _rpythonic_function_(		"wm_window_swap_buffers", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_get_cursor_position = _rpythonic_function_(		"wm_get_cursor_position", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

wm_window_copy = _rpythonic_function_(		"wm_window_copy", ctypes.POINTER(wmWindow), [
	("C",		ctypes.POINTER(bContext)),
	("winorig",		ctypes.POINTER(wmWindow)),] )

wm_window_testbreak = _rpythonic_function_(		"wm_window_testbreak", ctypes.c_void_p, [] )

wm_window_duplicate_exec = _rpythonic_function_(		"wm_window_duplicate_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

wm_window_fullscreen_toggle_exec = _rpythonic_function_(		"wm_window_fullscreen_toggle_exec", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),] )

wm_subwindows_free = _rpythonic_function_(		"wm_subwindows_free", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_subwindow_open = _rpythonic_function_(		"wm_subwindow_open", ctypes.c_int, [
	("win",		ctypes.POINTER(wmWindow)),
	("winrct",		ctypes.POINTER(rcti)),] )

wm_subwindow_close = _rpythonic_function_(		"wm_subwindow_close", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),] )

wm_subwindow_get = _rpythonic_function_(		"wm_subwindow_get", ctypes.c_int, [
	("win",		ctypes.POINTER(wmWindow)),] )

wm_subwindow_position = _rpythonic_function_(		"wm_subwindow_position", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),
	("winrct",		ctypes.POINTER(rcti)),] )

wm_subwindow_getsize = _rpythonic_function_(		"wm_subwindow_getsize", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

wm_subwindow_getorigin = _rpythonic_function_(		"wm_subwindow_getorigin", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

wm_subwindow_getmatrix = _rpythonic_function_(		"wm_subwindow_getmatrix", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("swinid",		ctypes.c_int),
	("mat",		ctypes.c_float),] )

index_to_framebuffer = _rpythonic_function_(		"index_to_framebuffer", ctypes.c_uint, [
	("index",		ctypes.c_int),] )

GPU_state_init = _rpythonic_function_(		"GPU_state_init", ctypes.c_void_p, [] )

GPU_state_print = _rpythonic_function_(		"GPU_state_print", ctypes.c_void_p, [] )

GPU_begin_object_materials = _rpythonic_function_(		"GPU_begin_object_materials", ctypes.c_void_p, [
	("v3d",		ctypes.POINTER(View3D)),
	("rv3d",		ctypes.POINTER(RegionView3D)),
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("glsl",		ctypes.c_int),
	("do_alpha_after",		ctypes.POINTER(ctypes.c_int)),] )

GPU_end_object_materials = _rpythonic_function_(		"GPU_end_object_materials", ctypes.c_void_p, [] )

GPU_enable_material = _rpythonic_function_(		"GPU_enable_material", ctypes.c_int, [
	("nr",		ctypes.c_int),
	("attribs",		ctypes.POINTER(ctypes.c_void_p)),] )

GPU_disable_material = _rpythonic_function_(		"GPU_disable_material", ctypes.c_void_p, [] )

GPU_set_material_alpha_blend = _rpythonic_function_(		"GPU_set_material_alpha_blend", ctypes.c_void_p, [
	("alphablend",		ctypes.c_int),] )

GPU_get_material_alpha_blend = _rpythonic_function_(		"GPU_get_material_alpha_blend", ctypes.c_int, [] )

GPU_set_tpage = _rpythonic_function_(		"GPU_set_tpage", ctypes.c_int, [
	("tface",		ctypes.POINTER(MTFace)),
	("mipmap",		ctypes.c_int),
	("transp",		ctypes.c_int),] )

GPU_default_lights = _rpythonic_function_(		"GPU_default_lights", ctypes.c_int, [] )

GPU_scene_object_lights = _rpythonic_function_(		"GPU_scene_object_lights", ctypes.c_int, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("lay",		ctypes.c_int),
	("viewmat",		ctypes.c_float),
	("ortho",		ctypes.c_int),] )

GPU_render_text = _rpythonic_function_(		"GPU_render_text", ctypes.c_void_p, [
	("tface",		ctypes.POINTER(MTFace)),
	("mode",		ctypes.c_int),
	("textstr",		ctypes.POINTER(ctypes.c_char)),
	("textlen",		ctypes.c_int),
	("col",		ctypes.POINTER(ctypes.c_uint)),
	("v1",		ctypes.POINTER(ctypes.c_float)),
	("v2",		ctypes.POINTER(ctypes.c_float)),
	("v3",		ctypes.POINTER(ctypes.c_float)),
	("v4",		ctypes.POINTER(ctypes.c_float)),
	("glattrib",		ctypes.c_int),] )

GPU_set_mipmap = _rpythonic_function_(		"GPU_set_mipmap", ctypes.c_void_p, [
	("mipmap",		ctypes.c_int),] )

GPU_set_linear_mipmap = _rpythonic_function_(		"GPU_set_linear_mipmap", ctypes.c_void_p, [
	("linear",		ctypes.c_int),] )

GPU_paint_set_mipmap = _rpythonic_function_(		"GPU_paint_set_mipmap", ctypes.c_void_p, [
	("mipmap",		ctypes.c_int),] )

GPU_set_anisotropic = _rpythonic_function_(		"GPU_set_anisotropic", ctypes.c_void_p, [
	("value",		ctypes.c_float),] )

GPU_get_anisotropic = _rpythonic_function_(		"GPU_get_anisotropic", ctypes.c_float, [] )

GPU_paint_update_image = _rpythonic_function_(		"GPU_paint_update_image", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("mipmap",		ctypes.c_int),] )

GPU_update_images_framechange = _rpythonic_function_(		"GPU_update_images_framechange", ctypes.c_void_p, [] )

GPU_update_image_time = _rpythonic_function_(		"GPU_update_image_time", ctypes.c_int, [
	("ima",		ctypes.POINTER(Image)),
	("time",		ctypes.c_double),] )

GPU_verify_image = _rpythonic_function_(		"GPU_verify_image", ctypes.c_int, [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),
	("tftile",		ctypes.c_int),
	("compare",		ctypes.c_int),
	("mipmap",		ctypes.c_int),] )

GPU_free_image = _rpythonic_function_(		"GPU_free_image", ctypes.c_void_p, [
	("ima",		ctypes.POINTER(Image)),] )

GPU_free_images = _rpythonic_function_(		"GPU_free_images", ctypes.c_void_p, [] )

GPU_free_images_anim = _rpythonic_function_(		"GPU_free_images_anim", ctypes.c_void_p, [] )

GPU_free_smoke = _rpythonic_function_(		"GPU_free_smoke", ctypes.c_void_p, [
	("smd",		ctypes.POINTER(SmokeModifierData)),] )

GPU_create_smoke = _rpythonic_function_(		"GPU_create_smoke", ctypes.c_void_p, [
	("smd",		ctypes.POINTER(SmokeModifierData)),
	("highres",		ctypes.c_int),] )

GPU_free_unused_buffers = _rpythonic_function_(		"GPU_free_unused_buffers", ctypes.c_void_p, [] )

GPU_extensions_disable = _rpythonic_function_(		"GPU_extensions_disable", ctypes.c_void_p, [] )

GPU_extensions_init = _rpythonic_function_(		"GPU_extensions_init", ctypes.c_void_p, [] )

GPU_extensions_exit = _rpythonic_function_(		"GPU_extensions_exit", ctypes.c_void_p, [] )

GPU_print_error = _rpythonic_function_(		"GPU_print_error", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

GPU_glsl_support = _rpythonic_function_(		"GPU_glsl_support", ctypes.c_int, [] )

GPU_non_power_of_two_support = _rpythonic_function_(		"GPU_non_power_of_two_support", ctypes.c_int, [] )

GPU_color_depth = _rpythonic_function_(		"GPU_color_depth", ctypes.c_int, [] )

GPU_code_generate_glsl_lib = _rpythonic_function_(		"GPU_code_generate_glsl_lib", ctypes.c_void_p, [] )

GPU_bicubic_bump_support = _rpythonic_function_(		"GPU_bicubic_bump_support", ctypes.c_int, [] )

GPU_type_matches = _rpythonic_function_(		"GPU_type_matches", ctypes.c_int, [
	("device",		ctypes.c_int),
	("os",		ctypes.c_int),
	("driver",		ctypes.c_int),] )

GPU_texture_create_1D = _rpythonic_function_(		"GPU_texture_create_1D", ctypes.POINTER(GPUTexture), [
	("w",		ctypes.c_int),
	("pixels",		ctypes.POINTER(ctypes.c_float)),
	("err_out",		( ctypes.c_char * 256 )),] )

GPU_texture_create_2D = _rpythonic_function_(		"GPU_texture_create_2D", ctypes.POINTER(GPUTexture), [
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("pixels",		ctypes.POINTER(ctypes.c_float)),
	("err_out",		( ctypes.c_char * 256 )),] )

GPU_texture_create_3D = _rpythonic_function_(		"GPU_texture_create_3D", ctypes.POINTER(GPUTexture), [
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("depth",		ctypes.c_int),
	("fpixels",		ctypes.POINTER(ctypes.c_float)),] )

GPU_texture_create_depth = _rpythonic_function_(		"GPU_texture_create_depth", ctypes.POINTER(GPUTexture), [
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),
	("err_out",		( ctypes.c_char * 256 )),] )

GPU_texture_from_blender = _rpythonic_function_(		"GPU_texture_from_blender", ctypes.POINTER(GPUTexture), [
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),
	("time",		ctypes.c_double),
	("mipmap",		ctypes.c_int),] )

GPU_texture_free = _rpythonic_function_(		"GPU_texture_free", ctypes.c_void_p, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_ref = _rpythonic_function_(		"GPU_texture_ref", ctypes.c_void_p, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_bind = _rpythonic_function_(		"GPU_texture_bind", ctypes.c_void_p, [
	("tex",		ctypes.POINTER(GPUTexture)),
	("number",		ctypes.c_int),] )

GPU_texture_unbind = _rpythonic_function_(		"GPU_texture_unbind", ctypes.c_void_p, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_framebuffer = _rpythonic_function_(		"GPU_texture_framebuffer", ctypes.POINTER(GPUFrameBuffer), [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_target = _rpythonic_function_(		"GPU_texture_target", ctypes.c_int, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_opengl_width = _rpythonic_function_(		"GPU_texture_opengl_width", ctypes.c_int, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_opengl_height = _rpythonic_function_(		"GPU_texture_opengl_height", ctypes.c_int, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_texture_opengl_bindcode = _rpythonic_function_(		"GPU_texture_opengl_bindcode", ctypes.c_int, [
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_framebuffer_create = _rpythonic_function_(		"GPU_framebuffer_create", ctypes.POINTER(GPUFrameBuffer), [] )

GPU_framebuffer_texture_attach = _rpythonic_function_(		"GPU_framebuffer_texture_attach", ctypes.c_int, [
	("fb",		ctypes.POINTER(GPUFrameBuffer)),
	("tex",		ctypes.POINTER(GPUTexture)),
	("err_out",		( ctypes.c_char * 256 )),] )

GPU_framebuffer_texture_detach = _rpythonic_function_(		"GPU_framebuffer_texture_detach", ctypes.c_void_p, [
	("fb",		ctypes.POINTER(GPUFrameBuffer)),
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_framebuffer_texture_bind = _rpythonic_function_(		"GPU_framebuffer_texture_bind", ctypes.c_void_p, [
	("fb",		ctypes.POINTER(GPUFrameBuffer)),
	("tex",		ctypes.POINTER(GPUTexture)),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

GPU_framebuffer_texture_unbind = _rpythonic_function_(		"GPU_framebuffer_texture_unbind", ctypes.c_void_p, [
	("fb",		ctypes.POINTER(GPUFrameBuffer)),
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_framebuffer_free = _rpythonic_function_(		"GPU_framebuffer_free", ctypes.c_void_p, [
	("fb",		ctypes.POINTER(GPUFrameBuffer)),] )

GPU_framebuffer_restore = _rpythonic_function_(		"GPU_framebuffer_restore", ctypes.c_void_p, [] )

GPU_offscreen_create = _rpythonic_function_(		"GPU_offscreen_create", ctypes.POINTER(GPUOffScreen), [
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),
	("err_out",		( ctypes.c_char * 256 )),] )

GPU_offscreen_free = _rpythonic_function_(		"GPU_offscreen_free", ctypes.c_void_p, [
	("ofs",		ctypes.POINTER(GPUOffScreen)),] )

GPU_offscreen_bind = _rpythonic_function_(		"GPU_offscreen_bind", ctypes.c_void_p, [
	("ofs",		ctypes.POINTER(GPUOffScreen)),] )

GPU_offscreen_unbind = _rpythonic_function_(		"GPU_offscreen_unbind", ctypes.c_void_p, [
	("ofs",		ctypes.POINTER(GPUOffScreen)),] )

GPU_offscreen_read_pixels = _rpythonic_function_(		"GPU_offscreen_read_pixels", ctypes.c_void_p, [
	("ofs",		ctypes.POINTER(GPUOffScreen)),
	("C_type",		ctypes.c_int),
	("pixels",		ctypes.POINTER(ctypes.c_void_p)),] )

GPU_shader_create = _rpythonic_function_(		"GPU_shader_create", ctypes.POINTER(GPUShader), [
	("vertexcode",		ctypes.POINTER(ctypes.c_char)),
	("fragcode",		ctypes.POINTER(ctypes.c_char)),
	("libcode",		ctypes.POINTER(ctypes.c_char)),] )

GPU_shader_free = _rpythonic_function_(		"GPU_shader_free", ctypes.c_void_p, [
	("shader",		ctypes.POINTER(GPUShader)),] )

GPU_shader_bind = _rpythonic_function_(		"GPU_shader_bind", ctypes.c_void_p, [
	("shader",		ctypes.POINTER(GPUShader)),] )

GPU_shader_unbind = _rpythonic_function_(		"GPU_shader_unbind", ctypes.c_void_p, [
	("shader",		ctypes.POINTER(GPUShader)),] )

GPU_shader_get_uniform = _rpythonic_function_(		"GPU_shader_get_uniform", ctypes.c_int, [
	("shader",		ctypes.POINTER(GPUShader)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

GPU_shader_uniform_vector = _rpythonic_function_(		"GPU_shader_uniform_vector", ctypes.c_void_p, [
	("shader",		ctypes.POINTER(GPUShader)),
	("location",		ctypes.c_int),
	("length",		ctypes.c_int),
	("arraysize",		ctypes.c_int),
	("value",		ctypes.POINTER(ctypes.c_float)),] )

GPU_shader_uniform_texture = _rpythonic_function_(		"GPU_shader_uniform_texture", ctypes.c_void_p, [
	("shader",		ctypes.POINTER(GPUShader)),
	("location",		ctypes.c_int),
	("tex",		ctypes.POINTER(GPUTexture)),] )

GPU_shader_get_attribute = _rpythonic_function_(		"GPU_shader_get_attribute", ctypes.c_int, [
	("shader",		ctypes.POINTER(GPUShader)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

GPU_global_buffer_pool_free = _rpythonic_function_(		"GPU_global_buffer_pool_free", ctypes.c_void_p, [] )

GPU_buffer_alloc = _rpythonic_function_(		"GPU_buffer_alloc", ctypes.POINTER(GPUBuffer), [
	("size",		ctypes.c_int),] )

GPU_buffer_free = _rpythonic_function_(		"GPU_buffer_free", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(GPUBuffer)),] )

GPU_drawobject_new = _rpythonic_function_(		"GPU_drawobject_new", ctypes.POINTER(GPUDrawObject), [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_drawobject_free = _rpythonic_function_(		"GPU_drawobject_free", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_vertex_setup = _rpythonic_function_(		"GPU_vertex_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_normal_setup = _rpythonic_function_(		"GPU_normal_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_uv_setup = _rpythonic_function_(		"GPU_uv_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_color_setup = _rpythonic_function_(		"GPU_color_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_edge_setup = _rpythonic_function_(		"GPU_edge_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_uvedge_setup = _rpythonic_function_(		"GPU_uvedge_setup", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_interleaved_setup = _rpythonic_function_(		"GPU_interleaved_setup", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(GPUBuffer)),
	("data",		ctypes.c_int),] )

GPU_attrib_element_size = _rpythonic_function_(		"GPU_attrib_element_size", ctypes.c_int, [
	("data",		GPUAttrib),
	("numdata",		ctypes.c_int),] )

GPU_interleaved_attrib_setup = _rpythonic_function_(		"GPU_interleaved_attrib_setup", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(GPUBuffer)),
	("data",		GPUAttrib),
	("numdata",		ctypes.c_int),] )

GPU_buffer_lock = _rpythonic_function_(		"GPU_buffer_lock", ctypes.POINTER(ctypes.c_void_p), [
	("buffer",		ctypes.POINTER(GPUBuffer)),] )

GPU_buffer_lock_stream = _rpythonic_function_(		"GPU_buffer_lock_stream", ctypes.POINTER(ctypes.c_void_p), [
	("buffer",		ctypes.POINTER(GPUBuffer)),] )

GPU_buffer_unlock = _rpythonic_function_(		"GPU_buffer_unlock", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(GPUBuffer)),] )

GPU_color3_upload = _rpythonic_function_(		"GPU_color3_upload", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

GPU_color4_upload = _rpythonic_function_(		"GPU_color4_upload", ctypes.c_void_p, [
	("dm",		ctypes.POINTER(DerivedMesh)),
	("data",		ctypes.POINTER(ctypes.c_ubyte)),] )

GPU_color_switch = _rpythonic_function_(		"GPU_color_switch", ctypes.c_void_p, [
	("mode",		ctypes.c_int),] )

GPU_buffer_draw_elements = _rpythonic_function_(		"GPU_buffer_draw_elements", ctypes.c_void_p, [
	("elements",		ctypes.POINTER(GPUBuffer)),
	("mode",		ctypes.c_uint),
	("start",		ctypes.c_int),
	("count",		ctypes.c_int),] )

GPU_buffer_unbind = _rpythonic_function_(		"GPU_buffer_unbind", ctypes.c_void_p, [] )

GPU_buffer_legacy = _rpythonic_function_(		"GPU_buffer_legacy", ctypes.c_int, [
	("dm",		ctypes.POINTER(DerivedMesh)),] )

GPU_build_mesh_buffers = _rpythonic_function_(		"GPU_build_mesh_buffers", ctypes.POINTER(GPU_Buffers), [
	("map",		ctypes.POINTER(GHash)),
	("mvert",		ctypes.POINTER(MVert)),
	("mface",		ctypes.POINTER(MFace)),
	("face_indices",		ctypes.POINTER(ctypes.c_int)),
	("totface",		ctypes.c_int),
	("vert_indices",		ctypes.POINTER(ctypes.c_int)),
	("uniq_verts",		ctypes.c_int),
	("totvert",		ctypes.c_int),] )

GPU_update_mesh_buffers = _rpythonic_function_(		"GPU_update_mesh_buffers", ctypes.c_void_p, [
	("buffers",		ctypes.POINTER(GPU_Buffers)),
	("mvert",		ctypes.POINTER(MVert)),
	("vert_indices",		ctypes.POINTER(ctypes.c_int)),
	("totvert",		ctypes.c_int),] )

GPU_build_grid_buffers = _rpythonic_function_(		"GPU_build_grid_buffers", ctypes.POINTER(GPU_Buffers), [
	("grids",		ctypes.POINTER(ctypes.POINTER(DMGridData))),
	("grid_indices",		ctypes.POINTER(ctypes.c_int)),
	("totgrid",		ctypes.c_int),
	("gridsize",		ctypes.c_int),] )

GPU_update_grid_buffers = _rpythonic_function_(		"GPU_update_grid_buffers", ctypes.c_void_p, [
	("buffers_v",		ctypes.POINTER(GPU_Buffers)),
	("grids",		ctypes.POINTER(ctypes.POINTER(DMGridData))),
	("grid_indices",		ctypes.POINTER(ctypes.c_int)),
	("totgrid",		ctypes.c_int),
	("gridsize",		ctypes.c_int),
	("smooth",		ctypes.c_int),] )

GPU_draw_buffers = _rpythonic_function_(		"GPU_draw_buffers", ctypes.c_void_p, [
	("buffers",		ctypes.POINTER(GPU_Buffers)),] )

GPU_free_buffers = _rpythonic_function_(		"GPU_free_buffers", ctypes.c_void_p, [
	("buffers",		ctypes.POINTER(GPU_Buffers)),] )

BLO_read_from_file = _rpythonic_function_(		"BLO_read_from_file", ctypes.POINTER(BlendFileData), [
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

BLO_read_from_memory = _rpythonic_function_(		"BLO_read_from_memory", ctypes.POINTER(BlendFileData), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("memsize",		ctypes.c_int),
	("reports",		ctypes.POINTER(ReportList)),] )

BLO_read_from_memfile = _rpythonic_function_(		"BLO_read_from_memfile", ctypes.POINTER(BlendFileData), [
	("oldmain",		ctypes.POINTER(Main)),
	("filename",		ctypes.POINTER(ctypes.c_char)),
	("memfile",		ctypes.POINTER(MemFile)),
	("reports",		ctypes.POINTER(ReportList)),] )

BLO_blendfiledata_free = _rpythonic_function_(		"BLO_blendfiledata_free", ctypes.c_void_p, [
	("bfd",		ctypes.POINTER(BlendFileData)),] )

BLO_blendhandle_from_file = _rpythonic_function_(		"BLO_blendhandle_from_file", ctypes.POINTER(BlendHandle), [
	("file",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

BLO_blendhandle_from_memory = _rpythonic_function_(		"BLO_blendhandle_from_memory", ctypes.POINTER(BlendHandle), [
	("mem",		ctypes.POINTER(ctypes.c_void_p)),
	("memsize",		ctypes.c_int),] )

BLO_blendhandle_get_datablock_names = _rpythonic_function_(		"BLO_blendhandle_get_datablock_names", ctypes.POINTER(LinkNode), [
	("bh",		ctypes.POINTER(BlendHandle)),
	("ofblocktype",		ctypes.c_int),
	("tot_names",		ctypes.POINTER(ctypes.c_int)),] )

BLO_blendhandle_get_previews = _rpythonic_function_(		"BLO_blendhandle_get_previews", ctypes.POINTER(LinkNode), [
	("bh",		ctypes.POINTER(BlendHandle)),
	("ofblocktype",		ctypes.c_int),
	("tot_prev",		ctypes.POINTER(ctypes.c_int)),] )

BLO_blendhandle_get_linkable_groups = _rpythonic_function_(		"BLO_blendhandle_get_linkable_groups", ctypes.POINTER(LinkNode), [
	("bh",		ctypes.POINTER(BlendHandle)),] )

BLO_blendhandle_close = _rpythonic_function_(		"BLO_blendhandle_close", ctypes.c_void_p, [
	("bh",		ctypes.POINTER(BlendHandle)),] )

BLO_has_bfile_extension = _rpythonic_function_(		"BLO_has_bfile_extension", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

BLO_is_a_library = _rpythonic_function_(		"BLO_is_a_library", ctypes.c_int, [
	("path",		ctypes.POINTER(ctypes.c_char)),
	("dir",		ctypes.POINTER(ctypes.c_char)),
	("group",		ctypes.POINTER(ctypes.c_char)),] )

BLO_library_append_begin = _rpythonic_function_(		"BLO_library_append_begin", ctypes.POINTER(Main), [
	("mainvar",		ctypes.POINTER(Main)),
	("bh",		ctypes.POINTER(ctypes.POINTER(BlendHandle))),
	("filepath",		ctypes.POINTER(ctypes.c_char)),] )

BLO_library_append_named_part = _rpythonic_function_(		"BLO_library_append_named_part", ctypes.POINTER(ID), [
	("mainl",		ctypes.POINTER(Main)),
	("bh",		ctypes.POINTER(ctypes.POINTER(BlendHandle))),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("idcode",		ctypes.c_int),] )

BLO_library_append_named_part_ex = _rpythonic_function_(		"BLO_library_append_named_part_ex", ctypes.POINTER(ID), [
	("C",		ctypes.POINTER(bContext)),
	("mainl",		ctypes.POINTER(Main)),
	("bh",		ctypes.POINTER(ctypes.POINTER(BlendHandle))),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("idcode",		ctypes.c_int),
	("flag",		ctypes.c_short),] )

BLO_library_append_end = _rpythonic_function_(		"BLO_library_append_end", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("mainl",		ctypes.POINTER(Main)),
	("bh",		ctypes.POINTER(ctypes.POINTER(BlendHandle))),
	("idcode",		ctypes.c_int),
	("flag",		ctypes.c_short),] )

BLO_library_read_struct = _rpythonic_function_(		"BLO_library_read_struct", ctypes.POINTER(ctypes.c_void_p), [
	("fd",		ctypes.POINTER(FileData)),
	("bh",		ctypes.POINTER(BHead)),
	("blockname",		ctypes.POINTER(ctypes.c_char)),] )

blo_read_blendafterruntime = _rpythonic_function_(		"blo_read_blendafterruntime", ctypes.POINTER(BlendFileData), [
	("file",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("actualsize",		ctypes.c_int),
	("reports",		ctypes.POINTER(ReportList)),] )

BLO_write_file = _rpythonic_function_(		"BLO_write_file", ctypes.c_int, [
	("mainvar",		ctypes.POINTER(Main)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("write_flags",		ctypes.c_int),
	("reports",		ctypes.POINTER(ReportList)),
	("thumb",		ctypes.POINTER(ctypes.c_int)),] )

BLO_write_file_mem = _rpythonic_function_(		"BLO_write_file_mem", ctypes.c_int, [
	("mainvar",		ctypes.POINTER(Main)),
	("compare",		ctypes.POINTER(MemFile)),
	("current",		ctypes.POINTER(MemFile)),
	("write_flags",		ctypes.c_int),] )

BLO_write_runtime = _rpythonic_function_(		"BLO_write_runtime", ctypes.c_int, [
	("mainvar",		ctypes.POINTER(Main)),
	("file",		ctypes.POINTER(ctypes.c_char)),
	("exename",		ctypes.POINTER(ctypes.c_char)),
	("reports",		ctypes.POINTER(ReportList)),] )

BIK_initialize_tree = _rpythonic_function_(		"BIK_initialize_tree", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("ctime",		ctypes.c_float),] )

BIK_execute_tree = _rpythonic_function_(		"BIK_execute_tree", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("pchan",		ctypes.POINTER(bPoseChannel)),
	("ctime",		ctypes.c_float),] )

BIK_release_tree = _rpythonic_function_(		"BIK_release_tree", ctypes.c_void_p, [
	("scene",		ctypes.POINTER(Scene)),
	("ob",		ctypes.POINTER(Object)),
	("ctime",		ctypes.c_float),] )

BIK_clear_data = _rpythonic_function_(		"BIK_clear_data", ctypes.c_void_p, [
	("pose",		ctypes.POINTER(bPose)),] )

BIK_clear_cache = _rpythonic_function_(		"BIK_clear_cache", ctypes.c_void_p, [
	("pose",		ctypes.POINTER(bPose)),] )

BIK_update_param = _rpythonic_function_(		"BIK_update_param", ctypes.c_void_p, [
	("pose",		ctypes.POINTER(bPose)),] )

BIK_test_constraint = _rpythonic_function_(		"BIK_test_constraint", ctypes.c_void_p, [
	("ob",		ctypes.POINTER(Object)),
	("cons",		ctypes.POINTER(bConstraint)),] )

BIK_get_constraint_param = _rpythonic_function_(		"BIK_get_constraint_param", ctypes.c_int, [
	("pose",		ctypes.POINTER(bPose)),
	("cons",		ctypes.POINTER(bConstraint)),
	("C_id",		ctypes.c_int),
	("value",		ctypes.POINTER(BIK_ParamValue)),] )

BIK_get_channel_param = _rpythonic_function_(		"BIK_get_channel_param", ctypes.c_int, [
	("pose",		ctypes.POINTER(bPose)),
	("pchan",		ctypes.POINTER(bPoseChannel)),
	("C_id",		ctypes.c_int),
	("value",		ctypes.POINTER(BIK_ParamValue)),] )

BIK_get_solver_param = _rpythonic_function_(		"BIK_get_solver_param", ctypes.c_int, [
	("pose",		ctypes.POINTER(bPose)),
	("pchan",		ctypes.POINTER(bPoseChannel)),
	("C_id",		ctypes.c_int),
	("value",		ctypes.POINTER(BIK_ParamValue)),] )

GHOST_TimerProcPtr = _rpythonic_function_(		"GHOST_TimerProcPtr", ctypes.c_void_p, [
	("task",		ctypes.POINTER(GHOST_TimerTaskHandle__)),
	("time",		ctypes.c_ulonglong),] )

GHOST_EventCallbackProcPtr = _rpythonic_function_(		"GHOST_EventCallbackProcPtr", ctypes.c_int, [
	("event",		ctypes.POINTER(GHOST_EventHandle__)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

GHOST_CreateSystem = _rpythonic_function_(		"GHOST_CreateSystem", ctypes.POINTER(GHOST_SystemHandle__), [] )

GHOST_DisposeSystem = _rpythonic_function_(		"GHOST_DisposeSystem", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_CreateEventConsumer = _rpythonic_function_(		"GHOST_CreateEventConsumer", ctypes.POINTER(GHOST_EventConsumerHandle__), [
	("eventCallback",		ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(GHOST_EventHandle__),ctypes.POINTER(ctypes.c_void_p),)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

GHOST_DisposeEventConsumer = _rpythonic_function_(		"GHOST_DisposeEventConsumer", ctypes.c_int, [
	("consumerhandle",		ctypes.POINTER(GHOST_EventConsumerHandle__)),] )

GHOST_GetMilliSeconds = _rpythonic_function_(		"GHOST_GetMilliSeconds", ctypes.c_ulonglong, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_InstallTimer = _rpythonic_function_(		"GHOST_InstallTimer", ctypes.POINTER(GHOST_TimerTaskHandle__), [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("delay",		ctypes.c_ulonglong),
	("interval",		ctypes.c_ulonglong),
	("timerProc",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(GHOST_TimerTaskHandle__),ctypes.c_ulonglong,)),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

GHOST_RemoveTimer = _rpythonic_function_(		"GHOST_RemoveTimer", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("timertaskhandle",		ctypes.POINTER(GHOST_TimerTaskHandle__)),] )

GHOST_GetNumDisplays = _rpythonic_function_(		"GHOST_GetNumDisplays", ctypes.c_ubyte, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_GetMainDisplayDimensions = _rpythonic_function_(		"GHOST_GetMainDisplayDimensions", ctypes.c_void_p, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("width",		ctypes.POINTER(ctypes.c_uint)),
	("height",		ctypes.POINTER(ctypes.c_uint)),] )

GHOST_CreateWindow = _rpythonic_function_(		"GHOST_CreateWindow", ctypes.POINTER(GHOST_WindowHandle__), [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("left",		ctypes.c_int),
	("top",		ctypes.c_int),
	("width",		ctypes.c_uint),
	("height",		ctypes.c_uint),
	("state",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("stereoVisual",		ctypes.c_int),
	("numOfAASamples",		ctypes.c_ushort),] )

GHOST_GetWindowUserData = _rpythonic_function_(		"GHOST_GetWindowUserData", ctypes.POINTER(ctypes.c_void_p), [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_SetWindowUserData = _rpythonic_function_(		"GHOST_SetWindowUserData", ctypes.c_void_p, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("userdata",		ctypes.POINTER(ctypes.c_void_p)),] )

GHOST_DisposeWindow = _rpythonic_function_(		"GHOST_DisposeWindow", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_ValidWindow = _rpythonic_function_(		"GHOST_ValidWindow", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_BeginFullScreen = _rpythonic_function_(		"GHOST_BeginFullScreen", ctypes.POINTER(GHOST_WindowHandle__), [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("setting",		ctypes.POINTER(GHOST_DisplaySetting)),
	("stereoVisual",		ctypes.c_int),] )

GHOST_EndFullScreen = _rpythonic_function_(		"GHOST_EndFullScreen", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_GetFullScreen = _rpythonic_function_(		"GHOST_GetFullScreen", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_ProcessEvents = _rpythonic_function_(		"GHOST_ProcessEvents", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("waitForEvent",		ctypes.c_int),] )

GHOST_DispatchEvents = _rpythonic_function_(		"GHOST_DispatchEvents", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),] )

GHOST_AddEventConsumer = _rpythonic_function_(		"GHOST_AddEventConsumer", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("consumerhandle",		ctypes.POINTER(GHOST_EventConsumerHandle__)),] )

GHOST_RemoveEventConsumer = _rpythonic_function_(		"GHOST_RemoveEventConsumer", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("consumerhandle",		ctypes.POINTER(GHOST_EventConsumerHandle__)),] )

GHOST_SetProgressBar = _rpythonic_function_(		"GHOST_SetProgressBar", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("progress",		ctypes.c_float),] )

GHOST_EndProgressBar = _rpythonic_function_(		"GHOST_EndProgressBar", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetCursorShape = _rpythonic_function_(		"GHOST_GetCursorShape", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_SetCursorShape = _rpythonic_function_(		"GHOST_SetCursorShape", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("cursorshape",		ctypes.c_int),] )

GHOST_SetCustomCursorShape = _rpythonic_function_(		"GHOST_SetCustomCursorShape", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("bitmap",		( ctypes.c_ubyte * 16 )),
	("mask",		( ctypes.c_ubyte * 16 )),
	("hotX",		ctypes.c_int),
	("hotY",		ctypes.c_int),] )

GHOST_SetCustomCursorShapeEx = _rpythonic_function_(		"GHOST_SetCustomCursorShapeEx", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("bitmap",		ctypes.POINTER(ctypes.c_ubyte)),
	("mask",		ctypes.POINTER(ctypes.c_ubyte)),
	("sizex",		ctypes.c_int),
	("sizey",		ctypes.c_int),
	("hotX",		ctypes.c_int),
	("hotY",		ctypes.c_int),
	("fg_color",		ctypes.c_int),
	("bg_color",		ctypes.c_int),] )

GHOST_GetCursorVisibility = _rpythonic_function_(		"GHOST_GetCursorVisibility", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_SetCursorVisibility = _rpythonic_function_(		"GHOST_SetCursorVisibility", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("visible",		ctypes.c_int),] )

GHOST_GetCursorPosition = _rpythonic_function_(		"GHOST_GetCursorPosition", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_SetCursorPosition = _rpythonic_function_(		"GHOST_SetCursorPosition", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

GHOST_SetCursorGrab = _rpythonic_function_(		"GHOST_SetCursorGrab", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("mode",		ctypes.c_int),
	("bounds",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_GetModifierKeyState = _rpythonic_function_(		"GHOST_GetModifierKeyState", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("mask",		ctypes.c_int),
	("isDown",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_GetButtonState = _rpythonic_function_(		"GHOST_GetButtonState", ctypes.c_int, [
	("systemhandle",		ctypes.POINTER(GHOST_SystemHandle__)),
	("mask",		ctypes.c_int),
	("isDown",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_setAcceptDragOperation = _rpythonic_function_(		"GHOST_setAcceptDragOperation", ctypes.c_void_p, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("canAccept",		ctypes.c_char),] )

GHOST_GetEventType = _rpythonic_function_(		"GHOST_GetEventType", ctypes.c_int, [
	("eventhandle",		ctypes.POINTER(GHOST_EventHandle__)),] )

GHOST_GetEventTime = _rpythonic_function_(		"GHOST_GetEventTime", ctypes.c_ulonglong, [
	("eventhandle",		ctypes.POINTER(GHOST_EventHandle__)),] )

GHOST_GetEventWindow = _rpythonic_function_(		"GHOST_GetEventWindow", ctypes.POINTER(GHOST_WindowHandle__), [
	("eventhandle",		ctypes.POINTER(GHOST_EventHandle__)),] )

GHOST_GetEventData = _rpythonic_function_(		"GHOST_GetEventData", ctypes.POINTER(ctypes.c_void_p), [
	("eventhandle",		ctypes.POINTER(GHOST_EventHandle__)),] )

GHOST_GetTimerProc = _rpythonic_function_(		"GHOST_GetTimerProc", ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(GHOST_TimerTaskHandle__),ctypes.c_ulonglong,), [
	("timertaskhandle",		ctypes.POINTER(GHOST_TimerTaskHandle__)),] )

GHOST_SetTimerProc = _rpythonic_function_(		"GHOST_SetTimerProc", ctypes.c_void_p, [
	("timertaskhandle",		ctypes.POINTER(GHOST_TimerTaskHandle__)),
	("timerProc",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(GHOST_TimerTaskHandle__),ctypes.c_ulonglong,)),] )

GHOST_GetTimerTaskUserData = _rpythonic_function_(		"GHOST_GetTimerTaskUserData", ctypes.POINTER(ctypes.c_void_p), [
	("timertaskhandle",		ctypes.POINTER(GHOST_TimerTaskHandle__)),] )

GHOST_SetTimerTaskUserData = _rpythonic_function_(		"GHOST_SetTimerTaskUserData", ctypes.c_void_p, [
	("timertaskhandle",		ctypes.POINTER(GHOST_TimerTaskHandle__)),
	("userData",		ctypes.POINTER(ctypes.c_void_p)),] )

GHOST_GetValid = _rpythonic_function_(		"GHOST_GetValid", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetDrawingContextType = _rpythonic_function_(		"GHOST_GetDrawingContextType", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_SetDrawingContextType = _rpythonic_function_(		"GHOST_SetDrawingContextType", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("C_type",		ctypes.c_int),] )

GHOST_SetTitle = _rpythonic_function_(		"GHOST_SetTitle", ctypes.c_void_p, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("title",		ctypes.POINTER(ctypes.c_char)),] )

GHOST_GetTitle = _rpythonic_function_(		"GHOST_GetTitle", ctypes.POINTER(ctypes.c_char), [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetWindowBounds = _rpythonic_function_(		"GHOST_GetWindowBounds", ctypes.POINTER(GHOST_RectangleHandle__), [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetClientBounds = _rpythonic_function_(		"GHOST_GetClientBounds", ctypes.POINTER(GHOST_RectangleHandle__), [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_DisposeRectangle = _rpythonic_function_(		"GHOST_DisposeRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_SetClientWidth = _rpythonic_function_(		"GHOST_SetClientWidth", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("width",		ctypes.c_uint),] )

GHOST_SetClientHeight = _rpythonic_function_(		"GHOST_SetClientHeight", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("height",		ctypes.c_uint),] )

GHOST_SetClientSize = _rpythonic_function_(		"GHOST_SetClientSize", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("width",		ctypes.c_uint),
	("height",		ctypes.c_uint),] )

GHOST_ScreenToClient = _rpythonic_function_(		"GHOST_ScreenToClient", ctypes.c_void_p, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("inX",		ctypes.c_int),
	("inY",		ctypes.c_int),
	("outX",		ctypes.POINTER(ctypes.c_int)),
	("outY",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_ClientToScreen = _rpythonic_function_(		"GHOST_ClientToScreen", ctypes.c_void_p, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("inX",		ctypes.c_int),
	("inY",		ctypes.c_int),
	("outX",		ctypes.POINTER(ctypes.c_int)),
	("outY",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_GetWindowState = _rpythonic_function_(		"GHOST_GetWindowState", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_SetWindowState = _rpythonic_function_(		"GHOST_SetWindowState", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("state",		ctypes.c_int),] )

GHOST_SetWindowModifiedState = _rpythonic_function_(		"GHOST_SetWindowModifiedState", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("isUnsavedChanges",		ctypes.c_ubyte),] )

GHOST_SetWindowOrder = _rpythonic_function_(		"GHOST_SetWindowOrder", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),
	("order",		ctypes.c_int),] )

GHOST_SwapWindowBuffers = _rpythonic_function_(		"GHOST_SwapWindowBuffers", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_ActivateWindowDrawingContext = _rpythonic_function_(		"GHOST_ActivateWindowDrawingContext", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_InvalidateWindow = _rpythonic_function_(		"GHOST_InvalidateWindow", ctypes.c_int, [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetTabletData = _rpythonic_function_(		"GHOST_GetTabletData", ctypes.POINTER(GHOST_TabletData), [
	("windowhandle",		ctypes.POINTER(GHOST_WindowHandle__)),] )

GHOST_GetWidthRectangle = _rpythonic_function_(		"GHOST_GetWidthRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_GetHeightRectangle = _rpythonic_function_(		"GHOST_GetHeightRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_GetRectangle = _rpythonic_function_(		"GHOST_GetRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("l",		ctypes.POINTER(ctypes.c_int)),
	("t",		ctypes.POINTER(ctypes.c_int)),
	("r",		ctypes.POINTER(ctypes.c_int)),
	("b",		ctypes.POINTER(ctypes.c_int)),] )

GHOST_SetRectangle = _rpythonic_function_(		"GHOST_SetRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("l",		ctypes.c_int),
	("t",		ctypes.c_int),
	("r",		ctypes.c_int),
	("b",		ctypes.c_int),] )

GHOST_IsEmptyRectangle = _rpythonic_function_(		"GHOST_IsEmptyRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_IsValidRectangle = _rpythonic_function_(		"GHOST_IsValidRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_InsetRectangle = _rpythonic_function_(		"GHOST_InsetRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("i",		ctypes.c_int),] )

GHOST_UnionRectangle = _rpythonic_function_(		"GHOST_UnionRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("anotherrectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_UnionPointRectangle = _rpythonic_function_(		"GHOST_UnionPointRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

GHOST_IsInsideRectangle = _rpythonic_function_(		"GHOST_IsInsideRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),] )

GHOST_GetRectangleVisibility = _rpythonic_function_(		"GHOST_GetRectangleVisibility", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("anotherrectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_SetCenterRectangle = _rpythonic_function_(		"GHOST_SetCenterRectangle", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("cx",		ctypes.c_int),
	("cy",		ctypes.c_int),] )

GHOST_SetRectangleCenter = _rpythonic_function_(		"GHOST_SetRectangleCenter", ctypes.c_void_p, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("cx",		ctypes.c_int),
	("cy",		ctypes.c_int),
	("w",		ctypes.c_int),
	("h",		ctypes.c_int),] )

GHOST_ClipRectangle = _rpythonic_function_(		"GHOST_ClipRectangle", ctypes.c_int, [
	("rectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),
	("anotherrectanglehandle",		ctypes.POINTER(GHOST_RectangleHandle__)),] )

GHOST_getClipboard = _rpythonic_function_(		"GHOST_getClipboard", ctypes.POINTER(ctypes.c_ubyte), [
	("selection",		ctypes.c_int),] )

GHOST_putClipboard = _rpythonic_function_(		"GHOST_putClipboard", ctypes.c_void_p, [
	("buffer",		ctypes.POINTER(ctypes.c_char)),
	("selection",		ctypes.c_int),] )

GHOST_toggleConsole = _rpythonic_function_(		"GHOST_toggleConsole", ctypes.c_int, [
	("action",		ctypes.c_int),] )

GHOST_CreateSystemPaths = _rpythonic_function_(		"GHOST_CreateSystemPaths", ctypes.c_int, [] )

GHOST_DisposeSystemPaths = _rpythonic_function_(		"GHOST_DisposeSystemPaths", ctypes.c_int, [] )

GHOST_getSystemDir = _rpythonic_function_(		"GHOST_getSystemDir", ctypes.POINTER(ctypes.c_ubyte), [] )

GHOST_getUserDir = _rpythonic_function_(		"GHOST_getUserDir", ctypes.POINTER(ctypes.c_ubyte), [] )

GHOST_getBinaryDir = _rpythonic_function_(		"GHOST_getBinaryDir", ctypes.POINTER(ctypes.c_ubyte), [] )

GHOST_addToSystemRecentFiles = _rpythonic_function_(		"GHOST_addToSystemRecentFiles", ctypes.c_void_p, [
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

plNewBulletSdk = _rpythonic_function_(		"plNewBulletSdk", ctypes.POINTER(plPhysicsSdkHandle__), [] )

plDeletePhysicsSdk = _rpythonic_function_(		"plDeletePhysicsSdk", ctypes.c_void_p, [
	("physicsSdk",		ctypes.POINTER(plPhysicsSdkHandle__)),] )

btBroadphaseCallback = _rpythonic_function_(		"btBroadphaseCallback", ctypes.c_void_p, [
	("clientData",		ctypes.POINTER(ctypes.c_void_p)),
	("object1",		ctypes.POINTER(ctypes.c_void_p)),
	("object2",		ctypes.POINTER(ctypes.c_void_p)),] )

plCreateSapBroadphase = _rpythonic_function_(		"plCreateSapBroadphase", ctypes.POINTER(plCollisionBroadphaseHandle__), [
	("beginCallback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("endCallback",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),] )

plDestroyBroadphase = _rpythonic_function_(		"plDestroyBroadphase", ctypes.c_void_p, [
	("bp",		ctypes.POINTER(plCollisionBroadphaseHandle__)),] )

plCreateProxy = _rpythonic_function_(		"plCreateProxy", ctypes.POINTER(plBroadphaseProxyHandle__), [
	("bp",		ctypes.POINTER(plCollisionBroadphaseHandle__)),
	("clientData",		ctypes.POINTER(ctypes.c_void_p)),
	("minX",		ctypes.c_float),
	("minY",		ctypes.c_float),
	("minZ",		ctypes.c_float),
	("maxX",		ctypes.c_float),
	("maxY",		ctypes.c_float),
	("maxZ",		ctypes.c_float),] )

plDestroyProxy = _rpythonic_function_(		"plDestroyProxy", ctypes.c_void_p, [
	("bp",		ctypes.POINTER(plCollisionBroadphaseHandle__)),
	("proxyHandle",		ctypes.POINTER(plBroadphaseProxyHandle__)),] )

plSetBoundingBox = _rpythonic_function_(		"plSetBoundingBox", ctypes.c_void_p, [
	("proxyHandle",		ctypes.POINTER(plBroadphaseProxyHandle__)),
	("minX",		ctypes.c_float),
	("minY",		ctypes.c_float),
	("minZ",		ctypes.c_float),
	("maxX",		ctypes.c_float),
	("maxY",		ctypes.c_float),
	("maxZ",		ctypes.c_float),] )

plCreateCollisionWorld = _rpythonic_function_(		"plCreateCollisionWorld", ctypes.POINTER(plCollisionWorldHandle__), [
	("physicsSdk",		ctypes.POINTER(plPhysicsSdkHandle__)),] )

plCreateDynamicsWorld = _rpythonic_function_(		"plCreateDynamicsWorld", ctypes.POINTER(plDynamicsWorldHandle__), [
	("physicsSdk",		ctypes.POINTER(plPhysicsSdkHandle__)),] )

plDeleteDynamicsWorld = _rpythonic_function_(		"plDeleteDynamicsWorld", ctypes.c_void_p, [
	("world",		ctypes.POINTER(plDynamicsWorldHandle__)),] )

plStepSimulation = _rpythonic_function_(		"plStepSimulation", ctypes.c_void_p, [
	("none",		ctypes.POINTER(ctypes.c_void_p)),
	("timeStep",		ctypes.c_float),] )

plAddRigidBody = _rpythonic_function_(		"plAddRigidBody", ctypes.c_void_p, [
	("world",		ctypes.POINTER(plDynamicsWorldHandle__)),
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),] )

plRemoveRigidBody = _rpythonic_function_(		"plRemoveRigidBody", ctypes.c_void_p, [
	("world",		ctypes.POINTER(plDynamicsWorldHandle__)),
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),] )

plCreateRigidBody = _rpythonic_function_(		"plCreateRigidBody", ctypes.POINTER(plRigidBodyHandle__), [
	("user_data",		ctypes.POINTER(ctypes.c_void_p)),
	("mass",		ctypes.c_float),
	("cshape",		ctypes.POINTER(plCollisionShapeHandle__)),] )

plDeleteRigidBody = _rpythonic_function_(		"plDeleteRigidBody", ctypes.c_void_p, [
	("body",		ctypes.POINTER(plRigidBodyHandle__)),] )

plNewSphereShape = _rpythonic_function_(		"plNewSphereShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("radius",		ctypes.c_float),] )

plNewBoxShape = _rpythonic_function_(		"plNewBoxShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

plNewCapsuleShape = _rpythonic_function_(		"plNewCapsuleShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("radius",		ctypes.c_float),
	("height",		ctypes.c_float),] )

plNewConeShape = _rpythonic_function_(		"plNewConeShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("radius",		ctypes.c_float),
	("height",		ctypes.c_float),] )

plNewCylinderShape = _rpythonic_function_(		"plNewCylinderShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("radius",		ctypes.c_float),
	("height",		ctypes.c_float),] )

plNewCompoundShape = _rpythonic_function_(		"plNewCompoundShape", ctypes.POINTER(plCollisionShapeHandle__), [] )

plAddChildShape = _rpythonic_function_(		"plAddChildShape", ctypes.c_void_p, [
	("compoundShape",		ctypes.POINTER(plCollisionShapeHandle__)),
	("childShape",		ctypes.POINTER(plCollisionShapeHandle__)),
	("childPos",		( ctypes.c_float * 3 )),
	("childOrn",		( ctypes.c_float * 4 )),] )

plDeleteShape = _rpythonic_function_(		"plDeleteShape", ctypes.c_void_p, [
	("shape",		ctypes.POINTER(plCollisionShapeHandle__)),] )

plNewConvexHullShape = _rpythonic_function_(		"plNewConvexHullShape", ctypes.POINTER(plCollisionShapeHandle__), [] )

plAddVertex = _rpythonic_function_(		"plAddVertex", ctypes.c_void_p, [
	("convexHull",		ctypes.POINTER(plCollisionShapeHandle__)),
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("z",		ctypes.c_float),] )

plNewMeshInterface = _rpythonic_function_(		"plNewMeshInterface", ctypes.POINTER(plMeshInterfaceHandle__), [] )

plAddTriangle = _rpythonic_function_(		"plAddTriangle", ctypes.c_void_p, [
	("meshHandle",		ctypes.POINTER(plMeshInterfaceHandle__)),
	("v0",		( ctypes.c_float * 3 )),
	("v1",		( ctypes.c_float * 3 )),
	("v2",		( ctypes.c_float * 3 )),] )

plNewStaticTriangleMeshShape = _rpythonic_function_(		"plNewStaticTriangleMeshShape", ctypes.POINTER(plCollisionShapeHandle__), [
	("none",		ctypes.POINTER(ctypes.c_void_p)),] )

plSetScaling = _rpythonic_function_(		"plSetScaling", ctypes.c_void_p, [
	("shape",		ctypes.POINTER(plCollisionShapeHandle__)),
	("scaling",		( ctypes.c_float * 3 )),] )

plGetOpenGLMatrix = _rpythonic_function_(		"plGetOpenGLMatrix", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("matrix",		ctypes.POINTER(ctypes.c_float)),] )

plGetPosition = _rpythonic_function_(		"plGetPosition", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("position",		( ctypes.c_float * 3 )),] )

plGetOrientation = _rpythonic_function_(		"plGetOrientation", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("orientation",		( ctypes.c_float * 4 )),] )

plSetPosition = _rpythonic_function_(		"plSetPosition", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("position",		( ctypes.c_float * 3 )),] )

plSetOrientation = _rpythonic_function_(		"plSetOrientation", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("orientation",		( ctypes.c_float * 4 )),] )

plSetEuler = _rpythonic_function_(		"plSetEuler", ctypes.c_void_p, [
	("yaw",		ctypes.c_float),
	("pitch",		ctypes.c_float),
	("roll",		ctypes.c_float),
	("orient",		( ctypes.c_float * 4 )),] )

plSetOpenGLMatrix = _rpythonic_function_(		"plSetOpenGLMatrix", ctypes.c_void_p, [
	("C_object",		ctypes.POINTER(plRigidBodyHandle__)),
	("matrix",		ctypes.POINTER(ctypes.c_float)),] )

plRayCast = _rpythonic_function_(		"plRayCast", ctypes.c_int, [
	("world",		ctypes.POINTER(plDynamicsWorldHandle__)),
	("rayStart",		( ctypes.c_float * 3 )),
	("rayEnd",		( ctypes.c_float * 3 )),
	("res",		plRayCastResult),] )

plNearestPoints = _rpythonic_function_(		"plNearestPoints", ctypes.c_double, [
	("p1",		( ctypes.c_float * 3 )),
	("p2",		( ctypes.c_float * 3 )),
	("p3",		( ctypes.c_float * 3 )),
	("q1",		( ctypes.c_float * 3 )),
	("q2",		( ctypes.c_float * 3 )),
	("q3",		( ctypes.c_float * 3 )),
	("pa",		ctypes.POINTER(ctypes.c_float)),
	("pb",		ctypes.POINTER(ctypes.c_float)),
	("normal",		( ctypes.c_float * 3 )),] )

bsbNew = _rpythonic_function_(		"bsbNew", ctypes.POINTER(BulletSoftBody), [] )

bsbFree = _rpythonic_function_(		"bsbFree", ctypes.c_void_p, [
	("sb",		ctypes.POINTER(BulletSoftBody)),] )

doit = _rpythonic_function_(		"doit", ctypes.c_int, [] )

instance_init = _rpythonic_function_(		"instance_init", ctypes.c_void_p, [] )

uiEmboss = _rpythonic_function_(		"uiEmboss", ctypes.c_void_p, [
	("x1",		ctypes.c_float),
	("y1",		ctypes.c_float),
	("x2",		ctypes.c_float),
	("y2",		ctypes.c_float),
	("sel",		ctypes.c_int),] )

uiRoundBox = _rpythonic_function_(		"uiRoundBox", ctypes.c_void_p, [
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("rad",		ctypes.c_float),] )

uiSetRoundBox = _rpythonic_function_(		"uiSetRoundBox", ctypes.c_void_p, [
	("C_type",		ctypes.c_int),] )

uiGetRoundBox = _rpythonic_function_(		"uiGetRoundBox", ctypes.c_int, [] )

uiRoundRect = _rpythonic_function_(		"uiRoundRect", ctypes.c_void_p, [
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("rad",		ctypes.c_float),] )

uiDrawMenuBox = _rpythonic_function_(		"uiDrawMenuBox", ctypes.c_void_p, [
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("flag",		ctypes.c_short),
	("direction",		ctypes.c_short),] )

uiDrawBoxShadow = _rpythonic_function_(		"uiDrawBoxShadow", ctypes.c_void_p, [
	("alpha",		ctypes.c_ubyte),
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),] )

uiDrawBox = _rpythonic_function_(		"uiDrawBox", ctypes.c_void_p, [
	("mode",		ctypes.c_int),
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("rad",		ctypes.c_float),] )

uiDrawBoxShade = _rpythonic_function_(		"uiDrawBoxShade", ctypes.c_void_p, [
	("mode",		ctypes.c_int),
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("rad",		ctypes.c_float),
	("shadetop",		ctypes.c_float),
	("shadedown",		ctypes.c_float),] )

uiDrawBoxVerticalShade = _rpythonic_function_(		"uiDrawBoxVerticalShade", ctypes.c_void_p, [
	("mode",		ctypes.c_int),
	("minx",		ctypes.c_float),
	("miny",		ctypes.c_float),
	("maxx",		ctypes.c_float),
	("maxy",		ctypes.c_float),
	("rad",		ctypes.c_float),
	("shadeLeft",		ctypes.c_float),
	("shadeRight",		ctypes.c_float),] )

uiWidgetScrollDraw = _rpythonic_function_(		"uiWidgetScrollDraw", ctypes.c_void_p, [
	("wcol",		ctypes.POINTER(uiWidgetColors)),
	("rect",		ctypes.POINTER(rcti)),
	("slider",		ctypes.POINTER(rcti)),
	("state",		ctypes.c_int),] )

uiButHandleFunc = _rpythonic_function_(		"uiButHandleFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButHandleRenameFunc = _rpythonic_function_(		"uiButHandleRenameFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("origstr",		ctypes.POINTER(ctypes.c_char)),] )

uiButHandleNFunc = _rpythonic_function_(		"uiButHandleNFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("argN",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButCompleteFunc = _rpythonic_function_(		"uiButCompleteFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSearchFunc = _rpythonic_function_(		"uiButSearchFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("items",		ctypes.POINTER(uiSearchItems)),] )

uiBlockHandleFunc = _rpythonic_function_(		"uiBlockHandleFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.c_int),] )

uiMenuCreateFunc = _rpythonic_function_(		"uiMenuCreateFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("layout",		ctypes.POINTER(uiLayout)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),] )

uiMenuHandleFunc = _rpythonic_function_(		"uiMenuHandleFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("event",		ctypes.c_int),] )

uiPupMenuBegin = _rpythonic_function_(		"uiPupMenuBegin", ctypes.POINTER(uiPopupMenu), [
	("C",		ctypes.POINTER(bContext)),
	("title",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiPupMenuEnd = _rpythonic_function_(		"uiPupMenuEnd", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("head",		ctypes.POINTER(uiPopupMenu)),] )

uiPupMenuLayout = _rpythonic_function_(		"uiPupMenuLayout", ctypes.POINTER(uiLayout), [
	("head",		ctypes.POINTER(uiPopupMenu)),] )

uiPupMenuOkee = _rpythonic_function_(		"uiPupMenuOkee", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

uiPupMenuSaveOver = _rpythonic_function_(		"uiPupMenuSaveOver", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("op",		ctypes.POINTER(wmOperator)),
	("filename",		ctypes.POINTER(ctypes.c_char)),] )

uiPupMenuNotice = _rpythonic_function_(		"uiPupMenuNotice", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

uiPupMenuError = _rpythonic_function_(		"uiPupMenuError", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

uiPupMenuReports = _rpythonic_function_(		"uiPupMenuReports", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("reports",		ctypes.POINTER(ReportList)),] )

uiPupMenuInvoke = _rpythonic_function_(		"uiPupMenuInvoke", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("idname",		ctypes.POINTER(ctypes.c_char)),] )

uiBlockCreateFunc = _rpythonic_function_(		"uiBlockCreateFunc", ctypes.POINTER(uiBlock), [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),] )

uiBlockCancelFunc = _rpythonic_function_(		"uiBlockCancelFunc", ctypes.c_void_p, [("arg1",		ctypes.c_void_p)] )

uiPupBlock = _rpythonic_function_(		"uiPupBlock", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiPupBlockO = _rpythonic_function_(		"uiPupBlockO", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),] )

uiPupBlockEx = _rpythonic_function_(		"uiPupBlockEx", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("popup_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)),
	("cancel_func",		ctypes.CFUNCTYPE(ctypes.c_void_p, )),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiPupBlockClose = _rpythonic_function_(		"uiPupBlockClose", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),] )

uiBeginBlock = _rpythonic_function_(		"uiBeginBlock", ctypes.POINTER(uiBlock), [
	("C",		ctypes.POINTER(bContext)),
	("region",		ctypes.POINTER(ARegion)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("dt",		ctypes.c_short),] )

uiEndBlock = _rpythonic_function_(		"uiEndBlock", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),] )

uiDrawBlock = _rpythonic_function_(		"uiDrawBlock", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),] )

uiGetBlock = _rpythonic_function_(		"uiGetBlock", ctypes.POINTER(uiBlock), [
	("name",		ctypes.POINTER(ctypes.c_char)),
	("ar",		ctypes.POINTER(ARegion)),] )

uiBlockSetEmboss = _rpythonic_function_(		"uiBlockSetEmboss", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("dt",		ctypes.c_char),] )

uiFreeBlock = _rpythonic_function_(		"uiFreeBlock", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),] )

uiFreeBlocks = _rpythonic_function_(		"uiFreeBlocks", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("lb",		ctypes.POINTER(ListBase)),] )

uiFreeInactiveBlocks = _rpythonic_function_(		"uiFreeInactiveBlocks", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("lb",		ctypes.POINTER(ListBase)),] )

uiFreeActiveButtons = _rpythonic_function_(		"uiFreeActiveButtons", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("screen",		ctypes.POINTER(bScreen)),] )

uiBlockSetRegion = _rpythonic_function_(		"uiBlockSetRegion", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("region",		ctypes.POINTER(ARegion)),] )

uiBlockSetButLock = _rpythonic_function_(		"uiBlockSetButLock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("val",		ctypes.c_int),
	("lockstr",		ctypes.POINTER(ctypes.c_char)),] )

uiBlockClearButLock = _rpythonic_function_(		"uiBlockClearButLock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),] )

uiBlockBeginAlign = _rpythonic_function_(		"uiBlockBeginAlign", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),] )

uiBlockEndAlign = _rpythonic_function_(		"uiBlockEndAlign", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),] )

uiBoundsBlock = _rpythonic_function_(		"uiBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("addval",		ctypes.c_int),] )

uiTextBoundsBlock = _rpythonic_function_(		"uiTextBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("addval",		ctypes.c_int),] )

uiPopupBoundsBlock = _rpythonic_function_(		"uiPopupBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("addval",		ctypes.c_int),
	("mx",		ctypes.c_int),
	("my",		ctypes.c_int),] )

uiMenuPopupBoundsBlock = _rpythonic_function_(		"uiMenuPopupBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("addvall",		ctypes.c_int),
	("mx",		ctypes.c_int),
	("my",		ctypes.c_int),] )

uiCenteredBoundsBlock = _rpythonic_function_(		"uiCenteredBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("addval",		ctypes.c_int),] )

uiExplicitBoundsBlock = _rpythonic_function_(		"uiExplicitBoundsBlock", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("minx",		ctypes.c_int),
	("miny",		ctypes.c_int),
	("maxx",		ctypes.c_int),
	("maxy",		ctypes.c_int),] )

uiBlocksGetYMin = _rpythonic_function_(		"uiBlocksGetYMin", ctypes.c_int, [
	("lb",		ctypes.POINTER(ListBase)),] )

uiBlockSetDirection = _rpythonic_function_(		"uiBlockSetDirection", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("direction",		ctypes.c_int),] )

uiBlockFlipOrder = _rpythonic_function_(		"uiBlockFlipOrder", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),] )

uiBlockSetFlag = _rpythonic_function_(		"uiBlockSetFlag", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("flag",		ctypes.c_int),] )

uiBlockClearFlag = _rpythonic_function_(		"uiBlockClearFlag", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("flag",		ctypes.c_int),] )

uiBlockSetXOfs = _rpythonic_function_(		"uiBlockSetXOfs", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("xofs",		ctypes.c_int),] )

uiButGetRetVal = _rpythonic_function_(		"uiButGetRetVal", ctypes.c_int, [
	("but",		ctypes.POINTER(uiBut)),] )

uiButSetDragID = _rpythonic_function_(		"uiButSetDragID", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("C_id",		ctypes.POINTER(ID)),] )

uiButSetDragRNA = _rpythonic_function_(		"uiButSetDragRNA", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiButSetDragPath = _rpythonic_function_(		"uiButSetDragPath", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("path",		ctypes.POINTER(ctypes.c_char)),] )

uiButSetDragName = _rpythonic_function_(		"uiButSetDragName", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

uiButSetDragValue = _rpythonic_function_(		"uiButSetDragValue", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),] )

uiButSetDragImage = _rpythonic_function_(		"uiButSetDragImage", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("path",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("ima",		ctypes.POINTER(ImBuf)),
	("scale",		ctypes.c_float),] )

UI_but_active_drop_name = _rpythonic_function_(		"UI_but_active_drop_name", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),] )

uiButSetFlag = _rpythonic_function_(		"uiButSetFlag", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("flag",		ctypes.c_int),] )

uiButClearFlag = _rpythonic_function_(		"uiButClearFlag", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("flag",		ctypes.c_int),] )

uiButActiveOnly = _rpythonic_function_(		"uiButActiveOnly", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("block",		ctypes.POINTER(uiBlock)),
	("but",		ctypes.POINTER(uiBut)),] )

uiDefBut = _rpythonic_function_(		"uiDefBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButF = _rpythonic_function_(		"uiDefButF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButBitF = _rpythonic_function_(		"uiDefButBitF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButI = _rpythonic_function_(		"uiDefButI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButBitI = _rpythonic_function_(		"uiDefButBitI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButS = _rpythonic_function_(		"uiDefButS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButBitS = _rpythonic_function_(		"uiDefButBitS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButC = _rpythonic_function_(		"uiDefButC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButBitC = _rpythonic_function_(		"uiDefButBitC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButR = _rpythonic_function_(		"uiDefButR", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButR_prop = _rpythonic_function_(		"uiDefButR_prop", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButO = _rpythonic_function_(		"uiDefButO", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefButTextO = _rpythonic_function_(		"uiDefButTextO", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconBut = _rpythonic_function_(		"uiDefIconBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButF = _rpythonic_function_(		"uiDefIconButF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButBitF = _rpythonic_function_(		"uiDefIconButBitF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButI = _rpythonic_function_(		"uiDefIconButI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButBitI = _rpythonic_function_(		"uiDefIconButBitI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButS = _rpythonic_function_(		"uiDefIconButS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButBitS = _rpythonic_function_(		"uiDefIconButBitS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButC = _rpythonic_function_(		"uiDefIconButC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButBitC = _rpythonic_function_(		"uiDefIconButBitC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButR = _rpythonic_function_(		"uiDefIconButR", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButR_prop = _rpythonic_function_(		"uiDefIconButR_prop", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconButO = _rpythonic_function_(		"uiDefIconButO", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextBut = _rpythonic_function_(		"uiDefIconTextBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButF = _rpythonic_function_(		"uiDefIconTextButF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButBitF = _rpythonic_function_(		"uiDefIconTextButBitF", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_float)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButI = _rpythonic_function_(		"uiDefIconTextButI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButBitI = _rpythonic_function_(		"uiDefIconTextButBitI", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_int)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButS = _rpythonic_function_(		"uiDefIconTextButS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButBitS = _rpythonic_function_(		"uiDefIconTextButBitS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_short)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButC = _rpythonic_function_(		"uiDefIconTextButC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButBitC = _rpythonic_function_(		"uiDefIconTextButBitC", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("bit",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("poin",		ctypes.POINTER(ctypes.c_char)),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButR = _rpythonic_function_(		"uiDefIconTextButR", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButR_prop = _rpythonic_function_(		"uiDefIconTextButR_prop", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("index",		ctypes.c_int),
	("min",		ctypes.c_float),
	("max",		ctypes.c_float),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextButO = _rpythonic_function_(		"uiDefIconTextButO", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("C_type",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("opcontext",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiButGetOperatorPtrRNA = _rpythonic_function_(		"uiButGetOperatorPtrRNA", ctypes.POINTER(PointerRNA), [
	("but",		ctypes.POINTER(uiBut)),] )

uiButSetUnitType = _rpythonic_function_(		"uiButSetUnitType", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("unit_type",		ctypes.c_int),] )

uiButGetUnitType = _rpythonic_function_(		"uiButGetUnitType", ctypes.c_int, [
	("but",		ctypes.POINTER(uiBut)),] )

uiIDPoinFuncFP = _rpythonic_function_(		"uiIDPoinFuncFP", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("idpp",		ctypes.POINTER(ctypes.POINTER(ID))),] )

uiIDPoinFunc = _rpythonic_function_(		"uiIDPoinFunc", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("C_id",		ctypes.POINTER(ID)),
	("event",		ctypes.c_int),] )

uiDefIDPoinBut = _rpythonic_function_(		"uiDefIDPoinBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.POINTER(ID)),)),
	("blocktype",		ctypes.c_short),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("idpp",		ctypes.POINTER(ctypes.c_void_p)),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiIconFromID = _rpythonic_function_(		"uiIconFromID", ctypes.c_int, [
	("C_id",		ctypes.POINTER(ID)),] )

uiDefPulldownBut = _rpythonic_function_(		"uiDefPulldownBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefMenuBut = _rpythonic_function_(		"uiDefMenuBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(uiLayout),ctypes.POINTER(ctypes.c_void_p),)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextMenuBut = _rpythonic_function_(		"uiDefIconTextMenuBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(uiLayout),ctypes.POINTER(ctypes.c_void_p),)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconMenuBut = _rpythonic_function_(		"uiDefIconMenuBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(uiLayout),ctypes.POINTER(ctypes.c_void_p),)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefBlockBut = _rpythonic_function_(		"uiDefBlockBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("func_arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefBlockButN = _rpythonic_function_(		"uiDefBlockButN", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("argN",		ctypes.POINTER(ctypes.c_void_p)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconBlockBut = _rpythonic_function_(		"uiDefIconBlockBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefIconTextBlockBut = _rpythonic_function_(		"uiDefIconTextBlockBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.POINTER(uiBlock), ctypes.POINTER(bContext),ctypes.POINTER(ARegion),ctypes.POINTER(ctypes.c_void_p),))),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("icon",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefKeyevtButS = _rpythonic_function_(		"uiDefKeyevtButS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("spoin",		ctypes.POINTER(ctypes.c_short)),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefHotKeyevtButS = _rpythonic_function_(		"uiDefHotKeyevtButS", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("retval",		ctypes.c_int),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("keypoin",		ctypes.POINTER(ctypes.c_short)),
	("modkeypoin",		ctypes.POINTER(ctypes.c_short)),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefSearchBut = _rpythonic_function_(		"uiDefSearchBut", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),
	("retval",		ctypes.c_int),
	("icon",		ctypes.c_int),
	("maxlen",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_short),
	("y2",		ctypes.c_short),
	("a1",		ctypes.c_float),
	("a2",		ctypes.c_float),
	("tip",		ctypes.POINTER(ctypes.c_char)),] )

uiDefAutoButR = _rpythonic_function_(		"uiDefAutoButR", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("index",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("x1",		ctypes.c_int),
	("y1",		ctypes.c_int),
	("x2",		ctypes.c_int),
	("y2",		ctypes.c_int),] )

uiDefAutoButsRNA = _rpythonic_function_(		"uiDefAutoButsRNA", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("check_prop",		ctypes.c_void_p),
	("label_align",		ctypes.c_char),] )

check_prop = _rpythonic_function_(		"check_prop", ctypes.c_int, [
	("PointerRNA",		ctypes.POINTER(PointerRNA)),
	("PropertyRNA",		ctypes.POINTER(PropertyRNA)),] )

uiSetButLink = _rpythonic_function_(		"uiSetButLink", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("poin",		ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p))),
	("ppoin",		ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_void_p)))),
	("tot",		ctypes.POINTER(ctypes.c_short)),
	("from",		ctypes.c_int),
	("to",		ctypes.c_int),] )

uiComposeLinks = _rpythonic_function_(		"uiComposeLinks", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),] )

uiFindInlink = _rpythonic_function_(		"uiFindInlink", ctypes.POINTER(uiBut), [
	("block",		ctypes.POINTER(uiBlock)),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),] )

uiSearchItemAdd = _rpythonic_function_(		"uiSearchItemAdd", ctypes.c_int, [
	("items",		ctypes.POINTER(uiSearchItems)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("poin",		ctypes.POINTER(ctypes.c_void_p)),
	("iconid",		ctypes.c_int),] )

uiButSetSearchFunc = _rpythonic_function_(		"uiButSetSearchFunc", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("sfunc",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(uiSearchItems),)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("bfunc",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("active",		ctypes.POINTER(ctypes.c_void_p)),] )

uiSearchBoxhHeight = _rpythonic_function_(		"uiSearchBoxhHeight", ctypes.c_int, [] )

uiBlockSetHandleFunc = _rpythonic_function_(		"uiBlockSetHandleFunc", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiBlockSetButmFunc = _rpythonic_function_(		"uiBlockSetButmFunc", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiBlockSetFunc = _rpythonic_function_(		"uiBlockSetFunc", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiBlockSetNFunc = _rpythonic_function_(		"uiBlockSetNFunc", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("argN",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSetRenameFunc = _rpythonic_function_(		"uiButSetRenameFunc", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_char),)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSetFunc = _rpythonic_function_(		"uiButSetFunc", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSetNFunc = _rpythonic_function_(		"uiButSetNFunc", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.POINTER(ctypes.c_void_p),)),
	("argN",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSetCompleteFunc = _rpythonic_function_(		"uiButSetCompleteFunc", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_char),ctypes.POINTER(ctypes.c_void_p),)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiBlockSetDrawExtraFunc = _rpythonic_function_(		"uiBlockSetDrawExtraFunc", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("func",		ctypes.c_void_p),
	("arg1",		ctypes.POINTER(ctypes.c_void_p)),
	("arg2",		ctypes.POINTER(ctypes.c_void_p)),] )

uiButSetFocusOnEnter = _rpythonic_function_(		"uiButSetFocusOnEnter", ctypes.c_void_p, [
	("win",		ctypes.POINTER(wmWindow)),
	("but",		ctypes.POINTER(uiBut)),] )

autocomplete_begin = _rpythonic_function_(		"autocomplete_begin", ctypes.POINTER(AutoComplete), [
	("startname",		ctypes.POINTER(ctypes.c_char)),
	("maxlen",		ctypes.c_uint),] )

autocomplete_do_name = _rpythonic_function_(		"autocomplete_do_name", ctypes.c_void_p, [
	("autocpl",		ctypes.POINTER(AutoComplete)),
	("name",		ctypes.POINTER(ctypes.c_char)),] )

autocomplete_end = _rpythonic_function_(		"autocomplete_end", ctypes.c_void_p, [
	("autocpl",		ctypes.POINTER(AutoComplete)),
	("autoname",		ctypes.POINTER(ctypes.c_char)),] )

uiBeginPanels = _rpythonic_function_(		"uiBeginPanels", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

uiEndPanels = _rpythonic_function_(		"uiEndPanels", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

uiDrawPanels = _rpythonic_function_(		"uiDrawPanels", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ar",		ctypes.POINTER(ARegion)),] )

uiBeginPanel = _rpythonic_function_(		"uiBeginPanel", ctypes.POINTER(Panel), [
	("sa",		ctypes.POINTER(ScrArea)),
	("ar",		ctypes.POINTER(ARegion)),
	("block",		ctypes.POINTER(uiBlock)),
	("pt",		ctypes.POINTER(PanelType)),
	("open",		ctypes.POINTER(ctypes.c_int)),] )

uiEndPanel = _rpythonic_function_(		"uiEndPanel", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("width",		ctypes.c_int),
	("height",		ctypes.c_int),] )

UI_add_region_handlers = _rpythonic_function_(		"UI_add_region_handlers", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),] )

UI_add_area_handlers = _rpythonic_function_(		"UI_add_area_handlers", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),] )

UI_add_popup_handlers = _rpythonic_function_(		"UI_add_popup_handlers", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("handlers",		ctypes.POINTER(ListBase)),
	("popup",		ctypes.POINTER(uiPopupBlockHandle)),] )

UI_remove_popup_handlers = _rpythonic_function_(		"UI_remove_popup_handlers", ctypes.c_void_p, [
	("handlers",		ctypes.POINTER(ListBase)),
	("popup",		ctypes.POINTER(uiPopupBlockHandle)),] )

UI_init = _rpythonic_function_(		"UI_init", ctypes.c_void_p, [] )

UI_init_userdef = _rpythonic_function_(		"UI_init_userdef", ctypes.c_void_p, [] )

UI_reinit_font = _rpythonic_function_(		"UI_reinit_font", ctypes.c_void_p, [] )

UI_exit = _rpythonic_function_(		"UI_exit", ctypes.c_void_p, [] )

uiBlockLayout = _rpythonic_function_(		"uiBlockLayout", ctypes.POINTER(uiLayout), [
	("block",		ctypes.POINTER(uiBlock)),
	("dir",		ctypes.c_int),
	("C_type",		ctypes.c_int),
	("x",		ctypes.c_int),
	("y",		ctypes.c_int),
	("size",		ctypes.c_int),
	("em",		ctypes.c_int),
	("style",		ctypes.POINTER(uiStyle)),] )

uiBlockSetCurLayout = _rpythonic_function_(		"uiBlockSetCurLayout", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("layout",		ctypes.POINTER(uiLayout)),] )

uiBlockLayoutResolve = _rpythonic_function_(		"uiBlockLayoutResolve", ctypes.c_void_p, [
	("block",		ctypes.POINTER(uiBlock)),
	("x",		ctypes.POINTER(ctypes.c_int)),
	("y",		ctypes.POINTER(ctypes.c_int)),] )

uiLayoutGetBlock = _rpythonic_function_(		"uiLayoutGetBlock", ctypes.POINTER(uiBlock), [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutSetFunc = _rpythonic_function_(		"uiLayoutSetFunc", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("handlefunc",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(ctypes.c_void_p),ctypes.c_int,)),
	("argv",		ctypes.POINTER(ctypes.c_void_p)),] )

uiLayoutSetContextPointer = _rpythonic_function_(		"uiLayoutSetContextPointer", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiLayoutIntrospect = _rpythonic_function_(		"uiLayoutIntrospect", ctypes.POINTER(ctypes.c_char), [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutOperatorButs = _rpythonic_function_(		"uiLayoutOperatorButs", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("layout",		ctypes.POINTER(uiLayout)),
	("op",		ctypes.POINTER(wmOperator)),
	("check_prop",		ctypes.c_void_p),
	("label_align",		ctypes.c_char),
	("flag",		ctypes.c_short),] )

uiButGetMenuType = _rpythonic_function_(		"uiButGetMenuType", ctypes.POINTER(MenuType), [
	("but",		ctypes.POINTER(uiBut)),] )

uiLayoutSetOperatorContext = _rpythonic_function_(		"uiLayoutSetOperatorContext", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("opcontext",		ctypes.c_int),] )

uiLayoutSetActive = _rpythonic_function_(		"uiLayoutSetActive", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("active",		ctypes.c_int),] )

uiLayoutSetEnabled = _rpythonic_function_(		"uiLayoutSetEnabled", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("enabled",		ctypes.c_int),] )

uiLayoutSetRedAlert = _rpythonic_function_(		"uiLayoutSetRedAlert", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("redalert",		ctypes.c_int),] )

uiLayoutSetAlignment = _rpythonic_function_(		"uiLayoutSetAlignment", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("alignment",		ctypes.c_int),] )

uiLayoutSetKeepAspect = _rpythonic_function_(		"uiLayoutSetKeepAspect", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("keepaspect",		ctypes.c_int),] )

uiLayoutSetScaleX = _rpythonic_function_(		"uiLayoutSetScaleX", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("scale",		ctypes.c_float),] )

uiLayoutSetScaleY = _rpythonic_function_(		"uiLayoutSetScaleY", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("scale",		ctypes.c_float),] )

uiLayoutGetOperatorContext = _rpythonic_function_(		"uiLayoutGetOperatorContext", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetActive = _rpythonic_function_(		"uiLayoutGetActive", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetEnabled = _rpythonic_function_(		"uiLayoutGetEnabled", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetRedAlert = _rpythonic_function_(		"uiLayoutGetRedAlert", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetAlignment = _rpythonic_function_(		"uiLayoutGetAlignment", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetKeepAspect = _rpythonic_function_(		"uiLayoutGetKeepAspect", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetWidth = _rpythonic_function_(		"uiLayoutGetWidth", ctypes.c_int, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetScaleX = _rpythonic_function_(		"uiLayoutGetScaleX", ctypes.c_float, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutGetScaleY = _rpythonic_function_(		"uiLayoutGetScaleY", ctypes.c_float, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutRow = _rpythonic_function_(		"uiLayoutRow", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("align",		ctypes.c_int),] )

uiLayoutColumn = _rpythonic_function_(		"uiLayoutColumn", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("align",		ctypes.c_int),] )

uiLayoutColumnFlow = _rpythonic_function_(		"uiLayoutColumnFlow", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("number",		ctypes.c_int),
	("align",		ctypes.c_int),] )

uiLayoutBox = _rpythonic_function_(		"uiLayoutBox", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutListBox = _rpythonic_function_(		"uiLayoutListBox", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("actptr",		ctypes.POINTER(PointerRNA)),
	("actprop",		ctypes.POINTER(PropertyRNA)),] )

uiLayoutAbsolute = _rpythonic_function_(		"uiLayoutAbsolute", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("align",		ctypes.c_int),] )

uiLayoutSplit = _rpythonic_function_(		"uiLayoutSplit", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("percentage",		ctypes.c_float),
	("align",		ctypes.c_int),] )

uiLayoutOverlap = _rpythonic_function_(		"uiLayoutOverlap", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiLayoutAbsoluteBlock = _rpythonic_function_(		"uiLayoutAbsoluteBlock", ctypes.POINTER(uiBlock), [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiTemplateHeader = _rpythonic_function_(		"uiTemplateHeader", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("menus",		ctypes.c_int),] )

uiTemplateDopeSheetFilter = _rpythonic_function_(		"uiTemplateDopeSheetFilter", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiTemplateID = _rpythonic_function_(		"uiTemplateID", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("newop",		ctypes.POINTER(ctypes.c_char)),
	("openop",		ctypes.POINTER(ctypes.c_char)),
	("unlinkop",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateIDBrowse = _rpythonic_function_(		"uiTemplateIDBrowse", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("newop",		ctypes.POINTER(ctypes.c_char)),
	("openop",		ctypes.POINTER(ctypes.c_char)),
	("unlinkop",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateIDPreview = _rpythonic_function_(		"uiTemplateIDPreview", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("newop",		ctypes.POINTER(ctypes.c_char)),
	("openop",		ctypes.POINTER(ctypes.c_char)),
	("unlinkop",		ctypes.POINTER(ctypes.c_char)),
	("rows",		ctypes.c_int),
	("cols",		ctypes.c_int),] )

uiTemplateAnyID = _rpythonic_function_(		"uiTemplateAnyID", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("proptypename",		ctypes.POINTER(ctypes.c_char)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplatePathBuilder = _rpythonic_function_(		"uiTemplatePathBuilder", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("root_ptr",		ctypes.POINTER(PointerRNA)),
	("text",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateModifier = _rpythonic_function_(		"uiTemplateModifier", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiTemplateConstraint = _rpythonic_function_(		"uiTemplateConstraint", ctypes.POINTER(uiLayout), [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiTemplatePreview = _rpythonic_function_(		"uiTemplatePreview", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C_id",		ctypes.POINTER(ID)),
	("show_buttons",		ctypes.c_int),
	("parent",		ctypes.POINTER(ID)),
	("slot",		ctypes.POINTER(MTex)),] )

uiTemplateColorRamp = _rpythonic_function_(		"uiTemplateColorRamp", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("expand",		ctypes.c_int),] )

uiTemplateVectorscope = _rpythonic_function_(		"uiTemplateVectorscope", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateHistogram = _rpythonic_function_(		"uiTemplateHistogram", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateWaveform = _rpythonic_function_(		"uiTemplateWaveform", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateCurveMapping = _rpythonic_function_(		"uiTemplateCurveMapping", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("C_type",		ctypes.c_int),
	("levels",		ctypes.c_int),
	("brush",		ctypes.c_int),] )

uiTemplateColorWheel = _rpythonic_function_(		"uiTemplateColorWheel", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value_slider",		ctypes.c_int),
	("lock",		ctypes.c_int),
	("lock_luminosity",		ctypes.c_int),
	("cubic",		ctypes.c_int),] )

uiTemplateLayers = _rpythonic_function_(		"uiTemplateLayers", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("used_ptr",		ctypes.POINTER(PointerRNA)),
	("used_propname",		ctypes.POINTER(ctypes.c_char)),
	("active_layer",		ctypes.c_int),] )

uiTemplateImage = _rpythonic_function_(		"uiTemplateImage", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("userptr",		ctypes.POINTER(PointerRNA)),
	("compact",		ctypes.c_int),] )

uiTemplateImageSettings = _rpythonic_function_(		"uiTemplateImageSettings", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("imfptr",		ctypes.POINTER(PointerRNA)),] )

uiTemplateImageLayers = _rpythonic_function_(		"uiTemplateImageLayers", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ima",		ctypes.POINTER(Image)),
	("iuser",		ctypes.POINTER(ImageUser)),] )

uiTemplateRunningJobs = _rpythonic_function_(		"uiTemplateRunningJobs", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),] )

uiTemplateOperatorSearch = _rpythonic_function_(		"uiTemplateOperatorSearch", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiTemplateHeader3D = _rpythonic_function_(		"uiTemplateHeader3D", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),] )

uiTemplateEditModeSelection = _rpythonic_function_(		"uiTemplateEditModeSelection", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),] )

uiTemplateTextureImage = _rpythonic_function_(		"uiTemplateTextureImage", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("tex",		ctypes.POINTER(Tex)),] )

uiTemplateReportsBanner = _rpythonic_function_(		"uiTemplateReportsBanner", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),] )

uiTemplateKeymapItemProperties = _rpythonic_function_(		"uiTemplateKeymapItemProperties", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),] )

uiTemplateList = _rpythonic_function_(		"uiTemplateList", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("activeptr",		ctypes.POINTER(PointerRNA)),
	("activeprop",		ctypes.POINTER(ctypes.c_char)),
	("prop_list",		ctypes.POINTER(ctypes.c_char)),
	("rows",		ctypes.c_int),
	("maxrows",		ctypes.c_int),
	("C_type",		ctypes.c_int),] )

uiTemplateNodeLink = _rpythonic_function_(		"uiTemplateNodeLink", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),
	("input",		ctypes.POINTER(bNodeSocket)),] )

uiTemplateNodeView = _rpythonic_function_(		"uiTemplateNodeView", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ntree",		ctypes.POINTER(bNodeTree)),
	("node",		ctypes.POINTER(bNode)),
	("input",		ctypes.POINTER(bNodeSocket)),] )

uiTemplateTextureUser = _rpythonic_function_(		"uiTemplateTextureUser", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),] )

uiTemplateTextureShow = _rpythonic_function_(		"uiTemplateTextureShow", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),] )

uiTemplateMovieClip = _rpythonic_function_(		"uiTemplateMovieClip", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("compact",		ctypes.c_int),] )

uiTemplateTrack = _rpythonic_function_(		"uiTemplateTrack", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiTemplateMarker = _rpythonic_function_(		"uiTemplateMarker", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("userptr",		ctypes.POINTER(PointerRNA)),
	("trackptr",		ctypes.POINTER(PointerRNA)),
	("cmpact",		ctypes.c_int),] )

uiItemO = _rpythonic_function_(		"uiItemO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),] )

uiItemEnumO = _rpythonic_function_(		"uiItemEnumO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

uiItemEnumO_value = _rpythonic_function_(		"uiItemEnumO_value", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

uiItemEnumO_string = _rpythonic_function_(		"uiItemEnumO_string", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

uiItemsEnumO = _rpythonic_function_(		"uiItemsEnumO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiItemBooleanO = _rpythonic_function_(		"uiItemBooleanO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

uiItemIntO = _rpythonic_function_(		"uiItemIntO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

uiItemFloatO = _rpythonic_function_(		"uiItemFloatO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_float),] )

uiItemStringO = _rpythonic_function_(		"uiItemStringO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),] )

uiItemFullO = _rpythonic_function_(		"uiItemFullO", PointerRNA, [
	("layout",		ctypes.POINTER(uiLayout)),
	("idname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("properties",		ctypes.POINTER(IDProperty)),
	("context",		ctypes.c_int),
	("flag",		ctypes.c_int),] )

uiItemR = _rpythonic_function_(		"uiItemR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("flag",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemFullR = _rpythonic_function_(		"uiItemFullR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(PropertyRNA)),
	("index",		ctypes.c_int),
	("value",		ctypes.c_int),
	("flag",		ctypes.c_int),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemEnumR = _rpythonic_function_(		"uiItemEnumR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.c_int),] )

uiItemEnumR_string = _rpythonic_function_(		"uiItemEnumR_string", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("value",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemsEnumR = _rpythonic_function_(		"uiItemsEnumR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),] )

uiItemPointerR = _rpythonic_function_(		"uiItemPointerR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("searchptr",		ctypes.POINTER(PointerRNA)),
	("searchpropname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemsFullEnumO = _rpythonic_function_(		"uiItemsFullEnumO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("properties",		ctypes.POINTER(IDProperty)),
	("context",		ctypes.c_int),
	("flag",		ctypes.c_int),] )

uiItemL = _rpythonic_function_(		"uiItemL", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemLDrag = _rpythonic_function_(		"uiItemLDrag", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemM = _rpythonic_function_(		"uiItemM", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("C",		ctypes.POINTER(bContext)),
	("menuname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemV = _rpythonic_function_(		"uiItemV", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("argval",		ctypes.c_int),] )

uiItemS = _rpythonic_function_(		"uiItemS", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),] )

uiItemMenuF = _rpythonic_function_(		"uiItemMenuF", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),
	("func",		ctypes.CFUNCTYPE(ctypes.c_void_p, ctypes.POINTER(bContext),ctypes.POINTER(uiLayout),ctypes.POINTER(ctypes.c_void_p),)),
	("arg",		ctypes.POINTER(ctypes.c_void_p)),] )

uiItemMenuEnumO = _rpythonic_function_(		"uiItemMenuEnumO", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("opname",		ctypes.POINTER(ctypes.c_char)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

uiItemMenuEnumR = _rpythonic_function_(		"uiItemMenuEnumR", ctypes.c_void_p, [
	("layout",		ctypes.POINTER(uiLayout)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("propname",		ctypes.POINTER(ctypes.c_char)),
	("name",		ctypes.POINTER(ctypes.c_char)),
	("icon",		ctypes.c_int),] )

UI_buttons_operatortypes = _rpythonic_function_(		"UI_buttons_operatortypes", ctypes.c_void_p, [] )

uiContextActiveButton = _rpythonic_function_(		"uiContextActiveButton", ctypes.POINTER(uiBut), [
	("C",		ctypes.POINTER(bContext)),] )

uiContextActiveProperty = _rpythonic_function_(		"uiContextActiveProperty", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(ctypes.POINTER(PropertyRNA))),
	("index",		ctypes.POINTER(ctypes.c_int)),] )

uiContextActivePropertyHandle = _rpythonic_function_(		"uiContextActivePropertyHandle", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

uiContextActiveOperator = _rpythonic_function_(		"uiContextActiveOperator", ctypes.POINTER(wmOperator), [
	("C",		ctypes.POINTER(bContext)),] )

uiContextAnimUpdate = _rpythonic_function_(		"uiContextAnimUpdate", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),] )

uiFileBrowseContextProperty = _rpythonic_function_(		"uiFileBrowseContextProperty", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(ctypes.POINTER(PropertyRNA))),] )

uiIDContextProperty = _rpythonic_function_(		"uiIDContextProperty", ctypes.c_void_p, [
	("C",		ctypes.POINTER(bContext)),
	("ptr",		ctypes.POINTER(PointerRNA)),
	("prop",		ctypes.POINTER(ctypes.POINTER(PropertyRNA))),] )

uiStyleFontSet = _rpythonic_function_(		"uiStyleFontSet", ctypes.c_void_p, [
	("fs",		ctypes.POINTER(uiFontStyle)),] )

uiStyleFontDrawExt = _rpythonic_function_(		"uiStyleFontDrawExt", ctypes.c_void_p, [
	("fs",		ctypes.POINTER(uiFontStyle)),
	("rect",		ctypes.POINTER(rcti)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),
	("r_xofs",		ctypes.POINTER(ctypes.c_float)),
	("r_yofs",		ctypes.POINTER(ctypes.c_float)),] )

uiStyleFontDraw = _rpythonic_function_(		"uiStyleFontDraw", ctypes.c_void_p, [
	("fs",		ctypes.POINTER(uiFontStyle)),
	("rect",		ctypes.POINTER(rcti)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

uiStyleFontDrawRotated = _rpythonic_function_(		"uiStyleFontDrawRotated", ctypes.c_void_p, [
	("fs",		ctypes.POINTER(uiFontStyle)),
	("rect",		ctypes.POINTER(rcti)),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

UI_GetStringWidth = _rpythonic_function_(		"UI_GetStringWidth", ctypes.c_int, [
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

UI_DrawString = _rpythonic_function_(		"UI_DrawString", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("C_str",		ctypes.POINTER(ctypes.c_char)),] )

UI_DrawTriIcon = _rpythonic_function_(		"UI_DrawTriIcon", ctypes.c_void_p, [
	("x",		ctypes.c_float),
	("y",		ctypes.c_float),
	("dir",		ctypes.c_char),] )

UI_GetStyle = _rpythonic_function_(		"UI_GetStyle", ctypes.POINTER(uiStyle), [] )

UI_template_fix_linking = _rpythonic_function_(		"UI_template_fix_linking", ctypes.c_void_p, [] )

UI_editsource_enable_check = _rpythonic_function_(		"UI_editsource_enable_check", ctypes.c_int, [] )

UI_editsource_active_but_test = _rpythonic_function_(		"UI_editsource_active_but_test", ctypes.c_void_p, [
	("but",		ctypes.POINTER(uiBut)),] )

collada_import = _rpythonic_function_(		"collada_import", ctypes.c_int, [
	("C",		ctypes.POINTER(bContext)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),] )

collada_export = _rpythonic_function_(		"collada_export", ctypes.c_int, [
	("sce",		ctypes.POINTER(Scene)),
	("filepath",		ctypes.POINTER(ctypes.c_char)),
	("apply_modifiers",		ctypes.c_int),
	("export_mesh_type",		ctypes.c_int),  # ENUM: BC_MESH_TYPE_VIEW, BC_MESH_TYPE_RENDER (some modifiers have different view/render settings)
	("selected",		ctypes.c_int),
	("include_children",		ctypes.c_int),
	("include_armatures",		ctypes.c_int),
	("deform_bones_only",		ctypes.c_int),
	("active_uv_only",		ctypes.c_int),
	("include_uv_textures",		ctypes.c_int),
	("include_material_textures",		ctypes.c_int),
	("use_texture_copies",		ctypes.c_int),
	("use_object_instantiation",		ctypes.c_int),
	("sort_by_name",		ctypes.c_int),
	("second_life",		ctypes.c_int),
	]
)


_rpythonic_convert_structs_to_objects()

_rpythonic_setup_return_wrappers()
_rpythonic_make_nice_global_enums_()
_rpythonic_clean_up_missing_functions_()
